
ultra_sonic_New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080086d0  080086d0  000186d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b0  080087b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080087b0  080087b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087b0  080087b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b0  080087b0  000187b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080087b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000039f0  20000074  0800882c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003a64  0800882c  00023a64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ed1  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f09  00000000  00000000  00039fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0003dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001149  00000000  00000000  0003f510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019588  00000000  00000000  00040659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a4dd  00000000  00000000  00059be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094a84  00000000  00000000  000740be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e90  00000000  00000000  00108b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080086b8 	.word	0x080086b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080086b8 	.word	0x080086b8

08000150 <Driving_Init>:
static u8 onetimeflagF=1,onetimeflagB=1;
static u8 Distance_Arr[11]={2,15,40,60,80,95,110,120,130,140,150};

   /* Starting the PWM signal */
void Driving_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	Motor_Init_Timer();
 8000154:	f000 fa56 	bl	8000604 <Motor_Init_Timer>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <update_speed>:

    /* function to update forward and backward motor speed */
static void update_speed(Speed_t speed){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	if(motor_flag == 1){
 8000166:	4b0b      	ldr	r3, [pc, #44]	; (8000194 <update_speed+0x38>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d105      	bne.n	800017a <update_speed+0x1e>
		Motor_Forward(Speed);
 800016e:	4b0a      	ldr	r3, [pc, #40]	; (8000198 <update_speed+0x3c>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	4618      	mov	r0, r3
 8000174:	f000 fa86 	bl	8000684 <Motor_Forward>
	}
	else if(motor_flag == 2){
		Motor_Backward(Speed);
	}
}
 8000178:	e008      	b.n	800018c <update_speed+0x30>
	else if(motor_flag == 2){
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <update_speed+0x38>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	2b02      	cmp	r3, #2
 8000180:	d104      	bne.n	800018c <update_speed+0x30>
		Motor_Backward(Speed);
 8000182:	4b05      	ldr	r3, [pc, #20]	; (8000198 <update_speed+0x3c>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fa9a 	bl	80006c0 <Motor_Backward>
}
 800018c:	bf00      	nop
 800018e:	3708      	adds	r7, #8
 8000190:	46bd      	mov	sp, r7
 8000192:	bd80      	pop	{r7, pc}
 8000194:	20000090 	.word	0x20000090
 8000198:	20000000 	.word	0x20000000

0800019c <Driving_Runnable>:

   /* function to control the speed and the direction of the car based on a character received
    * from bluetooth */
void Driving_Runnable(u8 num)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
	if((num>='0'&&num<='9')||(num=='q')){
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	2b2f      	cmp	r3, #47	; 0x2f
 80001aa:	d902      	bls.n	80001b2 <Driving_Runnable+0x16>
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	2b39      	cmp	r3, #57	; 0x39
 80001b0:	d903      	bls.n	80001ba <Driving_Runnable+0x1e>
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2b71      	cmp	r3, #113	; 0x71
 80001b6:	f040 80bf 	bne.w	8000338 <Driving_Runnable+0x19c>
		switch(num)
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	3b30      	subs	r3, #48	; 0x30
 80001be:	2b41      	cmp	r3, #65	; 0x41
 80001c0:	f200 80b4 	bhi.w	800032c <Driving_Runnable+0x190>
 80001c4:	a201      	add	r2, pc, #4	; (adr r2, 80001cc <Driving_Runnable+0x30>)
 80001c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ca:	bf00      	nop
 80001cc:	080002d5 	.word	0x080002d5
 80001d0:	080002dd 	.word	0x080002dd
 80001d4:	080002e5 	.word	0x080002e5
 80001d8:	080002ed 	.word	0x080002ed
 80001dc:	080002f5 	.word	0x080002f5
 80001e0:	080002fd 	.word	0x080002fd
 80001e4:	08000305 	.word	0x08000305
 80001e8:	0800030d 	.word	0x0800030d
 80001ec:	08000315 	.word	0x08000315
 80001f0:	0800031d 	.word	0x0800031d
 80001f4:	0800032d 	.word	0x0800032d
 80001f8:	0800032d 	.word	0x0800032d
 80001fc:	0800032d 	.word	0x0800032d
 8000200:	0800032d 	.word	0x0800032d
 8000204:	0800032d 	.word	0x0800032d
 8000208:	0800032d 	.word	0x0800032d
 800020c:	0800032d 	.word	0x0800032d
 8000210:	0800032d 	.word	0x0800032d
 8000214:	0800032d 	.word	0x0800032d
 8000218:	0800032d 	.word	0x0800032d
 800021c:	0800032d 	.word	0x0800032d
 8000220:	0800032d 	.word	0x0800032d
 8000224:	0800032d 	.word	0x0800032d
 8000228:	0800032d 	.word	0x0800032d
 800022c:	0800032d 	.word	0x0800032d
 8000230:	0800032d 	.word	0x0800032d
 8000234:	0800032d 	.word	0x0800032d
 8000238:	0800032d 	.word	0x0800032d
 800023c:	0800032d 	.word	0x0800032d
 8000240:	0800032d 	.word	0x0800032d
 8000244:	0800032d 	.word	0x0800032d
 8000248:	0800032d 	.word	0x0800032d
 800024c:	0800032d 	.word	0x0800032d
 8000250:	0800032d 	.word	0x0800032d
 8000254:	0800032d 	.word	0x0800032d
 8000258:	0800032d 	.word	0x0800032d
 800025c:	0800032d 	.word	0x0800032d
 8000260:	0800032d 	.word	0x0800032d
 8000264:	0800032d 	.word	0x0800032d
 8000268:	0800032d 	.word	0x0800032d
 800026c:	0800032d 	.word	0x0800032d
 8000270:	0800032d 	.word	0x0800032d
 8000274:	0800032d 	.word	0x0800032d
 8000278:	0800032d 	.word	0x0800032d
 800027c:	0800032d 	.word	0x0800032d
 8000280:	0800032d 	.word	0x0800032d
 8000284:	0800032d 	.word	0x0800032d
 8000288:	0800032d 	.word	0x0800032d
 800028c:	0800032d 	.word	0x0800032d
 8000290:	0800032d 	.word	0x0800032d
 8000294:	0800032d 	.word	0x0800032d
 8000298:	0800032d 	.word	0x0800032d
 800029c:	0800032d 	.word	0x0800032d
 80002a0:	0800032d 	.word	0x0800032d
 80002a4:	0800032d 	.word	0x0800032d
 80002a8:	0800032d 	.word	0x0800032d
 80002ac:	0800032d 	.word	0x0800032d
 80002b0:	0800032d 	.word	0x0800032d
 80002b4:	0800032d 	.word	0x0800032d
 80002b8:	0800032d 	.word	0x0800032d
 80002bc:	0800032d 	.word	0x0800032d
 80002c0:	0800032d 	.word	0x0800032d
 80002c4:	0800032d 	.word	0x0800032d
 80002c8:	0800032d 	.word	0x0800032d
 80002cc:	0800032d 	.word	0x0800032d
 80002d0:	08000325 	.word	0x08000325
		{
		case '0':
			Speed=S_0;
 80002d4:	4b8c      	ldr	r3, [pc, #560]	; (8000508 <Driving_Runnable+0x36c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
			break;
 80002da:	e027      	b.n	800032c <Driving_Runnable+0x190>
		case '1':
			Speed=S_10;
 80002dc:	4b8a      	ldr	r3, [pc, #552]	; (8000508 <Driving_Runnable+0x36c>)
 80002de:	220a      	movs	r2, #10
 80002e0:	701a      	strb	r2, [r3, #0]
			break;
 80002e2:	e023      	b.n	800032c <Driving_Runnable+0x190>
		case '2':
			Speed=S_20;
 80002e4:	4b88      	ldr	r3, [pc, #544]	; (8000508 <Driving_Runnable+0x36c>)
 80002e6:	2214      	movs	r2, #20
 80002e8:	701a      	strb	r2, [r3, #0]
			break;
 80002ea:	e01f      	b.n	800032c <Driving_Runnable+0x190>
		case '3':
			Speed=S_30;
 80002ec:	4b86      	ldr	r3, [pc, #536]	; (8000508 <Driving_Runnable+0x36c>)
 80002ee:	221e      	movs	r2, #30
 80002f0:	701a      	strb	r2, [r3, #0]
			break;
 80002f2:	e01b      	b.n	800032c <Driving_Runnable+0x190>
		case '4':
			Speed=S_40;
 80002f4:	4b84      	ldr	r3, [pc, #528]	; (8000508 <Driving_Runnable+0x36c>)
 80002f6:	2228      	movs	r2, #40	; 0x28
 80002f8:	701a      	strb	r2, [r3, #0]
			break;
 80002fa:	e017      	b.n	800032c <Driving_Runnable+0x190>
		case '5':
			Speed=S_50;
 80002fc:	4b82      	ldr	r3, [pc, #520]	; (8000508 <Driving_Runnable+0x36c>)
 80002fe:	2232      	movs	r2, #50	; 0x32
 8000300:	701a      	strb	r2, [r3, #0]
			break;
 8000302:	e013      	b.n	800032c <Driving_Runnable+0x190>
		case '6':
			Speed=S_60;
 8000304:	4b80      	ldr	r3, [pc, #512]	; (8000508 <Driving_Runnable+0x36c>)
 8000306:	223c      	movs	r2, #60	; 0x3c
 8000308:	701a      	strb	r2, [r3, #0]
			break;
 800030a:	e00f      	b.n	800032c <Driving_Runnable+0x190>
		case '7':
			Speed=S_70;
 800030c:	4b7e      	ldr	r3, [pc, #504]	; (8000508 <Driving_Runnable+0x36c>)
 800030e:	2246      	movs	r2, #70	; 0x46
 8000310:	701a      	strb	r2, [r3, #0]
			break;
 8000312:	e00b      	b.n	800032c <Driving_Runnable+0x190>
		case '8':
			Speed=S_80;
 8000314:	4b7c      	ldr	r3, [pc, #496]	; (8000508 <Driving_Runnable+0x36c>)
 8000316:	2250      	movs	r2, #80	; 0x50
 8000318:	701a      	strb	r2, [r3, #0]
			break;
 800031a:	e007      	b.n	800032c <Driving_Runnable+0x190>
		case '9':
			Speed=S_90;
 800031c:	4b7a      	ldr	r3, [pc, #488]	; (8000508 <Driving_Runnable+0x36c>)
 800031e:	225a      	movs	r2, #90	; 0x5a
 8000320:	701a      	strb	r2, [r3, #0]
			break;
 8000322:	e003      	b.n	800032c <Driving_Runnable+0x190>
		case 'q':
			Speed=S_100;
 8000324:	4b78      	ldr	r3, [pc, #480]	; (8000508 <Driving_Runnable+0x36c>)
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	701a      	strb	r2, [r3, #0]
			break;
 800032a:	bf00      	nop
		}
		update_speed(Speed);
 800032c:	4b76      	ldr	r3, [pc, #472]	; (8000508 <Driving_Runnable+0x36c>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff13 	bl	800015c <update_speed>
 8000336:	e0e3      	b.n	8000500 <Driving_Runnable+0x364>
	}
	else{
		switch(num)
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	3b42      	subs	r3, #66	; 0x42
 800033c:	2b34      	cmp	r3, #52	; 0x34
 800033e:	f200 80df 	bhi.w	8000500 <Driving_Runnable+0x364>
 8000342:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <Driving_Runnable+0x1ac>)
 8000344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000348:	08000443 	.word	0x08000443
 800034c:	08000501 	.word	0x08000501
 8000350:	080004e1 	.word	0x080004e1
 8000354:	08000501 	.word	0x08000501
 8000358:	0800042d 	.word	0x0800042d
 800035c:	08000479 	.word	0x08000479
 8000360:	080004a5 	.word	0x080004a5
 8000364:	0800048f 	.word	0x0800048f
 8000368:	080004bb 	.word	0x080004bb
 800036c:	08000501 	.word	0x08000501
 8000370:	08000459 	.word	0x08000459
 8000374:	08000501 	.word	0x08000501
 8000378:	08000501 	.word	0x08000501
 800037c:	08000501 	.word	0x08000501
 8000380:	08000501 	.word	0x08000501
 8000384:	08000501 	.word	0x08000501
 8000388:	08000469 	.word	0x08000469
 800038c:	0800041d 	.word	0x0800041d
 8000390:	08000501 	.word	0x08000501
 8000394:	080004f9 	.word	0x080004f9
 8000398:	080004d1 	.word	0x080004d1
 800039c:	080004f1 	.word	0x080004f1
 80003a0:	08000501 	.word	0x08000501
 80003a4:	08000501 	.word	0x08000501
 80003a8:	08000501 	.word	0x08000501
 80003ac:	08000501 	.word	0x08000501
 80003b0:	08000501 	.word	0x08000501
 80003b4:	08000501 	.word	0x08000501
 80003b8:	08000501 	.word	0x08000501
 80003bc:	08000501 	.word	0x08000501
 80003c0:	08000501 	.word	0x08000501
 80003c4:	08000501 	.word	0x08000501
 80003c8:	08000501 	.word	0x08000501
 80003cc:	08000501 	.word	0x08000501
 80003d0:	08000501 	.word	0x08000501
 80003d4:	08000501 	.word	0x08000501
 80003d8:	08000501 	.word	0x08000501
 80003dc:	08000501 	.word	0x08000501
 80003e0:	08000501 	.word	0x08000501
 80003e4:	08000501 	.word	0x08000501
 80003e8:	08000501 	.word	0x08000501
 80003ec:	08000501 	.word	0x08000501
 80003f0:	08000501 	.word	0x08000501
 80003f4:	08000501 	.word	0x08000501
 80003f8:	08000501 	.word	0x08000501
 80003fc:	08000501 	.word	0x08000501
 8000400:	08000501 	.word	0x08000501
 8000404:	08000501 	.word	0x08000501
 8000408:	08000501 	.word	0x08000501
 800040c:	08000501 	.word	0x08000501
 8000410:	08000501 	.word	0x08000501
 8000414:	08000501 	.word	0x08000501
 8000418:	080004d9 	.word	0x080004d9
		{
		case 'S':
			Motor1_Stop();
 800041c:	f000 f902 	bl	8000624 <Motor1_Stop>
			Motor2_Stop();
 8000420:	f000 f916 	bl	8000650 <Motor2_Stop>
			motor_flag = 0;
 8000424:	4b39      	ldr	r3, [pc, #228]	; (800050c <Driving_Runnable+0x370>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
			break;
 800042a:	e069      	b.n	8000500 <Driving_Runnable+0x364>
		case 'F':
			Motor2_Stop();
 800042c:	f000 f910 	bl	8000650 <Motor2_Stop>
			Motor_Forward(Speed);
 8000430:	4b35      	ldr	r3, [pc, #212]	; (8000508 <Driving_Runnable+0x36c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	4618      	mov	r0, r3
 8000436:	f000 f925 	bl	8000684 <Motor_Forward>
			motor_flag = 1;
 800043a:	4b34      	ldr	r3, [pc, #208]	; (800050c <Driving_Runnable+0x370>)
 800043c:	2201      	movs	r2, #1
 800043e:	701a      	strb	r2, [r3, #0]
			break;
 8000440:	e05e      	b.n	8000500 <Driving_Runnable+0x364>
		case 'B':
			Motor2_Stop();
 8000442:	f000 f905 	bl	8000650 <Motor2_Stop>
			Motor_Backward(Speed);
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <Driving_Runnable+0x36c>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f938 	bl	80006c0 <Motor_Backward>
			motor_flag = 2;
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <Driving_Runnable+0x370>)
 8000452:	2202      	movs	r2, #2
 8000454:	701a      	strb	r2, [r3, #0]
			break;
 8000456:	e053      	b.n	8000500 <Driving_Runnable+0x364>
		case 'L':
			Motor1_Stop();
 8000458:	f000 f8e4 	bl	8000624 <Motor1_Stop>
			Motor_Left();
 800045c:	f000 f968 	bl	8000730 <Motor_Left>
			motor_flag = 0;
 8000460:	4b2a      	ldr	r3, [pc, #168]	; (800050c <Driving_Runnable+0x370>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
			break;
 8000466:	e04b      	b.n	8000500 <Driving_Runnable+0x364>
		case 'R':
			Motor1_Stop();
 8000468:	f000 f8dc 	bl	8000624 <Motor1_Stop>
			Motor_Right();
 800046c:	f000 f946 	bl	80006fc <Motor_Right>
			motor_flag = 0;
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <Driving_Runnable+0x370>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
			break;
 8000476:	e043      	b.n	8000500 <Driving_Runnable+0x364>
		case 'G':
			Motor_Forward(Speed);
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <Driving_Runnable+0x36c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4618      	mov	r0, r3
 800047e:	f000 f901 	bl	8000684 <Motor_Forward>
			Motor_Left();
 8000482:	f000 f955 	bl	8000730 <Motor_Left>
			motor_flag = 1;
 8000486:	4b21      	ldr	r3, [pc, #132]	; (800050c <Driving_Runnable+0x370>)
 8000488:	2201      	movs	r2, #1
 800048a:	701a      	strb	r2, [r3, #0]
			break;
 800048c:	e038      	b.n	8000500 <Driving_Runnable+0x364>
		case 'I':
			Motor_Forward(Speed);
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <Driving_Runnable+0x36c>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f000 f8f6 	bl	8000684 <Motor_Forward>
			Motor_Right();
 8000498:	f000 f930 	bl	80006fc <Motor_Right>
			motor_flag = 1;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <Driving_Runnable+0x370>)
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
			break;
 80004a2:	e02d      	b.n	8000500 <Driving_Runnable+0x364>
		case 'H':
			Motor_Backward(Speed);
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <Driving_Runnable+0x36c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f909 	bl	80006c0 <Motor_Backward>
			Motor_Left();
 80004ae:	f000 f93f 	bl	8000730 <Motor_Left>
			motor_flag = 2;
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <Driving_Runnable+0x370>)
 80004b4:	2202      	movs	r2, #2
 80004b6:	701a      	strb	r2, [r3, #0]
			break;
 80004b8:	e022      	b.n	8000500 <Driving_Runnable+0x364>
		case 'J':
			Motor_Backward(Speed);
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <Driving_Runnable+0x36c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 f8fe 	bl	80006c0 <Motor_Backward>
			Motor_Right();
 80004c4:	f000 f91a 	bl	80006fc <Motor_Right>
			motor_flag = 2;
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <Driving_Runnable+0x370>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	701a      	strb	r2, [r3, #0]
			break;
 80004ce:	e017      	b.n	8000500 <Driving_Runnable+0x364>
		case 'V':
			Obstacle_mode_Setter(OBSTACLE_HIGH_ON);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f000 fd1b 	bl	8000f0c <Obstacle_mode_Setter>
			break;
 80004d6:	e013      	b.n	8000500 <Driving_Runnable+0x364>
		case 'v':
			Obstacle_mode_Setter(OBSTACLE_OFF);
 80004d8:	2000      	movs	r0, #0
 80004da:	f000 fd17 	bl	8000f0c <Obstacle_mode_Setter>
			break;
 80004de:	e00f      	b.n	8000500 <Driving_Runnable+0x364>
		case 'D':
			Motor1_Stop();
 80004e0:	f000 f8a0 	bl	8000624 <Motor1_Stop>
			Motor2_Stop();
 80004e4:	f000 f8b4 	bl	8000650 <Motor2_Stop>
			motor_flag = 0;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <Driving_Runnable+0x370>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
			break;
 80004ee:	e007      	b.n	8000500 <Driving_Runnable+0x364>
		case 'W':
			mode_Setter(SEARCH_RIGHT);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f000 fcf1 	bl	8000ed8 <mode_Setter>
			break;
 80004f6:	e003      	b.n	8000500 <Driving_Runnable+0x364>
		case 'U':
			mode_Setter(SEARCH_LEFT);
 80004f8:	2002      	movs	r0, #2
 80004fa:	f000 fced 	bl	8000ed8 <mode_Setter>
			break;
 80004fe:	bf00      	nop
		}
	}
	/*if(mode_Getter()==SEARCH_RIGHT){
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
	}*/
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000
 800050c:	20000090 	.word	0x20000090

08000510 <Obstacle_Avoidance>:

   /* if obstacle avoidance is on we enable the ultrasonic sensor based on direcion the car is moving in
    * if the activated sensor measures less than or equal a specific distance (this distance depends on the current speed of the car) */
void Obstacle_Avoidance(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
	if(Obstacle_mode_Getter()==OBSTACLE_HIGH_ON){
 8000516:	f000 fd09 	bl	8000f2c <Obstacle_mode_Getter>
 800051a:	4603      	mov	r3, r0
 800051c:	2b01      	cmp	r3, #1
 800051e:	d161      	bne.n	80005e4 <Obstacle_Avoidance+0xd4>
		if(motor_flag==1)
 8000520:	4b32      	ldr	r3, [pc, #200]	; (80005ec <Obstacle_Avoidance+0xdc>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d128      	bne.n	800057a <Obstacle_Avoidance+0x6a>
		{
			u16 num=ultrasonics_arr_Getter(Sensor1_ind);
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fcb5 	bl	8000e98 <ultrasonics_arr_Getter>
 800052e:	4603      	mov	r3, r0
 8000530:	807b      	strh	r3, [r7, #2]
			u8 flagnum=ultrasonics_Flagarr_Getter(Sensor1_ind);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fcc0 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000538:	4603      	mov	r3, r0
 800053a:	707b      	strb	r3, [r7, #1]
			if(onetimeflagF)
 800053c:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <Obstacle_Avoidance+0xe0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d004      	beq.n	800054e <Obstacle_Avoidance+0x3e>
			{
				onetimeflagF=0;
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <Obstacle_Avoidance+0xe0>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
				Ultrasonic_RightSideSearch();
 800054a:	f000 fe2d 	bl	80011a8 <Ultrasonic_RightSideSearch>
			}
			if((num<=Distance_Arr[(Speed/10)]) && (flagnum==1))
 800054e:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <Obstacle_Avoidance+0xe4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4a29      	ldr	r2, [pc, #164]	; (80005f8 <Obstacle_Avoidance+0xe8>)
 8000554:	fba2 2303 	umull	r2, r3, r2, r3
 8000558:	08db      	lsrs	r3, r3, #3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	461a      	mov	r2, r3
 800055e:	4b27      	ldr	r3, [pc, #156]	; (80005fc <Obstacle_Avoidance+0xec>)
 8000560:	5c9b      	ldrb	r3, [r3, r2]
 8000562:	b29b      	uxth	r3, r3
 8000564:	887a      	ldrh	r2, [r7, #2]
 8000566:	429a      	cmp	r2, r3
 8000568:	d83c      	bhi.n	80005e4 <Obstacle_Avoidance+0xd4>
 800056a:	787b      	ldrb	r3, [r7, #1]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d139      	bne.n	80005e4 <Obstacle_Avoidance+0xd4>
			{
				Motor1_Stop();
 8000570:	f000 f858 	bl	8000624 <Motor1_Stop>
				Motor2_Stop();
 8000574:	f000 f86c 	bl	8000650 <Motor2_Stop>
		}
	}
	else{

	}
}
 8000578:	e034      	b.n	80005e4 <Obstacle_Avoidance+0xd4>
		else if(motor_flag==2)
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <Obstacle_Avoidance+0xdc>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d128      	bne.n	80005d4 <Obstacle_Avoidance+0xc4>
			u16 num=ultrasonics_arr_Getter(Sensor4_ind);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 fc88 	bl	8000e98 <ultrasonics_arr_Getter>
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
			u8 flagnum=ultrasonics_Flagarr_Getter(Sensor4_ind);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 fc93 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000592:	4603      	mov	r3, r0
 8000594:	717b      	strb	r3, [r7, #5]
			if(onetimeflagB)
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <Obstacle_Avoidance+0xf0>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d004      	beq.n	80005a8 <Obstacle_Avoidance+0x98>
				onetimeflagB=0;
 800059e:	4b18      	ldr	r3, [pc, #96]	; (8000600 <Obstacle_Avoidance+0xf0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
				Ultrasonic_RightSidePark();
 80005a4:	f000 fe0c 	bl	80011c0 <Ultrasonic_RightSidePark>
			if((num<=Distance_Arr[(Speed/10)]) && (flagnum==1))
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <Obstacle_Avoidance+0xe4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <Obstacle_Avoidance+0xe8>)
 80005ae:	fba2 2303 	umull	r2, r3, r2, r3
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <Obstacle_Avoidance+0xec>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	88fa      	ldrh	r2, [r7, #6]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d80f      	bhi.n	80005e4 <Obstacle_Avoidance+0xd4>
 80005c4:	797b      	ldrb	r3, [r7, #5]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d10c      	bne.n	80005e4 <Obstacle_Avoidance+0xd4>
				Motor1_Stop();
 80005ca:	f000 f82b 	bl	8000624 <Motor1_Stop>
				Motor2_Stop();
 80005ce:	f000 f83f 	bl	8000650 <Motor2_Stop>
}
 80005d2:	e007      	b.n	80005e4 <Obstacle_Avoidance+0xd4>
			stop_reading();
 80005d4:	f000 fe18 	bl	8001208 <stop_reading>
			onetimeflagF=1;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <Obstacle_Avoidance+0xe0>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
			onetimeflagB=1;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <Obstacle_Avoidance+0xf0>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000090 	.word	0x20000090
 80005f0:	20000001 	.word	0x20000001
 80005f4:	20000000 	.word	0x20000000
 80005f8:	cccccccd 	.word	0xcccccccd
 80005fc:	20000004 	.word	0x20000004
 8000600:	20000002 	.word	0x20000002

08000604 <Motor_Init_Timer>:

// External timer sending the PWM signal
extern TIM_HandleTypeDef htim4;

// Starting the timer and the PWM signal but stopping the back motor
void Motor_Init_Timer(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&Motor1_Timer);
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <Motor_Init_Timer+0x1c>)
 800060a:	f002 fe9b 	bl	8003344 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&Motor1_Timer, TIM_CHANNEL_3);
 800060e:	2108      	movs	r1, #8
 8000610:	4803      	ldr	r0, [pc, #12]	; (8000620 <Motor_Init_Timer+0x1c>)
 8000612:	f002 ff8b 	bl	800352c <HAL_TIM_PWM_Start>
	Motor1_Stop();
 8000616:	f000 f805 	bl	8000624 <Motor1_Stop>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000038c 	.word	0x2000038c

08000624 <Motor1_Stop>:

// Stopping the back motor by nearly closing the PWM signal
// sending HIGH value to the two pins controlling the direction of the Dc-motor
void Motor1_Stop(void){
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin1, 1);
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <Motor1_Stop+0x24>)
 800062e:	f002 fa11 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin2, 1);
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <Motor1_Stop+0x24>)
 8000638:	f002 fa0c 	bl	8002a54 <HAL_GPIO_WritePin>
	TIM4->CCR3 = 0;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <Motor1_Stop+0x28>)
 800063e:	2200      	movs	r2, #0
 8000640:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010c00 	.word	0x40010c00
 800064c:	40000800 	.word	0x40000800

08000650 <Motor2_Stop>:

// Setting the front wheels facing forward by stopping the front DC-motor
// By sending LOW to Direction pins and the Enable pin
void Motor2_Stop(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_pin1_Port, Motor2_pin1, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <Motor2_Stop+0x2c>)
 800065c:	f002 f9fa 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_pin2_Port, Motor2_pin2, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <Motor2_Stop+0x30>)
 8000668:	f002 f9f4 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_EN_Port, Motor2_EN, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	4803      	ldr	r0, [pc, #12]	; (8000680 <Motor2_Stop+0x30>)
 8000672:	f002 f9ef 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40010800 	.word	0x40010800
 8000680:	40010c00 	.word	0x40010c00

08000684 <Motor_Forward>:

// Make the back motor move with a certain speed by changing the duty cycle of the PWM pulse
// Making the back motor move forward
void Motor_Forward(Speed_t speed){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin1, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	4809      	ldr	r0, [pc, #36]	; (80006b8 <Motor_Forward+0x34>)
 8000694:	f002 f9de 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin2, 0);
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	4806      	ldr	r0, [pc, #24]	; (80006b8 <Motor_Forward+0x34>)
 800069e:	f002 f9d9 	bl	8002a54 <HAL_GPIO_WritePin>
	TIM4->CCR3 = (speed * 200);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	22c8      	movs	r2, #200	; 0xc8
 80006a6:	fb03 f202 	mul.w	r2, r3, r2
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <Motor_Forward+0x38>)
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	40000800 	.word	0x40000800

080006c0 <Motor_Backward>:

// Make the back motor move with a certain speed by changing the duty cycle of the PWM pulse
// Making the back motor move backward
void Motor_Backward(Speed_t speed){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin1, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2110      	movs	r1, #16
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <Motor_Backward+0x34>)
 80006d0:	f002 f9c0 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor1_Port, Motor1_pin2, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <Motor_Backward+0x34>)
 80006da:	f002 f9bb 	bl	8002a54 <HAL_GPIO_WritePin>
	TIM4->CCR3 = (speed * 200);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	22c8      	movs	r2, #200	; 0xc8
 80006e2:	fb03 f202 	mul.w	r2, r3, r2
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <Motor_Backward+0x38>)
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	40000800 	.word	0x40000800

080006fc <Motor_Right>:

// change the steering of the front wheels by changing the direction of rotation of the front DC-motor to right
void Motor_Right(void){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_pin1_Port, Motor2_pin1, 1);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <Motor_Right+0x2c>)
 8000708:	f002 f9a4 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_pin2_Port, Motor2_pin2, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Motor_Right+0x30>)
 8000714:	f002 f99e 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_EN_Port, Motor2_EN, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4803      	ldr	r0, [pc, #12]	; (800072c <Motor_Right+0x30>)
 800071e:	f002 f999 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010800 	.word	0x40010800
 800072c:	40010c00 	.word	0x40010c00

08000730 <Motor_Left>:

// change the steering of the front wheels by changing the direction of rotation of the front DC-motor to left
void Motor_Left(void){
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor2_pin1_Port, Motor2_pin1, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <Motor_Left+0x2c>)
 800073c:	f002 f98a 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_pin2_Port, Motor2_pin2, 1);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <Motor_Left+0x30>)
 8000748:	f002 f984 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor2_EN_Port, Motor2_EN, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2140      	movs	r1, #64	; 0x40
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <Motor_Left+0x30>)
 8000752:	f002 f97f 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40010800 	.word	0x40010800
 8000760:	40010c00 	.word	0x40010c00

08000764 <FirstStep_Parking>:
static ParkMode_t ParkMode=INIT_STEP;
static u8 OneTimeFlag=1;

/* Moving forward for 1sec as an initial parking step then start the first parking step */
static void FirstStep_Parking(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	u32 time;
	time=Get_time();
 800076a:	f000 ffbb 	bl	80016e4 <Get_time>
 800076e:	6078      	str	r0, [r7, #4]
	if(time>=3500000){
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <FirstStep_Parking+0x2c>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d306      	bcc.n	8000786 <FirstStep_Parking+0x22>
		Motor1_Stop();
 8000778:	f7ff ff54 	bl	8000624 <Motor1_Stop>
		Disable_Timer();
 800077c:	f000 ffa6 	bl	80016cc <Disable_Timer>
		ParkMode=FIRST_PARK_MODE;
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <FirstStep_Parking+0x30>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
	}
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	003567e0 	.word	0x003567e0
 8000794:	20000091 	.word	0x20000091

08000798 <FirstStep_ParkingRight>:

/* Moving left forward for 1.6sec when parking on the right side then move to the second parking step */
static void FirstStep_ParkingRight(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <FirstStep_ParkingRight+0x50>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d009      	beq.n	80007ba <FirstStep_ParkingRight+0x22>
	{
		Motor_Forward(ForwardWD_speed);
 80007a6:	2028      	movs	r0, #40	; 0x28
 80007a8:	f7ff ff6c 	bl	8000684 <Motor_Forward>
		Motor_Left();
 80007ac:	f7ff ffc0 	bl	8000730 <Motor_Left>
		Enable_Timer();
 80007b0:	f000 ff7a 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <FirstStep_ParkingRight+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 80007ba:	f000 ff93 	bl	80016e4 <Get_time>
 80007be:	6078      	str	r0, [r7, #4]
	if(time>=1600000)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <FirstStep_ParkingRight+0x54>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d90b      	bls.n	80007e0 <FirstStep_ParkingRight+0x48>
	{
		Motor1_Stop();
 80007c8:	f7ff ff2c 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 80007cc:	f7ff ff40 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 80007d0:	f000 ff7c 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <FirstStep_ParkingRight+0x50>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
		ParkMode=SECOND_PARK_MODE;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <FirstStep_ParkingRight+0x58>)
 80007dc:	2202      	movs	r2, #2
 80007de:	701a      	strb	r2, [r3, #0]
	}
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000000f 	.word	0x2000000f
 80007ec:	001869ff 	.word	0x001869ff
 80007f0:	20000091 	.word	0x20000091

080007f4 <FirstStep_ParkingLeft>:

/* Moving right forward for 1.6sec when parking on the left side then move to the second parking step */
static void FirstStep_ParkingLeft(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <FirstStep_ParkingLeft+0x50>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d009      	beq.n	8000816 <FirstStep_ParkingLeft+0x22>
	{
		Motor_Forward(ForwardWD_speed);
 8000802:	2028      	movs	r0, #40	; 0x28
 8000804:	f7ff ff3e 	bl	8000684 <Motor_Forward>
		Motor_Right();
 8000808:	f7ff ff78 	bl	80006fc <Motor_Right>
		Enable_Timer();
 800080c:	f000 ff4c 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <FirstStep_ParkingLeft+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 8000816:	f000 ff65 	bl	80016e4 <Get_time>
 800081a:	6078      	str	r0, [r7, #4]
	if(time>=1600000)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <FirstStep_ParkingLeft+0x54>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d90b      	bls.n	800083c <FirstStep_ParkingLeft+0x48>
	{
		Motor1_Stop();
 8000824:	f7ff fefe 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000828:	f7ff ff12 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 800082c:	f000 ff4e 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <FirstStep_ParkingLeft+0x50>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
		ParkMode=SECOND_PARK_MODE;
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <FirstStep_ParkingLeft+0x58>)
 8000838:	2202      	movs	r2, #2
 800083a:	701a      	strb	r2, [r3, #0]
	}
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000000f 	.word	0x2000000f
 8000848:	001869ff 	.word	0x001869ff
 800084c:	20000091 	.word	0x20000091

08000850 <SecondStep_ParkingRight>:

/* Moving right backward for 1.2sec when parking on the right side then move to the third parking step */
static void SecondStep_ParkingRight(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <SecondStep_ParkingRight+0x50>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d009      	beq.n	8000872 <SecondStep_ParkingRight+0x22>
	{
		Motor_Backward(BackwardWD_speed);
 800085e:	2028      	movs	r0, #40	; 0x28
 8000860:	f7ff ff2e 	bl	80006c0 <Motor_Backward>
		Motor_Right();
 8000864:	f7ff ff4a 	bl	80006fc <Motor_Right>
		Enable_Timer();
 8000868:	f000 ff1e 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <SecondStep_ParkingRight+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 8000872:	f000 ff37 	bl	80016e4 <Get_time>
 8000876:	6078      	str	r0, [r7, #4]
	if(time>=1200000)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SecondStep_ParkingRight+0x54>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d90b      	bls.n	8000898 <SecondStep_ParkingRight+0x48>
	{
		Motor1_Stop();
 8000880:	f7ff fed0 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000884:	f7ff fee4 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 8000888:	f000 ff20 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SecondStep_ParkingRight+0x50>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
		ParkMode=THIRD_PARK_MODE;
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SecondStep_ParkingRight+0x58>)
 8000894:	2203      	movs	r2, #3
 8000896:	701a      	strb	r2, [r3, #0]
	}
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000000f 	.word	0x2000000f
 80008a4:	00124f7f 	.word	0x00124f7f
 80008a8:	20000091 	.word	0x20000091

080008ac <SecondStep_ParkingLeft>:

/* Moving left backward for 1.2sec when parking on the left side then move to the third parking step */
static void SecondStep_ParkingLeft(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <SecondStep_ParkingLeft+0x50>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <SecondStep_ParkingLeft+0x22>
	{
		Motor_Backward(BackwardWD_speed);
 80008ba:	2028      	movs	r0, #40	; 0x28
 80008bc:	f7ff ff00 	bl	80006c0 <Motor_Backward>
		Motor_Left();
 80008c0:	f7ff ff36 	bl	8000730 <Motor_Left>
		Enable_Timer();
 80008c4:	f000 fef0 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <SecondStep_ParkingLeft+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 80008ce:	f000 ff09 	bl	80016e4 <Get_time>
 80008d2:	6078      	str	r0, [r7, #4]
	if(time>=1200000)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <SecondStep_ParkingLeft+0x54>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d90b      	bls.n	80008f4 <SecondStep_ParkingLeft+0x48>
	{
		Motor1_Stop();
 80008dc:	f7ff fea2 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 80008e0:	f7ff feb6 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 80008e4:	f000 fef2 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SecondStep_ParkingLeft+0x50>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
		ParkMode=THIRD_PARK_MODE;
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <SecondStep_ParkingLeft+0x58>)
 80008f0:	2203      	movs	r2, #3
 80008f2:	701a      	strb	r2, [r3, #0]
	}
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000000f 	.word	0x2000000f
 8000900:	00124f7f 	.word	0x00124f7f
 8000904:	20000091 	.word	0x20000091

08000908 <ThirdStep_ParkingRight>:

/* Moving backward and activate back and right back sensor and get sensor reading
 * until the back sensor measures less than or equal 40cm ----> then move to the fourth parking step */
static void ThirdStep_ParkingRight(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	u16 num=ultrasonics_arr_Getter(Sensor4_ind);
 800090e:	2003      	movs	r0, #3
 8000910:	f000 fac2 	bl	8000e98 <ultrasonics_arr_Getter>
 8000914:	4603      	mov	r3, r0
 8000916:	80fb      	strh	r3, [r7, #6]
	u8 flagnum=ultrasonics_Flagarr_Getter(Sensor4_ind);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 facd 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 800091e:	4603      	mov	r3, r0
 8000920:	717b      	strb	r3, [r7, #5]
	if(OneTimeFlag)
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <ThirdStep_ParkingRight+0x78>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d020      	beq.n	800096c <ThirdStep_ParkingRight+0x64>
	{
		Motor_Backward(Backward_speed);
 800092a:	200a      	movs	r0, #10
 800092c:	f7ff fec8 	bl	80006c0 <Motor_Backward>
		Ultrasonic_RightSidePark();
 8000930:	f000 fc46 	bl	80011c0 <Ultrasonic_RightSidePark>
		OneTimeFlag=0;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <ThirdStep_ParkingRight+0x78>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
	}
	while(ParkMode!=FOURTH_PARK_MODE){
 800093a:	e017      	b.n	800096c <ThirdStep_ParkingRight+0x64>
		num=ultrasonics_arr_Getter(Sensor4_ind);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 faab 	bl	8000e98 <ultrasonics_arr_Getter>
 8000942:	4603      	mov	r3, r0
 8000944:	80fb      	strh	r3, [r7, #6]
		flagnum=ultrasonics_Flagarr_Getter(Sensor4_ind);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 fab6 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 800094c:	4603      	mov	r3, r0
 800094e:	717b      	strb	r3, [r7, #5]
		if(num<=40 && flagnum==1)
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	2b28      	cmp	r3, #40	; 0x28
 8000954:	d80a      	bhi.n	800096c <ThirdStep_ParkingRight+0x64>
 8000956:	797b      	ldrb	r3, [r7, #5]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d107      	bne.n	800096c <ThirdStep_ParkingRight+0x64>
		{
			Motor1_Stop();
 800095c:	f7ff fe62 	bl	8000624 <Motor1_Stop>
			OneTimeFlag=1;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <ThirdStep_ParkingRight+0x78>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
			ParkMode=FOURTH_PARK_MODE;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <ThirdStep_ParkingRight+0x7c>)
 8000968:	2204      	movs	r2, #4
 800096a:	701a      	strb	r2, [r3, #0]
	while(ParkMode!=FOURTH_PARK_MODE){
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <ThirdStep_ParkingRight+0x7c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b04      	cmp	r3, #4
 8000972:	d1e3      	bne.n	800093c <ThirdStep_ParkingRight+0x34>
		}
	}
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000000f 	.word	0x2000000f
 8000984:	20000091 	.word	0x20000091

08000988 <ThirdStep_ParkingLeft>:

/* Moving backward and activate back and left back sensor and get sensor reading
 * until the back sensor measures less than or equal 40cm ----> then move to the fourth parking step */
static void ThirdStep_ParkingLeft(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
	u16 num=ultrasonics_arr_Getter(Sensor4_ind);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 fa82 	bl	8000e98 <ultrasonics_arr_Getter>
 8000994:	4603      	mov	r3, r0
 8000996:	80fb      	strh	r3, [r7, #6]
	u8 flagnum=ultrasonics_Flagarr_Getter(Sensor4_ind);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 fa8d 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 800099e:	4603      	mov	r3, r0
 80009a0:	717b      	strb	r3, [r7, #5]
	if(OneTimeFlag)
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <ThirdStep_ParkingLeft+0x78>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d020      	beq.n	80009ec <ThirdStep_ParkingLeft+0x64>
	{
		Motor_Backward(Backward_speed);
 80009aa:	200a      	movs	r0, #10
 80009ac:	f7ff fe88 	bl	80006c0 <Motor_Backward>
		Ultrasonic_LeftSidePark();
 80009b0:	f000 fc1e 	bl	80011f0 <Ultrasonic_LeftSidePark>
		OneTimeFlag=0;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <ThirdStep_ParkingLeft+0x78>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
	}
	while(ParkMode!=FOURTH_PARK_MODE){
 80009ba:	e017      	b.n	80009ec <ThirdStep_ParkingLeft+0x64>
		num=ultrasonics_arr_Getter(Sensor4_ind);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 fa6b 	bl	8000e98 <ultrasonics_arr_Getter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
		flagnum=ultrasonics_Flagarr_Getter(Sensor4_ind);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 fa76 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 80009cc:	4603      	mov	r3, r0
 80009ce:	717b      	strb	r3, [r7, #5]
		if(num<=30 && flagnum==1)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	2b1e      	cmp	r3, #30
 80009d4:	d80a      	bhi.n	80009ec <ThirdStep_ParkingLeft+0x64>
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d107      	bne.n	80009ec <ThirdStep_ParkingLeft+0x64>
		{
			Motor1_Stop();
 80009dc:	f7ff fe22 	bl	8000624 <Motor1_Stop>
			OneTimeFlag=1;
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <ThirdStep_ParkingLeft+0x78>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
			ParkMode=FOURTH_PARK_MODE;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <ThirdStep_ParkingLeft+0x7c>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	701a      	strb	r2, [r3, #0]
	while(ParkMode!=FOURTH_PARK_MODE){
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <ThirdStep_ParkingLeft+0x7c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	d1e3      	bne.n	80009bc <ThirdStep_ParkingLeft+0x34>
		}
	}
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000000f 	.word	0x2000000f
 8000a04:	20000091 	.word	0x20000091

08000a08 <FourthStep_ParkingRight>:

/* Moving left backward and activate back and right back sensor and get sensor reading
 * until the back sensor measures (less than or equal 10cm)
 *  OR the right back sensor measures (less than or equal 3cm) ----> then move to the fifth parking step */
static void FourthStep_ParkingRight(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
	u16 num=ultrasonics_arr_Getter(Sensor3_ind);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f000 fa42 	bl	8000e98 <ultrasonics_arr_Getter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	80fb      	strh	r3, [r7, #6]
	u16 num1=ultrasonics_arr_Getter(Sensor4_ind);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 fa3d 	bl	8000e98 <ultrasonics_arr_Getter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80bb      	strh	r3, [r7, #4]
	u8 flagnum=ultrasonics_Flagarr_Getter(Sensor3_ind);
 8000a22:	2002      	movs	r0, #2
 8000a24:	f000 fa48 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	70fb      	strb	r3, [r7, #3]
	u8 flagnum1=ultrasonics_Flagarr_Getter(Sensor4_ind);
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	f000 fa43 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	70bb      	strb	r3, [r7, #2]
	if(OneTimeFlag)
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <FourthStep_ParkingRight+0x80>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d009      	beq.n	8000a52 <FourthStep_ParkingRight+0x4a>
	{
		Ultrasonic_RightSidePark();
 8000a3e:	f000 fbbf 	bl	80011c0 <Ultrasonic_RightSidePark>
		Motor_Backward(BackwardWD_speed);
 8000a42:	2028      	movs	r0, #40	; 0x28
 8000a44:	f7ff fe3c 	bl	80006c0 <Motor_Backward>
		Motor_Left();
 8000a48:	f7ff fe72 	bl	8000730 <Motor_Left>
		OneTimeFlag=0;
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <FourthStep_ParkingRight+0x80>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
	}
	if((num1<=10 && flagnum1==1) || (num<=3 && flagnum==1))
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	2b0a      	cmp	r3, #10
 8000a56:	d802      	bhi.n	8000a5e <FourthStep_ParkingRight+0x56>
 8000a58:	78bb      	ldrb	r3, [r7, #2]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d005      	beq.n	8000a6a <FourthStep_ParkingRight+0x62>
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d80c      	bhi.n	8000a7e <FourthStep_ParkingRight+0x76>
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d109      	bne.n	8000a7e <FourthStep_ParkingRight+0x76>
	{
		Motor1_Stop();
 8000a6a:	f7ff fddb 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000a6e:	f7ff fdef 	bl	8000650 <Motor2_Stop>
		OneTimeFlag=1;
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <FourthStep_ParkingRight+0x80>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		ParkMode=FIFTH_PARK_MODE;
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <FourthStep_ParkingRight+0x84>)
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000000f 	.word	0x2000000f
 8000a8c:	20000091 	.word	0x20000091

08000a90 <FourthStep_ParkingLeft>:

/* Moving right backward and activate back and left back sensor and get sensor reading
 * until the back sensor measures (less than or equal 10cm)
 *  OR the left back sensor measures (less than or equal 3cm) ----> then move to the fifth parking step */
static void FourthStep_ParkingLeft(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
	u16 num=ultrasonics_arr_Getter(Sensor5_ind);
 8000a96:	2004      	movs	r0, #4
 8000a98:	f000 f9fe 	bl	8000e98 <ultrasonics_arr_Getter>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	80fb      	strh	r3, [r7, #6]
	u16 num1=ultrasonics_arr_Getter(Sensor4_ind);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f9f9 	bl	8000e98 <ultrasonics_arr_Getter>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80bb      	strh	r3, [r7, #4]
	u8 flagnum=ultrasonics_Flagarr_Getter(Sensor5_ind);
 8000aaa:	2004      	movs	r0, #4
 8000aac:	f000 fa04 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	70fb      	strb	r3, [r7, #3]
	u8 flagnum1=ultrasonics_Flagarr_Getter(Sensor4_ind);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f000 f9ff 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000aba:	4603      	mov	r3, r0
 8000abc:	70bb      	strb	r3, [r7, #2]
	if(OneTimeFlag)
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <FourthStep_ParkingLeft+0x80>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d009      	beq.n	8000ada <FourthStep_ParkingLeft+0x4a>
	{
		Ultrasonic_LeftSidePark();
 8000ac6:	f000 fb93 	bl	80011f0 <Ultrasonic_LeftSidePark>
		Motor_Backward(BackwardWD_speed);
 8000aca:	2028      	movs	r0, #40	; 0x28
 8000acc:	f7ff fdf8 	bl	80006c0 <Motor_Backward>
		Motor_Right();
 8000ad0:	f7ff fe14 	bl	80006fc <Motor_Right>
		OneTimeFlag=0;
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <FourthStep_ParkingLeft+0x80>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
	}
	if((num1<=10 && flagnum1==1) || (num<3 && flagnum==1))
 8000ada:	88bb      	ldrh	r3, [r7, #4]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d802      	bhi.n	8000ae6 <FourthStep_ParkingLeft+0x56>
 8000ae0:	78bb      	ldrb	r3, [r7, #2]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d005      	beq.n	8000af2 <FourthStep_ParkingLeft+0x62>
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d80c      	bhi.n	8000b06 <FourthStep_ParkingLeft+0x76>
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d109      	bne.n	8000b06 <FourthStep_ParkingLeft+0x76>
	{
		Motor1_Stop();
 8000af2:	f7ff fd97 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000af6:	f7ff fdab 	bl	8000650 <Motor2_Stop>
		OneTimeFlag=1;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <FourthStep_ParkingLeft+0x80>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
		ParkMode=FIFTH_PARK_MODE;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <FourthStep_ParkingLeft+0x84>)
 8000b02:	2205      	movs	r2, #5
 8000b04:	701a      	strb	r2, [r3, #0]
	}
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000000f 	.word	0x2000000f
 8000b14:	20000091 	.word	0x20000091

08000b18 <FifthStep_ParkingRight>:

/* Moving forward for 1sec then turn the front wheel right for 0.3sec then stop the two motors and
 * move to sixth step */
static void FifthStep_ParkingRight(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <FifthStep_ParkingRight+0x64>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <FifthStep_ParkingRight+0x18>
	{
		Enable_Timer();
 8000b26:	f000 fdbf 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <FifthStep_ParkingRight+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 8000b30:	f000 fdd8 	bl	80016e4 <Get_time>
 8000b34:	6078      	str	r0, [r7, #4]
	if(time>=1300000)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <FifthStep_ParkingRight+0x68>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d30c      	bcc.n	8000b58 <FifthStep_ParkingRight+0x40>
	{
		Motor1_Stop();
 8000b3e:	f7ff fd71 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000b42:	f7ff fd85 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 8000b46:	f000 fdc1 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <FifthStep_ParkingRight+0x64>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
		ParkMode=SIXTH_PARK_MODE;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <FifthStep_ParkingRight+0x6c>)
 8000b52:	2206      	movs	r2, #6
 8000b54:	701a      	strb	r2, [r3, #0]
	else
	{
		Motor_Forward(Forward_speed);
	}

}
 8000b56:	e00c      	b.n	8000b72 <FifthStep_ParkingRight+0x5a>
	else if(time>=1000000)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <FifthStep_ParkingRight+0x70>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d905      	bls.n	8000b6c <FifthStep_ParkingRight+0x54>
		Motor_Forward(ForwardWD_fast_speed);
 8000b60:	2032      	movs	r0, #50	; 0x32
 8000b62:	f7ff fd8f 	bl	8000684 <Motor_Forward>
		Motor_Right();
 8000b66:	f7ff fdc9 	bl	80006fc <Motor_Right>
}
 8000b6a:	e002      	b.n	8000b72 <FifthStep_ParkingRight+0x5a>
		Motor_Forward(Forward_speed);
 8000b6c:	200a      	movs	r0, #10
 8000b6e:	f7ff fd89 	bl	8000684 <Motor_Forward>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000000f 	.word	0x2000000f
 8000b80:	0013d620 	.word	0x0013d620
 8000b84:	20000091 	.word	0x20000091
 8000b88:	000f423f 	.word	0x000f423f

08000b8c <FifthStep_ParkingLeft>:

/* Moving forward for 1sec then turn the front wheel left for 0.3sec then stop the two motors and
 * move to sixth step */
static void FifthStep_ParkingLeft(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	u32 time;
	if(OneTimeFlag)
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <FifthStep_ParkingLeft+0x64>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <FifthStep_ParkingLeft+0x18>
	{
		Enable_Timer();
 8000b9a:	f000 fd85 	bl	80016a8 <Enable_Timer>
		OneTimeFlag=0;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <FifthStep_ParkingLeft+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
	}
	time=Get_time();
 8000ba4:	f000 fd9e 	bl	80016e4 <Get_time>
 8000ba8:	6078      	str	r0, [r7, #4]
	if(time>=1300000)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <FifthStep_ParkingLeft+0x68>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d30c      	bcc.n	8000bcc <FifthStep_ParkingLeft+0x40>
	{
		Motor1_Stop();
 8000bb2:	f7ff fd37 	bl	8000624 <Motor1_Stop>
		Motor2_Stop();
 8000bb6:	f7ff fd4b 	bl	8000650 <Motor2_Stop>
		Disable_Timer();
 8000bba:	f000 fd87 	bl	80016cc <Disable_Timer>
		OneTimeFlag=1;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <FifthStep_ParkingLeft+0x64>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	701a      	strb	r2, [r3, #0]
		ParkMode=SIXTH_PARK_MODE;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <FifthStep_ParkingLeft+0x6c>)
 8000bc6:	2206      	movs	r2, #6
 8000bc8:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		Motor_Forward(Forward_speed);
	}
}
 8000bca:	e00c      	b.n	8000be6 <FifthStep_ParkingLeft+0x5a>
	else if(time>=1000000)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <FifthStep_ParkingLeft+0x70>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d905      	bls.n	8000be0 <FifthStep_ParkingLeft+0x54>
		Motor_Forward(ForwardWD_fast_speed);
 8000bd4:	2032      	movs	r0, #50	; 0x32
 8000bd6:	f7ff fd55 	bl	8000684 <Motor_Forward>
		Motor_Left();
 8000bda:	f7ff fda9 	bl	8000730 <Motor_Left>
}
 8000bde:	e002      	b.n	8000be6 <FifthStep_ParkingLeft+0x5a>
		Motor_Forward(Forward_speed);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f7ff fd4f 	bl	8000684 <Motor_Forward>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000000f 	.word	0x2000000f
 8000bf4:	0013d620 	.word	0x0013d620
 8000bf8:	20000091 	.word	0x20000091
 8000bfc:	000f423f 	.word	0x000f423f

08000c00 <Park_Runnable>:

/* a periodic function that executes the current step based on ParkMode variable */
void Park_Runnable(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
	Mode_t mode = mode_Getter();
 8000c06:	f000 f977 	bl	8000ef8 <mode_Getter>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	if(mode==PARK_RIGHT)
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d136      	bne.n	8000c82 <Park_Runnable+0x82>
	{
		if(ParkMode==INIT_STEP)
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <Park_Runnable+0xfc>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <Park_Runnable+0x22>
		{
			FirstStep_Parking();
 8000c1c:	f7ff fda2 	bl	8000764 <FirstStep_Parking>
			stop_reading();
			ParkMode = INIT_STEP;
			mode_Setter(IDLE);
		}
	}
}
 8000c20:	e068      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FIRST_PARK_MODE)
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <Park_Runnable+0xfc>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <Park_Runnable+0x30>
			FirstStep_ParkingRight();
 8000c2a:	f7ff fdb5 	bl	8000798 <FirstStep_ParkingRight>
}
 8000c2e:	e061      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==SECOND_PARK_MODE)
 8000c30:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <Park_Runnable+0xfc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d102      	bne.n	8000c3e <Park_Runnable+0x3e>
			SecondStep_ParkingRight();
 8000c38:	f7ff fe0a 	bl	8000850 <SecondStep_ParkingRight>
}
 8000c3c:	e05a      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==THIRD_PARK_MODE)
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <Park_Runnable+0xfc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d102      	bne.n	8000c4c <Park_Runnable+0x4c>
			ThirdStep_ParkingRight();
 8000c46:	f7ff fe5f 	bl	8000908 <ThirdStep_ParkingRight>
}
 8000c4a:	e053      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FOURTH_PARK_MODE)
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <Park_Runnable+0xfc>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d102      	bne.n	8000c5a <Park_Runnable+0x5a>
			FourthStep_ParkingRight();
 8000c54:	f7ff fed8 	bl	8000a08 <FourthStep_ParkingRight>
}
 8000c58:	e04c      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FIFTH_PARK_MODE)
 8000c5a:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <Park_Runnable+0xfc>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b05      	cmp	r3, #5
 8000c60:	d102      	bne.n	8000c68 <Park_Runnable+0x68>
			FifthStep_ParkingRight();
 8000c62:	f7ff ff59 	bl	8000b18 <FifthStep_ParkingRight>
}
 8000c66:	e045      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==SIXTH_PARK_MODE)
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <Park_Runnable+0xfc>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	d141      	bne.n	8000cf4 <Park_Runnable+0xf4>
			stop_reading();
 8000c70:	f000 faca 	bl	8001208 <stop_reading>
			ParkMode = INIT_STEP;
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <Park_Runnable+0xfc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
			mode_Setter(IDLE);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f92c 	bl	8000ed8 <mode_Setter>
}
 8000c80:	e038      	b.n	8000cf4 <Park_Runnable+0xf4>
	else if(mode==PARK_LEFT)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b04      	cmp	r3, #4
 8000c86:	d135      	bne.n	8000cf4 <Park_Runnable+0xf4>
		if(ParkMode==INIT_STEP)
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <Park_Runnable+0xfc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <Park_Runnable+0x96>
			FirstStep_Parking();
 8000c90:	f7ff fd68 	bl	8000764 <FirstStep_Parking>
}
 8000c94:	e02e      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FIRST_PARK_MODE)
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <Park_Runnable+0xfc>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d102      	bne.n	8000ca4 <Park_Runnable+0xa4>
			FirstStep_ParkingLeft();
 8000c9e:	f7ff fda9 	bl	80007f4 <FirstStep_ParkingLeft>
}
 8000ca2:	e027      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==SECOND_PARK_MODE)
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <Park_Runnable+0xfc>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d102      	bne.n	8000cb2 <Park_Runnable+0xb2>
			SecondStep_ParkingLeft();
 8000cac:	f7ff fdfe 	bl	80008ac <SecondStep_ParkingLeft>
}
 8000cb0:	e020      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==THIRD_PARK_MODE)
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <Park_Runnable+0xfc>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d102      	bne.n	8000cc0 <Park_Runnable+0xc0>
			ThirdStep_ParkingLeft();
 8000cba:	f7ff fe65 	bl	8000988 <ThirdStep_ParkingLeft>
}
 8000cbe:	e019      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FOURTH_PARK_MODE)
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <Park_Runnable+0xfc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d102      	bne.n	8000cce <Park_Runnable+0xce>
			FourthStep_ParkingLeft();
 8000cc8:	f7ff fee2 	bl	8000a90 <FourthStep_ParkingLeft>
}
 8000ccc:	e012      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==FIFTH_PARK_MODE)
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <Park_Runnable+0xfc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b05      	cmp	r3, #5
 8000cd4:	d102      	bne.n	8000cdc <Park_Runnable+0xdc>
			FifthStep_ParkingLeft();
 8000cd6:	f7ff ff59 	bl	8000b8c <FifthStep_ParkingLeft>
}
 8000cda:	e00b      	b.n	8000cf4 <Park_Runnable+0xf4>
		else if(ParkMode==SIXTH_PARK_MODE)
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <Park_Runnable+0xfc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d107      	bne.n	8000cf4 <Park_Runnable+0xf4>
			stop_reading();
 8000ce4:	f000 fa90 	bl	8001208 <stop_reading>
			ParkMode = INIT_STEP;
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <Park_Runnable+0xfc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
			mode_Setter(IDLE);
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f8f2 	bl	8000ed8 <mode_Setter>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000091 	.word	0x20000091

08000d00 <SearchRight_Runnable>:

static u8 flag=1;
static u8 EnableInterrupt_flag=1;

static void SearchRight_Runnable(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
	u32 time;
	u16 num;
	u8 flagnum;
	while(mode_Getter()!=PARK_RIGHT)
 8000d06:	e031      	b.n	8000d6c <SearchRight_Runnable+0x6c>
	{
		  /* Get Sensor2 Reading  (Right Front Sensor) */
		num=ultrasonics_arr_Getter(Sensor2_ind);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 f8c5 	bl	8000e98 <ultrasonics_arr_Getter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
		  /* Get Sensor2 Flag (I Check with this flag if Ultrasonic read the First reading OR Not) */
		flagnum=ultrasonics_Flagarr_Getter(Sensor2_ind);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 f8d0 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	717b      	strb	r3, [r7, #5]

		 /* if Sensor2 more than or equal 20cm and less than or equal 40cm for 2sec and
		    if he found a place to park change mode to Park mode to start Parking */
		if(num>=20 && num<=40 && flagnum==1){
 8000d1c:	88fb      	ldrh	r3, [r7, #6]
 8000d1e:	2b13      	cmp	r3, #19
 8000d20:	d91f      	bls.n	8000d62 <SearchRight_Runnable+0x62>
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	2b28      	cmp	r3, #40	; 0x28
 8000d26:	d81c      	bhi.n	8000d62 <SearchRight_Runnable+0x62>
 8000d28:	797b      	ldrb	r3, [r7, #5]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d119      	bne.n	8000d62 <SearchRight_Runnable+0x62>
			if(EnableInterrupt_flag){
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <SearchRight_Runnable+0x80>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <SearchRight_Runnable+0x40>
				Enable_Timer();
 8000d36:	f000 fcb7 	bl	80016a8 <Enable_Timer>
				EnableInterrupt_flag=0;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <SearchRight_Runnable+0x80>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
			}
			time=Get_time();
 8000d40:	f000 fcd0 	bl	80016e4 <Get_time>
 8000d44:	6038      	str	r0, [r7, #0]
			if(time>=2500000){
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <SearchRight_Runnable+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d30e      	bcc.n	8000d6c <SearchRight_Runnable+0x6c>
				EnableInterrupt_flag=1;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <SearchRight_Runnable+0x80>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
				flag=1;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <SearchRight_Runnable+0x88>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
				mode_Setter(PARK_RIGHT);
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f000 f8bc 	bl	8000ed8 <mode_Setter>
			if(time>=2500000){
 8000d60:	e004      	b.n	8000d6c <SearchRight_Runnable+0x6c>
			}
		}
		else{
			Disable_Timer();
 8000d62:	f000 fcb3 	bl	80016cc <Disable_Timer>
			EnableInterrupt_flag=1;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SearchRight_Runnable+0x80>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	701a      	strb	r2, [r3, #0]
	while(mode_Getter()!=PARK_RIGHT)
 8000d6c:	f000 f8c4 	bl	8000ef8 <mode_Getter>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d1c8      	bne.n	8000d08 <SearchRight_Runnable+0x8>
		}
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000011 	.word	0x20000011
 8000d84:	002625a0 	.word	0x002625a0
 8000d88:	20000010 	.word	0x20000010

08000d8c <SearchLeft_Runnable>:

static void SearchLeft_Runnable(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
	u32 time;
	u16 num;
	u8 flagnum;
	while(mode_Getter()!=PARK_RIGHT)
 8000d92:	e031      	b.n	8000df8 <SearchLeft_Runnable+0x6c>
	{
		    /* Get Sensor6 Reading  (Left Front Sensor) */
		num=ultrasonics_arr_Getter(Sensor6_ind);
 8000d94:	2005      	movs	r0, #5
 8000d96:	f000 f87f 	bl	8000e98 <ultrasonics_arr_Getter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
		    /* Get Sensor6 Flag (I Check with this flag if Ultrasonic read the First reading OR Not) */
		flagnum=ultrasonics_Flagarr_Getter(Sensor6_ind);
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f000 f88a 	bl	8000eb8 <ultrasonics_Flagarr_Getter>
 8000da4:	4603      	mov	r3, r0
 8000da6:	717b      	strb	r3, [r7, #5]
	    	/* if Sensor6 more than or equal 20cm and less than or equal 40cm for 2sec and
			   if he found a place to park change mode to Park mode to start Parking */
		if(num>=20 && num<=40 && flagnum==1){
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2b13      	cmp	r3, #19
 8000dac:	d91f      	bls.n	8000dee <SearchLeft_Runnable+0x62>
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	2b28      	cmp	r3, #40	; 0x28
 8000db2:	d81c      	bhi.n	8000dee <SearchLeft_Runnable+0x62>
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d119      	bne.n	8000dee <SearchLeft_Runnable+0x62>
			if(EnableInterrupt_flag){
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <SearchLeft_Runnable+0x80>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <SearchLeft_Runnable+0x40>
				Enable_Timer();
 8000dc2:	f000 fc71 	bl	80016a8 <Enable_Timer>
				EnableInterrupt_flag=0;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <SearchLeft_Runnable+0x80>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
			}
			time=Get_time();
 8000dcc:	f000 fc8a 	bl	80016e4 <Get_time>
 8000dd0:	6038      	str	r0, [r7, #0]
			if(time>=2500000){
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <SearchLeft_Runnable+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d30e      	bcc.n	8000df8 <SearchLeft_Runnable+0x6c>
				EnableInterrupt_flag=1;
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <SearchLeft_Runnable+0x80>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
				flag=1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <SearchLeft_Runnable+0x88>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
				mode_Setter(PARK_LEFT);
 8000de6:	2004      	movs	r0, #4
 8000de8:	f000 f876 	bl	8000ed8 <mode_Setter>
			if(time>=2500000){
 8000dec:	e004      	b.n	8000df8 <SearchLeft_Runnable+0x6c>
			}
		}
		else{
			Disable_Timer();
 8000dee:	f000 fc6d 	bl	80016cc <Disable_Timer>
			EnableInterrupt_flag=1;
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <SearchLeft_Runnable+0x80>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
	while(mode_Getter()!=PARK_RIGHT)
 8000df8:	f000 f87e 	bl	8000ef8 <mode_Getter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d1c8      	bne.n	8000d94 <SearchLeft_Runnable+0x8>
		}
	}
}
 8000e02:	bf00      	nop
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000011 	.word	0x20000011
 8000e10:	002625a0 	.word	0x002625a0
 8000e14:	20000010 	.word	0x20000010

08000e18 <Search_Runnable>:
{
	SharedVar_Init();
}

void Search_Runnable(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
	   /* Get the Mode to know I will park Right or Left */
	Mode_t mode=mode_Getter();
 8000e1e:	f000 f86b 	bl	8000ef8 <mode_Getter>
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	   /* if I'm searching right we need to activate the front and right front sensor
	      and keep moving forward and calling SearchRight_Runnable function until detecting a parking spot */
	if(mode==SEARCH_RIGHT)
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d110      	bne.n	8000e4e <Search_Runnable+0x36>
	{
		if(flag)
 8000e2c:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <Search_Runnable+0x64>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d009      	beq.n	8000e48 <Search_Runnable+0x30>
		{
			Motor2_Stop();
 8000e34:	f7ff fc0c 	bl	8000650 <Motor2_Stop>
			Motor_Forward(Search_speed);
 8000e38:	200a      	movs	r0, #10
 8000e3a:	f7ff fc23 	bl	8000684 <Motor_Forward>
			Ultrasonic_RightSideSearch();
 8000e3e:	f000 f9b3 	bl	80011a8 <Ultrasonic_RightSideSearch>
			flag=0;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <Search_Runnable+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
		}
		SearchRight_Runnable();
 8000e48:	f7ff ff5a 	bl	8000d00 <SearchRight_Runnable>
			Ultrasonic_LeftSideSearch();
			flag=0;
		}
		SearchLeft_Runnable();
	}
}
 8000e4c:	e012      	b.n	8000e74 <Search_Runnable+0x5c>
	else if(mode==SEARCH_LEFT)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d10f      	bne.n	8000e74 <Search_Runnable+0x5c>
		if(flag)
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <Search_Runnable+0x64>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d009      	beq.n	8000e70 <Search_Runnable+0x58>
			Motor2_Stop();
 8000e5c:	f7ff fbf8 	bl	8000650 <Motor2_Stop>
			Motor_Forward(Search_speed);
 8000e60:	200a      	movs	r0, #10
 8000e62:	f7ff fc0f 	bl	8000684 <Motor_Forward>
			Ultrasonic_LeftSideSearch();
 8000e66:	f000 f9b7 	bl	80011d8 <Ultrasonic_LeftSideSearch>
			flag=0;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <Search_Runnable+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
		SearchLeft_Runnable();
 8000e70:	f7ff ff8c 	bl	8000d8c <SearchLeft_Runnable>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000010 	.word	0x20000010

08000e80 <SharedVar_Init>:
static u8 ultrasonics_Flagarr[6] = {0};
static Mode_t mode=IDLE;
static OB_type Obstacle_flag=OBSTACLE_OFF;

void SharedVar_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	Ultra_sonic_INT(ultrasonics_arr,ultrasonics_Flagarr);
 8000e84:	4902      	ldr	r1, [pc, #8]	; (8000e90 <SharedVar_Init+0x10>)
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <SharedVar_Init+0x14>)
 8000e88:	f000 f8a0 	bl	8000fcc <Ultra_sonic_INT>
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200000a0 	.word	0x200000a0
 8000e94:	20000094 	.word	0x20000094

08000e98 <ultrasonics_arr_Getter>:
{
	ultrasonics_arr[Loc]=num;
}

u16 ultrasonics_arr_Getter(u8 Loc)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	return ultrasonics_arr[Loc];
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4a03      	ldr	r2, [pc, #12]	; (8000eb4 <ultrasonics_arr_Getter+0x1c>)
 8000ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	20000094 	.word	0x20000094

08000eb8 <ultrasonics_Flagarr_Getter>:
{
	ultrasonics_Flagarr[Loc]=num;
}

u8 ultrasonics_Flagarr_Getter(u8 Loc)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	return ultrasonics_Flagarr[Loc];
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <ultrasonics_Flagarr_Getter+0x1c>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200000a0 	.word	0x200000a0

08000ed8 <mode_Setter>:


void mode_Setter(Mode_t m)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	mode=m;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <mode_Setter+0x1c>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	7013      	strb	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200000a6 	.word	0x200000a6

08000ef8 <mode_Getter>:

Mode_t mode_Getter(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	return mode;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <mode_Getter+0x10>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200000a6 	.word	0x200000a6

08000f0c <Obstacle_mode_Setter>:

void Obstacle_mode_Setter(OB_type b)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	Obstacle_flag=b;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <Obstacle_mode_Setter+0x1c>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	7013      	strb	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200000a7 	.word	0x200000a7

08000f2c <Obstacle_mode_Getter>:

OB_type Obstacle_mode_Getter(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	return Obstacle_flag;
 8000f30:	4b02      	ldr	r3, [pc, #8]	; (8000f3c <Obstacle_mode_Getter+0x10>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	200000a7 	.word	0x200000a7

08000f40 <Init_Uart>:
static u8 perv_value = 0;
static uint8_t *ptr_rxData;
static uint8_t *ptr_Uart_flag;

// Function to initialize UART with pointers to UART flag and receive data
void Init_Uart(uint8_t *ptr_1, uint8_t *ptr_2) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	// Assign pointers
	ptr_Uart_flag = ptr_1;
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <Init_Uart+0x2c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
	ptr_rxData = ptr_2;
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <Init_Uart+0x30>)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	6013      	str	r3, [r2, #0]
	// Start UART receive interrupt
	HAL_UART_Receive_IT(&huart2, ptr_rxData, 1);
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <Init_Uart+0x30>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <Init_Uart+0x34>)
 8000f60:	f003 fcea 	bl	8004938 <HAL_UART_Receive_IT>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000b0 	.word	0x200000b0
 8000f70:	200000ac 	.word	0x200000ac
 8000f74:	200003d4 	.word	0x200003d4

08000f78 <Get_Bluetooth_Command>:

// Function to get Bluetooth command from UART
uint8_t Get_Bluetooth_Command() {
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	// Check if UART flag is set
	if (*ptr_Uart_flag) {
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <Get_Bluetooth_Command+0x48>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d017      	beq.n	8000fb6 <Get_Bluetooth_Command+0x3e>
		// Check if the received data is different from the previous value
		if (*ptr_rxData != perv_value) {
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <Get_Bluetooth_Command+0x4c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <Get_Bluetooth_Command+0x50>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d00c      	beq.n	8000fae <Get_Bluetooth_Command+0x36>
			// Update previous value and clear the UART flag
			perv_value = *ptr_rxData;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <Get_Bluetooth_Command+0x4c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <Get_Bluetooth_Command+0x50>)
 8000f9c:	701a      	strb	r2, [r3, #0]
			*ptr_Uart_flag = 0;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <Get_Bluetooth_Command+0x48>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
			// Return the received data
			return (*ptr_rxData);
 8000fa6:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <Get_Bluetooth_Command+0x4c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	e004      	b.n	8000fb8 <Get_Bluetooth_Command+0x40>
		}
		// Clear the UART flag if data is the same as the previous value
		*ptr_Uart_flag = 0;
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <Get_Bluetooth_Command+0x48>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
	}
	// Return 'N' if no new data is received
	return 'N';
 8000fb6:	234e      	movs	r3, #78	; 0x4e
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	200000b0 	.word	0x200000b0
 8000fc4:	200000ac 	.word	0x200000ac
 8000fc8:	200000a8 	.word	0x200000a8

08000fcc <Ultra_sonic_INT>:
static void Update_Sensor_Reading(TIM_HandleTypeDef *htim, Sensor_channel sen_channel, Sensor_ind Sen_ind);


// Initializing Sensors structures with the specific timers and channels for each sensor and
// Starting the Timers as an input capture in asynchronous mode
void Ultra_sonic_INT(u16 *Ultra_arr, uint8 *Reading_flags){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	Ultra_reading = Ultra_arr;
 8000fd6:	4a3f      	ldr	r2, [pc, #252]	; (80010d4 <Ultra_sonic_INT+0x108>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
	values2_flags = Reading_flags;
 8000fdc:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <Ultra_sonic_INT+0x10c>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6013      	str	r3, [r2, #0]

	Sensor1.Timer = Sensor1_timer;
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <Ultra_sonic_INT+0x110>)
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <Ultra_sonic_INT+0x114>)
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2348      	movs	r3, #72	; 0x48
 8000fec:	461a      	mov	r2, r3
 8000fee:	f007 fb01 	bl	80085f4 <memcpy>
	Sensor1.sen_channel = Sensor1_channel;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <Ultra_sonic_INT+0x110>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor1.sen_active_channel = Sensor1_act_channel;
 8000ff8:	4b38      	ldr	r3, [pc, #224]	; (80010dc <Ultra_sonic_INT+0x110>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	64da      	str	r2, [r3, #76]	; 0x4c

	Sensor2.Timer = Sensor2_timer;
 8000ffe:	4a39      	ldr	r2, [pc, #228]	; (80010e4 <Ultra_sonic_INT+0x118>)
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <Ultra_sonic_INT+0x11c>)
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	2348      	movs	r3, #72	; 0x48
 8001008:	461a      	mov	r2, r3
 800100a:	f007 faf3 	bl	80085f4 <memcpy>
	Sensor2.sen_channel = Sensor2_channel;
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <Ultra_sonic_INT+0x118>)
 8001010:	2200      	movs	r2, #0
 8001012:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor2.sen_active_channel = Sensor2_act_channel;
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <Ultra_sonic_INT+0x118>)
 8001016:	2201      	movs	r2, #1
 8001018:	64da      	str	r2, [r3, #76]	; 0x4c

	Sensor3.Timer = Sensor3_timer;
 800101a:	4a34      	ldr	r2, [pc, #208]	; (80010ec <Ultra_sonic_INT+0x120>)
 800101c:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <Ultra_sonic_INT+0x114>)
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	2348      	movs	r3, #72	; 0x48
 8001024:	461a      	mov	r2, r3
 8001026:	f007 fae5 	bl	80085f4 <memcpy>
	Sensor3.sen_channel = Sensor3_channel;
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <Ultra_sonic_INT+0x120>)
 800102c:	2204      	movs	r2, #4
 800102e:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor3.sen_active_channel = Sensor3_act_channel;
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <Ultra_sonic_INT+0x120>)
 8001032:	2202      	movs	r2, #2
 8001034:	64da      	str	r2, [r3, #76]	; 0x4c

	Sensor4.Timer = Sensor4_timer;
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <Ultra_sonic_INT+0x124>)
 8001038:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <Ultra_sonic_INT+0x114>)
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	2348      	movs	r3, #72	; 0x48
 8001040:	461a      	mov	r2, r3
 8001042:	f007 fad7 	bl	80085f4 <memcpy>
	Sensor4.sen_channel = Sensor4_channel;
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <Ultra_sonic_INT+0x124>)
 8001048:	2208      	movs	r2, #8
 800104a:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor4.sen_active_channel = Sensor4_act_channel;
 800104c:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <Ultra_sonic_INT+0x124>)
 800104e:	2204      	movs	r2, #4
 8001050:	64da      	str	r2, [r3, #76]	; 0x4c

	Sensor5.Timer = Sensor5_timer;
 8001052:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <Ultra_sonic_INT+0x128>)
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <Ultra_sonic_INT+0x114>)
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	2348      	movs	r3, #72	; 0x48
 800105c:	461a      	mov	r2, r3
 800105e:	f007 fac9 	bl	80085f4 <memcpy>
	Sensor5.sen_channel = Sensor5_channel;
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <Ultra_sonic_INT+0x128>)
 8001064:	220c      	movs	r2, #12
 8001066:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor5.sen_active_channel = Sensor5_act_channel;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <Ultra_sonic_INT+0x128>)
 800106a:	2208      	movs	r2, #8
 800106c:	64da      	str	r2, [r3, #76]	; 0x4c

	Sensor6.Timer = Sensor6_timer;
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <Ultra_sonic_INT+0x12c>)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <Ultra_sonic_INT+0x11c>)
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	2348      	movs	r3, #72	; 0x48
 8001078:	461a      	mov	r2, r3
 800107a:	f007 fabb 	bl	80085f4 <memcpy>
	Sensor6.sen_channel = Sensor6_channel;
 800107e:	4b1e      	ldr	r3, [pc, #120]	; (80010f8 <Ultra_sonic_INT+0x12c>)
 8001080:	2204      	movs	r2, #4
 8001082:	649a      	str	r2, [r3, #72]	; 0x48
	Sensor6.sen_active_channel = Sensor6_act_channel;
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <Ultra_sonic_INT+0x12c>)
 8001086:	2202      	movs	r2, #2
 8001088:	64da      	str	r2, [r3, #76]	; 0x4c

	HAL_TIM_Base_Start_IT(&htim1);
 800108a:	481c      	ldr	r0, [pc, #112]	; (80010fc <Ultra_sonic_INT+0x130>)
 800108c:	f002 f9a4 	bl	80033d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <Ultra_sonic_INT+0x114>)
 8001092:	f002 f9a1 	bl	80033d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <Ultra_sonic_INT+0x11c>)
 8001098:	f002 f99e 	bl	80033d8 <HAL_TIM_Base_Start_IT>

	HAL_TIM_IC_Start_IT(&Sensor1_timer, Sensor1_channel);
 800109c:	2100      	movs	r1, #0
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <Ultra_sonic_INT+0x114>)
 80010a0:	f002 fb3e 	bl	8003720 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&Sensor2_timer, Sensor2_channel);
 80010a4:	2100      	movs	r1, #0
 80010a6:	4810      	ldr	r0, [pc, #64]	; (80010e8 <Ultra_sonic_INT+0x11c>)
 80010a8:	f002 fb3a 	bl	8003720 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&Sensor3_timer, Sensor3_channel);
 80010ac:	2104      	movs	r1, #4
 80010ae:	480c      	ldr	r0, [pc, #48]	; (80010e0 <Ultra_sonic_INT+0x114>)
 80010b0:	f002 fb36 	bl	8003720 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&Sensor4_timer, Sensor4_channel);
 80010b4:	2108      	movs	r1, #8
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <Ultra_sonic_INT+0x114>)
 80010b8:	f002 fb32 	bl	8003720 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&Sensor5_timer, Sensor5_channel);
 80010bc:	210c      	movs	r1, #12
 80010be:	4808      	ldr	r0, [pc, #32]	; (80010e0 <Ultra_sonic_INT+0x114>)
 80010c0:	f002 fb2e 	bl	8003720 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&Sensor6_timer, Sensor6_channel);
 80010c4:	2104      	movs	r1, #4
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <Ultra_sonic_INT+0x11c>)
 80010c8:	f002 fb2a 	bl	8003720 <HAL_TIM_IC_Start_IT>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000294 	.word	0x20000294
 80010d8:	200002a4 	.word	0x200002a4
 80010dc:	200000b4 	.word	0x200000b4
 80010e0:	200002fc 	.word	0x200002fc
 80010e4:	20000104 	.word	0x20000104
 80010e8:	20000344 	.word	0x20000344
 80010ec:	20000154 	.word	0x20000154
 80010f0:	200001a4 	.word	0x200001a4
 80010f4:	200001f4 	.word	0x200001f4
 80010f8:	20000244 	.word	0x20000244
 80010fc:	200002b4 	.word	0x200002b4

08001100 <Trigger_pin>:


// triggering 2 given Ultra-Sonics
static void Trigger_pin(GPIO_TypeDef * port1, uint16_t pin1, GPIO_TypeDef * port2, uint16_t pin2){
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	461a      	mov	r2, r3
 800110c:	460b      	mov	r3, r1
 800110e:	817b      	strh	r3, [r7, #10]
 8001110:	4613      	mov	r3, r2
 8001112:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(port1, pin1, 1);
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f001 fc9a 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port2, pin2, 1);
 8001120:	893b      	ldrh	r3, [r7, #8]
 8001122:	2201      	movs	r2, #1
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f001 fc94 	bl	8002a54 <HAL_GPIO_WritePin>
	while (__HAL_TIM_GET_COUNTER (&htim1) < 11);
 800112c:	bf00      	nop
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <Trigger_pin+0x58>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d9fa      	bls.n	800112e <Trigger_pin+0x2e>
	HAL_GPIO_WritePin(port1, pin1, 0);
 8001138:	897b      	ldrh	r3, [r7, #10]
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f001 fc88 	bl	8002a54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(port2, pin2, 0);
 8001144:	893b      	ldrh	r3, [r7, #8]
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f001 fc82 	bl	8002a54 <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002b4 	.word	0x200002b4

0800115c <set_flag_arr>:


// Setting sensors flags to 0 indicating that the "mode" variable changed and the first distance measurment
// done by the active sensors haven't been received yet.
static void set_flag_arr(){
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
	values2_flags[0] = values2_flags[1] = values2_flags[2] = values2_flags[3] = values2_flags[4] = values2_flags[5] = 0;
 8001160:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <set_flag_arr+0x48>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3305      	adds	r3, #5
 8001166:	2200      	movs	r2, #0
 8001168:	4611      	mov	r1, r2
 800116a:	7019      	strb	r1, [r3, #0]
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <set_flag_arr+0x48>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3304      	adds	r3, #4
 8001172:	4611      	mov	r1, r2
 8001174:	7019      	strb	r1, [r3, #0]
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <set_flag_arr+0x48>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3303      	adds	r3, #3
 800117c:	4611      	mov	r1, r2
 800117e:	7019      	strb	r1, [r3, #0]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <set_flag_arr+0x48>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3302      	adds	r3, #2
 8001186:	4611      	mov	r1, r2
 8001188:	7019      	strb	r1, [r3, #0]
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <set_flag_arr+0x48>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4611      	mov	r1, r2
 8001192:	7019      	strb	r1, [r3, #0]
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <set_flag_arr+0x48>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	701a      	strb	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200002a4 	.word	0x200002a4

080011a8 <Ultrasonic_RightSideSearch>:

// activating the front and front right sensors "sensor1 and sensor2" and disabling the rest of the sensors
void Ultrasonic_RightSideSearch(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	mode = 1;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <Ultrasonic_RightSideSearch+0x14>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	set_flag_arr();
 80011b2:	f7ff ffd3 	bl	800115c <set_flag_arr>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002ae 	.word	0x200002ae

080011c0 <Ultrasonic_RightSidePark>:

// activating the back and back right sensors "sensor3 and sensor4" and disabling the rest of the sensors
void Ultrasonic_RightSidePark(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	mode = 2;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <Ultrasonic_RightSidePark+0x14>)
 80011c6:	2202      	movs	r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
	set_flag_arr();
 80011ca:	f7ff ffc7 	bl	800115c <set_flag_arr>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200002ae 	.word	0x200002ae

080011d8 <Ultrasonic_LeftSideSearch>:

// activating the front and the front left sensors "sensor1 and sensor6" and disabling the rest of the sensors
void Ultrasonic_LeftSideSearch(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	mode = 3;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <Ultrasonic_LeftSideSearch+0x14>)
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]
	set_flag_arr();
 80011e2:	f7ff ffbb 	bl	800115c <set_flag_arr>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200002ae 	.word	0x200002ae

080011f0 <Ultrasonic_LeftSidePark>:

// activating the back and the back left sensors "sensor4 and sensor5" and disabling the rest of the sensors
void Ultrasonic_LeftSidePark(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	mode = 4;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <Ultrasonic_LeftSidePark+0x14>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	701a      	strb	r2, [r3, #0]
	set_flag_arr();
 80011fa:	f7ff ffaf 	bl	800115c <set_flag_arr>
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200002ae 	.word	0x200002ae

08001208 <stop_reading>:

// deactivating reading from all Ultra-Sonic
void stop_reading(){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	set_flag_arr();
 800120c:	f7ff ffa6 	bl	800115c <set_flag_arr>
	mode = 0;
 8001210:	4b02      	ldr	r3, [pc, #8]	; (800121c <stop_reading+0x14>)
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002ae 	.word	0x200002ae

08001220 <HAL_TIM_PeriodElapsedCallback>:

// this overflow ISR CallBack is used to trigger the active sensors every 60ms based on the mode variable
// values1_flag is set to 0 to handle most noise cases
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d16b      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0xea>
		current_time++;
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a37      	ldr	r2, [pc, #220]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800123a:	6013      	str	r3, [r2, #0]
		if(mode == 1){
 800123c:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d115      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x50>
			values1_flags[Sensor1_ind] = values1_flags[Sensor2_ind] = 0;
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001246:	2200      	movs	r2, #0
 8001248:	705a      	strb	r2, [r3, #1]
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800124c:	785a      	ldrb	r2, [r3, #1]
 800124e:	4b34      	ldr	r3, [pc, #208]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001250:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
			Trigger_pin(Sensor1_Trig_Port, Sensor1_trig_Pin, Sensor2_Trig_Port, Sensor2_trig_Pin);
 800125a:	2320      	movs	r3, #32
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800125e:	2102      	movs	r1, #2
 8001260:	4831      	ldr	r0, [pc, #196]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001262:	f7ff ff4d 	bl	8001100 <Trigger_pin>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001266:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim1, 0);
			Trigger_pin(Sensor5_Trig_Port, Sensor5_trig_Pin, Sensor4_Trig_Port, Sensor4_trig_Pin);
			__HAL_TIM_SET_COUNTER(&htim1, 0);
		}
	}
}
 800126e:	e04c      	b.n	800130a <HAL_TIM_PeriodElapsedCallback+0xea>
		else if(mode == 2){
 8001270:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d115      	bne.n	80012a4 <HAL_TIM_PeriodElapsedCallback+0x84>
			values1_flags[Sensor3_ind] = values1_flags[Sensor4_ind] = 0;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800127a:	2200      	movs	r2, #0
 800127c:	70da      	strb	r2, [r3, #3]
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001280:	78da      	ldrb	r2, [r3, #3]
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001284:	709a      	strb	r2, [r3, #2]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
			Trigger_pin(Sensor3_Trig_Port, Sensor3_trig_Pin, Sensor4_Trig_Port, Sensor4_trig_Pin);
 800128e:	2310      	movs	r3, #16
 8001290:	4a26      	ldr	r2, [pc, #152]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001292:	2120      	movs	r1, #32
 8001294:	4825      	ldr	r0, [pc, #148]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001296:	f7ff ff33 	bl	8001100 <Trigger_pin>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012a2:	e032      	b.n	800130a <HAL_TIM_PeriodElapsedCallback+0xea>
		else if(mode == 3){
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d115      	bne.n	80012d8 <HAL_TIM_PeriodElapsedCallback+0xb8>
			values1_flags[Sensor1_ind] = values1_flags[Sensor6_ind] = 0;
 80012ac:	4b1c      	ldr	r3, [pc, #112]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	715a      	strb	r2, [r3, #5]
 80012b2:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012b4:	795a      	ldrb	r2, [r3, #5]
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012b8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24
			Trigger_pin(Sensor1_Trig_Port, Sensor1_trig_Pin, Sensor6_Trig_Port, Sensor6_trig_Pin);
 80012c2:	2302      	movs	r3, #2
 80012c4:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80012c6:	2102      	movs	r1, #2
 80012c8:	4817      	ldr	r0, [pc, #92]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80012ca:	f7ff ff19 	bl	8001100 <Trigger_pin>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012d6:	e018      	b.n	800130a <HAL_TIM_PeriodElapsedCallback+0xea>
		else if(mode == 4){
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d114      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0xea>
			values1_flags[Sensor4_ind] = values1_flags[Sensor5_ind] = 0;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	711a      	strb	r2, [r3, #4]
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012e8:	791a      	ldrb	r2, [r3, #4]
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80012ec:	70da      	strb	r2, [r3, #3]
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
			Trigger_pin(Sensor5_Trig_Port, Sensor5_trig_Pin, Sensor4_Trig_Port, Sensor4_trig_Pin);
 80012f6:	2310      	movs	r3, #16
 80012f8:	4a0c      	ldr	r2, [pc, #48]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80012fe:	f7ff feff 	bl	8001100 <Trigger_pin>
			__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00
 8001318:	200002b0 	.word	0x200002b0
 800131c:	200002ae 	.word	0x200002ae
 8001320:	200002a8 	.word	0x200002a8
 8001324:	200002b4 	.word	0x200002b4
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40010800 	.word	0x40010800

08001330 <HAL_TIM_IC_CaptureCallback>:

// This Input Capture CallBack is used to identify the timer and channel on which this input capture happened
// to identify which sensor is sending this Echo.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if(htim->Instance == Sensor1.Timer.Instance && htim->Channel == Sensor1.sen_active_channel){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x118>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d10f      	bne.n	8001364 <HAL_TIM_IC_CaptureCallback+0x34>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7f1b      	ldrb	r3, [r3, #28]
 8001348:	461a      	mov	r2, r3
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x118>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	429a      	cmp	r2, r3
 8001350:	d108      	bne.n	8001364 <HAL_TIM_IC_CaptureCallback+0x34>
		Update_Sensor_Reading(&Sensor1.Timer, Sensor1.sen_channel, Sensor1_ind);
 8001352:	4b3d      	ldr	r3, [pc, #244]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	483a      	ldr	r0, [pc, #232]	; (8001448 <HAL_TIM_IC_CaptureCallback+0x118>)
 800135e:	f000 f8ab 	bl	80014b8 <Update_Sensor_Reading>
 8001362:	e06d      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
	}
	else if(htim->Instance == Sensor2.Timer.Instance && htim->Channel == Sensor2.sen_active_channel){
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d10f      	bne.n	8001390 <HAL_TIM_IC_CaptureCallback+0x60>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7f1b      	ldrb	r3, [r3, #28]
 8001374:	461a      	mov	r2, r3
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	429a      	cmp	r2, r3
 800137c:	d108      	bne.n	8001390 <HAL_TIM_IC_CaptureCallback+0x60>
		Update_Sensor_Reading(&Sensor2.Timer, Sensor2.sen_channel, Sensor2_ind);
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2201      	movs	r2, #1
 8001386:	4619      	mov	r1, r3
 8001388:	4830      	ldr	r0, [pc, #192]	; (800144c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800138a:	f000 f895 	bl	80014b8 <Update_Sensor_Reading>
 800138e:	e057      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
	}
	else if (htim->Instance == Sensor3.Timer.Instance && htim->Channel == Sensor3.sen_active_channel)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b2e      	ldr	r3, [pc, #184]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d10f      	bne.n	80013bc <HAL_TIM_IC_CaptureCallback+0x8c>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7f1b      	ldrb	r3, [r3, #28]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b2b      	ldr	r3, [pc, #172]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d108      	bne.n	80013bc <HAL_TIM_IC_CaptureCallback+0x8c>
	{
		Update_Sensor_Reading(&Sensor3.Timer, Sensor3.sen_channel, Sensor3_ind);
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2202      	movs	r2, #2
 80013b2:	4619      	mov	r1, r3
 80013b4:	4826      	ldr	r0, [pc, #152]	; (8001450 <HAL_TIM_IC_CaptureCallback+0x120>)
 80013b6:	f000 f87f 	bl	80014b8 <Update_Sensor_Reading>
 80013ba:	e041      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
	}
	else if(htim->Instance == Sensor4.Timer.Instance && htim->Channel == Sensor4.sen_active_channel){
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10f      	bne.n	80013e8 <HAL_TIM_IC_CaptureCallback+0xb8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	7f1b      	ldrb	r3, [r3, #28]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d108      	bne.n	80013e8 <HAL_TIM_IC_CaptureCallback+0xb8>
		Update_Sensor_Reading(&Sensor4.Timer, Sensor4.sen_channel, Sensor4_ind);
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2203      	movs	r2, #3
 80013de:	4619      	mov	r1, r3
 80013e0:	481c      	ldr	r0, [pc, #112]	; (8001454 <HAL_TIM_IC_CaptureCallback+0x124>)
 80013e2:	f000 f869 	bl	80014b8 <Update_Sensor_Reading>
 80013e6:	e02b      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
	}
	else if(htim->Instance == Sensor5.Timer.Instance && htim->Channel == Sensor5.sen_active_channel){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x128>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d10f      	bne.n	8001414 <HAL_TIM_IC_CaptureCallback+0xe4>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7f1b      	ldrb	r3, [r3, #28]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x128>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	429a      	cmp	r2, r3
 8001400:	d108      	bne.n	8001414 <HAL_TIM_IC_CaptureCallback+0xe4>
		Update_Sensor_Reading(&Sensor5.Timer, Sensor5.sen_channel, Sensor5_ind);
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2204      	movs	r2, #4
 800140a:	4619      	mov	r1, r3
 800140c:	4812      	ldr	r0, [pc, #72]	; (8001458 <HAL_TIM_IC_CaptureCallback+0x128>)
 800140e:	f000 f853 	bl	80014b8 <Update_Sensor_Reading>
 8001412:	e015      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
	}
	else if(htim->Instance == Sensor6.Timer.Instance && htim->Channel == Sensor6.sen_active_channel){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d10f      	bne.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	461a      	mov	r2, r3
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	429a      	cmp	r2, r3
 800142c:	d108      	bne.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
		Update_Sensor_Reading(&Sensor6.Timer, Sensor6.sen_channel, Sensor6_ind);
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2205      	movs	r2, #5
 8001436:	4619      	mov	r1, r3
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800143a:	f000 f83d 	bl	80014b8 <Update_Sensor_Reading>
	}

}
 800143e:	e7ff      	b.n	8001440 <HAL_TIM_IC_CaptureCallback+0x110>
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200000b4 	.word	0x200000b4
 800144c:	20000104 	.word	0x20000104
 8001450:	20000154 	.word	0x20000154
 8001454:	200001a4 	.word	0x200001a4
 8001458:	200001f4 	.word	0x200001f4
 800145c:	20000244 	.word	0x20000244

08001460 <cal_reading>:


// Function to calculate Ultra-Sonic reading based on two captured values
static u16 cal_reading(u16 val1, u16 val2){
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
	if(val1 >  val2){
 8001470:	88fa      	ldrh	r2, [r7, #6]
 8001472:	88bb      	ldrh	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d90d      	bls.n	8001494 <cal_reading+0x34>
		u16 temp = (62000 - val1) + val2;
 8001478:	88ba      	ldrh	r2, [r7, #4]
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	f5a3 635d 	sub.w	r3, r3, #3536	; 0xdd0
 8001484:	81fb      	strh	r3, [r7, #14]
		return (temp / 58);
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <cal_reading+0x54>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	b29b      	uxth	r3, r3
 8001492:	e00a      	b.n	80014aa <cal_reading+0x4a>
	}
	return ((val2 - val1) / 58);
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <cal_reading+0x54>)
 800149c:	fb82 1203 	smull	r1, r2, r2, r3
 80014a0:	441a      	add	r2, r3
 80014a2:	1152      	asrs	r2, r2, #5
 80014a4:	17db      	asrs	r3, r3, #31
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	b29b      	uxth	r3, r3
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	8d3dcb09 	.word	0x8d3dcb09

080014b8 <Update_Sensor_Reading>:

// This function is called in Input capture ISR
// given a specifc sensor, timer and channel i can store the captured counter
// as a first value or the second value to Ultra_reading array of the echo being processed
static void Update_Sensor_Reading(TIM_HandleTypeDef *htim, Sensor_channel sen_channel, Sensor_ind Sen_ind){
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
 80014c4:	4613      	mov	r3, r2
 80014c6:	70bb      	strb	r3, [r7, #2]
	if(values1_flags[Sen_ind] == 0){
 80014c8:	78bb      	ldrb	r3, [r7, #2]
 80014ca:	4a73      	ldr	r2, [pc, #460]	; (8001698 <Update_Sensor_Reading+0x1e0>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d167      	bne.n	80015a2 <Update_Sensor_Reading+0xea>
		values1_captured[Sen_ind] = HAL_TIM_ReadCapturedValue(htim, sen_channel);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f002 fd5c 	bl	8003f94 <HAL_TIM_ReadCapturedValue>
 80014dc:	4602      	mov	r2, r0
 80014de:	78bb      	ldrb	r3, [r7, #2]
 80014e0:	b291      	uxth	r1, r2
 80014e2:	4a6e      	ldr	r2, [pc, #440]	; (800169c <Update_Sensor_Reading+0x1e4>)
 80014e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		values1_flags[Sen_ind] = 1;
 80014e8:	78bb      	ldrb	r3, [r7, #2]
 80014ea:	4a6b      	ldr	r2, [pc, #428]	; (8001698 <Update_Sensor_Reading+0x1e0>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	54d1      	strb	r1, [r2, r3]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, sen_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <Update_Sensor_Reading+0x50>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1a      	ldr	r2, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 020a 	bic.w	r2, r2, #10
 8001504:	621a      	str	r2, [r3, #32]
 8001506:	e01f      	b.n	8001548 <Update_Sensor_Reading+0x90>
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b04      	cmp	r3, #4
 800150c:	d108      	bne.n	8001520 <Update_Sensor_Reading+0x68>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	e013      	b.n	8001548 <Update_Sensor_Reading+0x90>
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	2b08      	cmp	r3, #8
 8001524:	d108      	bne.n	8001538 <Update_Sensor_Reading+0x80>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e007      	b.n	8001548 <Update_Sensor_Reading+0x90>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <Update_Sensor_Reading+0xa8>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1a      	ldr	r2, [r3, #32]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0202 	orr.w	r2, r2, #2
 800155c:	621a      	str	r2, [r3, #32]

		__HAL_TIM_SET_CAPTUREPOLARITY(htim, sen_channel, TIM_INPUTCHANNELPOLARITY_RISING);
		values1_flags[Sen_ind] = 2;
		values2_flags[Sen_ind] = 1;
	}
}
 800155e:	e096      	b.n	800168e <Update_Sensor_Reading+0x1d6>
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, sen_channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d108      	bne.n	8001578 <Update_Sensor_Reading+0xc0>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	f043 0320 	orr.w	r3, r3, #32
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	e08a      	b.n	800168e <Update_Sensor_Reading+0x1d6>
 8001578:	78fb      	ldrb	r3, [r7, #3]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d108      	bne.n	8001590 <Update_Sensor_Reading+0xd8>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	e07e      	b.n	800168e <Update_Sensor_Reading+0x1d6>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159e:	6213      	str	r3, [r2, #32]
}
 80015a0:	e075      	b.n	800168e <Update_Sensor_Reading+0x1d6>
	else if(values1_flags[Sen_ind] == 1){
 80015a2:	78bb      	ldrb	r3, [r7, #2]
 80015a4:	4a3c      	ldr	r2, [pc, #240]	; (8001698 <Update_Sensor_Reading+0x1e0>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d170      	bne.n	800168e <Update_Sensor_Reading+0x1d6>
		u16 value2 = HAL_TIM_ReadCapturedValue(htim, sen_channel);
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	4619      	mov	r1, r3
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f002 fcef 	bl	8003f94 <HAL_TIM_ReadCapturedValue>
 80015b6:	4603      	mov	r3, r0
 80015b8:	81fb      	strh	r3, [r7, #14]
		Ultra_reading[Sen_ind] = cal_reading(values1_captured[Sen_ind], value2);
 80015ba:	78bb      	ldrb	r3, [r7, #2]
 80015bc:	4a37      	ldr	r2, [pc, #220]	; (800169c <Update_Sensor_Reading+0x1e4>)
 80015be:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80015c2:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <Update_Sensor_Reading+0x1e8>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	78bb      	ldrb	r3, [r7, #2]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	18d4      	adds	r4, r2, r3
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff ff46 	bl	8001460 <cal_reading>
 80015d4:	4603      	mov	r3, r0
 80015d6:	8023      	strh	r3, [r4, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(htim, sen_channel, TIM_INPUTCHANNELPOLARITY_RISING);
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <Update_Sensor_Reading+0x138>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 020a 	bic.w	r2, r2, #10
 80015ec:	621a      	str	r2, [r3, #32]
 80015ee:	e01f      	b.n	8001630 <Update_Sensor_Reading+0x178>
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d108      	bne.n	8001608 <Update_Sensor_Reading+0x150>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e013      	b.n	8001630 <Update_Sensor_Reading+0x178>
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	2b08      	cmp	r3, #8
 800160c:	d108      	bne.n	8001620 <Update_Sensor_Reading+0x168>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6812      	ldr	r2, [r2, #0]
 8001618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e007      	b.n	8001630 <Update_Sensor_Reading+0x178>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6812      	ldr	r2, [r2, #0]
 800162a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800162e:	6213      	str	r3, [r2, #32]
 8001630:	78fb      	ldrb	r3, [r7, #3]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d106      	bne.n	8001644 <Update_Sensor_Reading+0x18c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a12      	ldr	r2, [r2, #32]
 8001640:	621a      	str	r2, [r3, #32]
 8001642:	e019      	b.n	8001678 <Update_Sensor_Reading+0x1c0>
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	2b04      	cmp	r3, #4
 8001648:	d106      	bne.n	8001658 <Update_Sensor_Reading+0x1a0>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e00f      	b.n	8001678 <Update_Sensor_Reading+0x1c0>
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	2b08      	cmp	r3, #8
 800165c:	d106      	bne.n	800166c <Update_Sensor_Reading+0x1b4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e005      	b.n	8001678 <Update_Sensor_Reading+0x1c0>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	6213      	str	r3, [r2, #32]
		values1_flags[Sen_ind] = 2;
 8001678:	78bb      	ldrb	r3, [r7, #2]
 800167a:	4a07      	ldr	r2, [pc, #28]	; (8001698 <Update_Sensor_Reading+0x1e0>)
 800167c:	2102      	movs	r1, #2
 800167e:	54d1      	strb	r1, [r2, r3]
		values2_flags[Sen_ind] = 1;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <Update_Sensor_Reading+0x1ec>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	78bb      	ldrb	r3, [r7, #2]
 8001686:	4413      	add	r3, r2
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
}
 800168c:	e7ff      	b.n	800168e <Update_Sensor_Reading+0x1d6>
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	200002a8 	.word	0x200002a8
 800169c:	20000298 	.word	0x20000298
 80016a0:	20000294 	.word	0x20000294
 80016a4:	200002a4 	.word	0x200002a4

080016a8 <Enable_Timer>:


// Start the timer from 0 to start measuring a certain time
void Enable_Timer(){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
	current_time = 0;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <Enable_Timer+0x1c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <Enable_Timer+0x20>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200002b0 	.word	0x200002b0
 80016c8:	200002b4 	.word	0x200002b4

080016cc <Disable_Timer>:

// Used to reset the current_timer variable to prevent overflow
void Disable_Timer(){
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	current_time = 0;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <Disable_Timer+0x14>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200002b0 	.word	0x200002b0

080016e4 <Get_time>:


// calculate the time passed since enabling the timer by calling Enable_Timer method
u32 Get_time(){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
	u32 time = TIM1->CNT + (current_time * 62000);
 80016ea:	4b08      	ldr	r3, [pc, #32]	; (800170c <Get_time+0x28>)
 80016ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <Get_time+0x2c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f24f 2130 	movw	r1, #62000	; 0xf230
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	607b      	str	r3, [r7, #4]
	return time;
 80016fe:	687b      	ldr	r3, [r7, #4]
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40012c00 	.word	0x40012c00
 8001710:	200002b0 	.word	0x200002b0

08001714 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001718:	f000 fdd2 	bl	80022c0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800171c:	f000 f84a 	bl	80017b4 <SystemClock_Config>
	/* USER CODE END SysInit */

	/*******************************************************************
	 ************** Initialize all configured peripherals **************
	 *******************************************************************/
	MX_GPIO_Init();
 8001720:	f000 fa86 	bl	8001c30 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001724:	f000 f8d8 	bl	80018d8 <MX_TIM2_Init>
	MX_TIM1_Init();
 8001728:	f000 f886 	bl	8001838 <MX_TIM1_Init>
	MX_TIM3_Init();
 800172c:	f000 f964 	bl	80019f8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001730:	f000 f9de 	bl	8001af0 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8001734:	f000 fa52 	bl	8001bdc <MX_USART2_UART_Init>
	Init_Uart((uint8_t*)&Uart_flag,(uint8_t*)&rxData);
 8001738:	4913      	ldr	r1, [pc, #76]	; (8001788 <main+0x74>)
 800173a:	4814      	ldr	r0, [pc, #80]	; (800178c <main+0x78>)
 800173c:	f7ff fc00 	bl	8000f40 <Init_Uart>
	Driving_Init();
 8001740:	f7fe fd06 	bl	8000150 <Driving_Init>
	SharedVar_Init();
 8001744:	f7ff fb9c 	bl	8000e80 <SharedVar_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(80);
 8001748:	2050      	movs	r0, #80	; 0x50
 800174a:	f000 fe1b 	bl	8002384 <HAL_Delay>
	/* USER CODE END 2 */
	/* Init scheduler */
	osKernelInitialize();
 800174e:	f003 fe2b 	bl	80053a8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Driving_Task */
	Driving_TaskHandle = osThreadNew(Start_Driving_Task_Int, NULL, &Driving_Task_attributes);
 8001752:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <main+0x7c>)
 8001754:	2100      	movs	r1, #0
 8001756:	480f      	ldr	r0, [pc, #60]	; (8001794 <main+0x80>)
 8001758:	f003 fe8c 	bl	8005474 <osThreadNew>
 800175c:	4603      	mov	r3, r0
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <main+0x84>)
 8001760:	6013      	str	r3, [r2, #0]

	/* creation of Searching_Task */
	Searching_TaskHandle = osThreadNew(Start_Searching_Task_Int, NULL, &Searching_Task_attributes);
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <main+0x88>)
 8001764:	2100      	movs	r1, #0
 8001766:	480e      	ldr	r0, [pc, #56]	; (80017a0 <main+0x8c>)
 8001768:	f003 fe84 	bl	8005474 <osThreadNew>
 800176c:	4603      	mov	r3, r0
 800176e:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <main+0x90>)
 8001770:	6013      	str	r3, [r2, #0]

	/* creation of Parking_Task */
	Parking_TaskHandle = osThreadNew(Start_Parking_Task_Int, NULL, &Parking_Task_attributes);
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <main+0x94>)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <main+0x98>)
 8001778:	f003 fe7c 	bl	8005474 <osThreadNew>
 800177c:	4603      	mov	r3, r0
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <main+0x9c>)
 8001780:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001782:	f003 fe43 	bl	800540c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001786:	e7fe      	b.n	8001786 <main+0x72>
 8001788:	2000042e 	.word	0x2000042e
 800178c:	2000042d 	.word	0x2000042d
 8001790:	08008718 	.word	0x08008718
 8001794:	08001d8d 	.word	0x08001d8d
 8001798:	2000041c 	.word	0x2000041c
 800179c:	0800873c 	.word	0x0800873c
 80017a0:	08001dd9 	.word	0x08001dd9
 80017a4:	20000420 	.word	0x20000420
 80017a8:	08008760 	.word	0x08008760
 80017ac:	08001e4d 	.word	0x08001e4d
 80017b0:	20000424 	.word	0x20000424

080017b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b090      	sub	sp, #64	; 0x40
 80017b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0318 	add.w	r3, r7, #24
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f006 fe92 	bl	80084ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017da:	2301      	movs	r3, #1
 80017dc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017de:	2310      	movs	r3, #16
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80017ea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80017ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	f107 0318 	add.w	r3, r7, #24
 80017f4:	4618      	mov	r0, r3
 80017f6:	f001 f945 	bl	8002a84 <HAL_RCC_OscConfig>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001800:	f000 fb4c 	bl	8001e9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001804:	230f      	movs	r3, #15
 8001806:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001808:	2302      	movs	r3, #2
 800180a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001814:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fbb2 	bl	8002f88 <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0x7a>
	{
		Error_Handler();
 800182a:	f000 fb37 	bl	8001e9c <Error_Handler>
	}
}
 800182e:	bf00      	nop
 8001830:	3740      	adds	r7, #64	; 0x40
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	463b      	mov	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001856:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <MX_TIM1_Init+0x9c>)
 8001858:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64-1;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_TIM1_Init+0x98>)
 800185c:	223f      	movs	r2, #63	; 0x3f
 800185e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62000;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001868:	f24f 2230 	movw	r2, #62000	; 0xf230
 800186c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_TIM1_Init+0x98>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001880:	4813      	ldr	r0, [pc, #76]	; (80018d0 <MX_TIM1_Init+0x98>)
 8001882:	f001 fd0f 	bl	80032a4 <HAL_TIM_Base_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 800188c:	f000 fb06 	bl	8001e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4619      	mov	r1, r3
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <MX_TIM1_Init+0x98>)
 800189e:	f002 fab1 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 80018a8:	f000 faf8 	bl	8001e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018b4:	463b      	mov	r3, r7
 80018b6:	4619      	mov	r1, r3
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_TIM1_Init+0x98>)
 80018ba:	f002 ff7d 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 80018c4:	f000 faea 	bl	8001e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200002b4 	.word	0x200002b4
 80018d4:	40012c00 	.word	0x40012c00

080018d8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001908:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64-1;
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <MX_TIM2_Init+0x11c>)
 800190c:	223f      	movs	r2, #63	; 0x3f
 800190e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 62000;
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001918:	f24f 2230 	movw	r2, #62000	; 0xf230
 800191c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192a:	4832      	ldr	r0, [pc, #200]	; (80019f4 <MX_TIM2_Init+0x11c>)
 800192c:	f001 fcba 	bl	80032a4 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM2_Init+0x62>
	{
		Error_Handler();
 8001936:	f000 fab1 	bl	8001e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800193e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	4619      	mov	r1, r3
 8001946:	482b      	ldr	r0, [pc, #172]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001948:	f002 fa5c 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001952:	f000 faa3 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001958:	f001 fe8a 	bl	8003670 <HAL_TIM_IC_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8001962:	f000 fa9b 	bl	8001e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	481f      	ldr	r0, [pc, #124]	; (80019f4 <MX_TIM2_Init+0x11c>)
 8001976:	f002 ff1f 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM2_Init+0xac>
	{
		Error_Handler();
 8001980:	f000 fa8c 	bl	8001e9c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001984:	2300      	movs	r3, #0
 8001986:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001988:	2301      	movs	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	4619      	mov	r1, r3
 800199a:	4816      	ldr	r0, [pc, #88]	; (80019f4 <MX_TIM2_Init+0x11c>)
 800199c:	f002 f8d4 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM2_Init+0xd2>
	{
		Error_Handler();
 80019a6:	f000 fa79 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019aa:	463b      	mov	r3, r7
 80019ac:	2204      	movs	r2, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_TIM2_Init+0x11c>)
 80019b2:	f002 f8c9 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0xe8>
	{
		Error_Handler();
 80019bc:	f000 fa6e 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	2208      	movs	r2, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <MX_TIM2_Init+0x11c>)
 80019c8:	f002 f8be 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0xfe>
	{
		Error_Handler();
 80019d2:	f000 fa63 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80019d6:	463b      	mov	r3, r7
 80019d8:	220c      	movs	r2, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <MX_TIM2_Init+0x11c>)
 80019de:	f002 f8b3 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0x114>
	{
		Error_Handler();
 80019e8:	f000 fa58 	bl	8001e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200002fc 	.word	0x200002fc

080019f8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a22:	4b31      	ldr	r3, [pc, #196]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a24:	4a31      	ldr	r2, [pc, #196]	; (8001aec <MX_TIM3_Init+0xf4>)
 8001a26:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64-1;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a2a:	223f      	movs	r2, #63	; 0x3f
 8001a2c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 62000;
 8001a34:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a36:	f24f 2230 	movw	r2, #62000	; 0xf230
 8001a3a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a48:	4827      	ldr	r0, [pc, #156]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a4a:	f001 fc2b 	bl	80032a4 <HAL_TIM_Base_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x60>
	{
		Error_Handler();
 8001a54:	f000 fa22 	bl	8001e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5c:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5e:	f107 0318 	add.w	r3, r7, #24
 8001a62:	4619      	mov	r1, r3
 8001a64:	4820      	ldr	r0, [pc, #128]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a66:	f002 f9cd 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8001a70:	f000 fa14 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001a74:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a76:	f001 fdfb 	bl	8003670 <HAL_TIM_IC_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8001a80:	f000 fa0c 	bl	8001e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4815      	ldr	r0, [pc, #84]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001a94:	f002 fe90 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0xaa>
	{
		Error_Handler();
 8001a9e:	f000 f9fd 	bl	8001e9c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001aba:	f002 f845 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0xd0>
	{
		Error_Handler();
 8001ac4:	f000 f9ea 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2204      	movs	r2, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_TIM3_Init+0xf0>)
 8001ad0:	f002 f83a 	bl	8003b48 <HAL_TIM_IC_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0xe6>
	{
		Error_Handler();
 8001ada:	f000 f9df 	bl	8001e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000344 	.word	0x20000344
 8001aec:	40000400 	.word	0x40000400

08001af0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08e      	sub	sp, #56	; 0x38
 8001af4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b22:	4a2d      	ldr	r2, [pc, #180]	; (8001bd8 <MX_TIM4_Init+0xe8>)
 8001b24:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 64-1;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 20000-1;
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b34:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b38:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b46:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b48:	f001 fbac 	bl	80032a4 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x66>
	{
		Error_Handler();
 8001b52:	f000 f9a3 	bl	8001e9c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b60:	4619      	mov	r1, r3
 8001b62:	481c      	ldr	r0, [pc, #112]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b64:	f002 f94e 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x82>
	{
		Error_Handler();
 8001b6e:	f000 f995 	bl	8001e9c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b72:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b74:	f001 fc82 	bl	800347c <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x92>
	{
		Error_Handler();
 8001b7e:	f000 f98d 	bl	8001e9c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001b92:	f002 fe11 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM4_Init+0xb0>
	{
		Error_Handler();
 8001b9c:	f000 f97e 	bl	8001e9c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	; 0x60
 8001ba2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2208      	movs	r2, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001bb8:	f002 f862 	bl	8003c80 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM4_Init+0xd6>
	{
		Error_Handler();
 8001bc2:	f000 f96b 	bl	8001e9c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001bc6:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM4_Init+0xe4>)
 8001bc8:	f000 fa7e 	bl	80020c8 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3738      	adds	r7, #56	; 0x38
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000038c 	.word	0x2000038c
 8001bd8:	40000800 	.word	0x40000800

08001bdc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <MX_USART2_UART_Init+0x50>)
 8001be4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001be8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001bec:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c02:	220c      	movs	r2, #12
 8001c04:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART2_UART_Init+0x4c>)
 8001c14:	f002 fe40 	bl	8004898 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001c1e:	f000 f93d 	bl	8001e9c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200003d4 	.word	0x200003d4
 8001c2c:	40004400 	.word	0x40004400

08001c30 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c4a:	f043 0304 	orr.w	r3, r3, #4
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <MX_GPIO_Init+0xa0>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
 8001c74:	2200      	movs	r2, #0
 8001c76:	f640 6132 	movw	r1, #3634	; 0xe32
 8001c7a:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <MX_GPIO_Init+0xa4>)
 8001c7c:	f000 feea 	bl	8002a54 <HAL_GPIO_WritePin>
			|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8001c80:	2200      	movs	r2, #0
 8001c82:	f24f 21f3 	movw	r1, #62195	; 0xf2f3
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001c88:	f000 fee4 	bl	8002a54 <HAL_GPIO_WritePin>
			|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
			|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pins : PA1 PA4 PA5 PA9
                           PA10 PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
 8001c8c:	f640 6332 	movw	r3, #3634	; 0xe32
 8001c90:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <MX_GPIO_Init+0xa4>)
 8001ca6:	f000 fd51 	bl	800274c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB6 PB7 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8001caa:	f24f 23f3 	movw	r3, #62195	; 0xf2f3
 8001cae:	60bb      	str	r3, [r7, #8]
			|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
			|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0308 	add.w	r3, r7, #8
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_GPIO_Init+0xa8>)
 8001cc4:	f000 fd42 	bl	800274c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc8:	bf00      	nop
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010800 	.word	0x40010800
 8001cd8:	40010c00 	.word	0x40010c00

08001cdc <HAL_UART_RxCpltCallback>:
 ** Based on the received character  the corresponding event is set                       **
 ** for synchronization between tasks.                                                    **
 ** ****************************************************************************************                                                     *
 ******************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	/* Check if the interrupt is from USART2*/
	if(huart->Instance==USART2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <HAL_UART_RxCpltCallback+0x98>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d13e      	bne.n	8001d6c <HAL_UART_RxCpltCallback+0x90>
	{
		/* Set the UART flag to indicate that data has been received*/
		Uart_flag = 1;
 8001cee:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <HAL_UART_RxCpltCallback+0x9c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]

		/*receive the Data (character) from bluetooth by using USART2*/
		ch = Get_Bluetooth_Command();
 8001cf4:	f7ff f940 	bl	8000f78 <Get_Bluetooth_Command>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_UART_RxCpltCallback+0xa0>)
 8001cfe:	701a      	strb	r2, [r3, #0]

		/*when character "W" is received the  SEARCH_RIGHT mode is activated*/
		if((ch=='W'))
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_UART_RxCpltCallback+0xa0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b57      	cmp	r3, #87	; 0x57
 8001d08:	d109      	bne.n	8001d1e <HAL_UART_RxCpltCallback+0x42>
		{
			/* Set the mode to SEARCH_RIGHT*/
			mode_Setter(SEARCH_RIGHT);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff f8e4 	bl	8000ed8 <mode_Setter>

			/* Set an event flag to notify the main program about the action */
			osEventFlagsSet(EventGroup_1, 2);
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_UART_RxCpltCallback+0xa4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2102      	movs	r1, #2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fc56 	bl	80055c8 <osEventFlagsSet>
 8001d1c:	e021      	b.n	8001d62 <HAL_UART_RxCpltCallback+0x86>
		}

		/*when character "U" is received the  SEARCH_LEFT mode is activated*/
		else if((ch=='U'))
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_UART_RxCpltCallback+0xa0>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b55      	cmp	r3, #85	; 0x55
 8001d26:	d109      	bne.n	8001d3c <HAL_UART_RxCpltCallback+0x60>
		{
			/*Set the mode to SEARCH_LEFT*/
			mode_Setter(SEARCH_LEFT);
 8001d28:	2002      	movs	r0, #2
 8001d2a:	f7ff f8d5 	bl	8000ed8 <mode_Setter>

			/* Set an event flag to notify the main program about the action*/
			osEventFlagsSet(EventGroup_1,2);
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_UART_RxCpltCallback+0xa4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2102      	movs	r1, #2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fc47 	bl	80055c8 <osEventFlagsSet>
 8001d3a:	e012      	b.n	8001d62 <HAL_UART_RxCpltCallback+0x86>
		}

		/*when  received  any character other than (W,U,S,D) the IDLE mode is activated*/
		else if(ch!='S'&&ch!='N')
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_UART_RxCpltCallback+0xa0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b53      	cmp	r3, #83	; 0x53
 8001d44:	d00d      	beq.n	8001d62 <HAL_UART_RxCpltCallback+0x86>
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_UART_RxCpltCallback+0xa0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b4e      	cmp	r3, #78	; 0x4e
 8001d4e:	d008      	beq.n	8001d62 <HAL_UART_RxCpltCallback+0x86>
		{
			/*Set the mode to IDLE for other Bluetooth commands*/
			mode_Setter(IDLE);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7ff f8c1 	bl	8000ed8 <mode_Setter>

			/*Set an event flag to notify the main program about the action*/
			osEventFlagsSet(EventGroup_1,4);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_UART_RxCpltCallback+0xa4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fc33 	bl	80055c8 <osEventFlagsSet>

		}
		/* Enabling interrupt to be able to receive again*/
		HAL_UART_Receive_IT(&huart2,(uint8_t*)&rxData,1);
 8001d62:	2201      	movs	r2, #1
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <HAL_UART_RxCpltCallback+0xa8>)
 8001d66:	4808      	ldr	r0, [pc, #32]	; (8001d88 <HAL_UART_RxCpltCallback+0xac>)
 8001d68:	f002 fde6 	bl	8004938 <HAL_UART_Receive_IT>
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40004400 	.word	0x40004400
 8001d78:	2000042d 	.word	0x2000042d
 8001d7c:	2000042c 	.word	0x2000042c
 8001d80:	20000428 	.word	0x20000428
 8001d84:	2000042e 	.word	0x2000042e
 8001d88:	200003d4 	.word	0x200003d4

08001d8c <Start_Driving_Task_Int>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Driving_Task_Int */
void Start_Driving_Task_Int(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		/* Wait for the event flag with bit 4 set, indicating a driving task is requested*/
		osEventFlagsWait(EventGroup_1, 4, osFlagsWaitAll, osWaitForever);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <Start_Driving_Task_Int+0x44>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	2104      	movs	r1, #4
 8001da0:	f003 fcae 	bl	8005700 <osEventFlagsWait>

		/* Continue executing the following code while the system is in IDLE mode*/
		while (mode_Getter() == IDLE)
 8001da4:	e00d      	b.n	8001dc2 <Start_Driving_Task_Int+0x36>
		{
			/* Execute the Driving_Runnable function with the current Bluetooth command 'ch'*/
			Driving_Runnable(ch);
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <Start_Driving_Task_Int+0x48>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe f9f5 	bl	800019c <Driving_Runnable>

			/* Perform obstacle avoidance logic*/
			Obstacle_Avoidance();
 8001db2:	f7fe fbad 	bl	8000510 <Obstacle_Avoidance>

			/* Clear the event flag bit 4, indicating that the driving task is completed*/
			osEventFlagsClear(EventGroup_1, 4);
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <Start_Driving_Task_Int+0x44>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2104      	movs	r1, #4
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fc5b 	bl	8005678 <osEventFlagsClear>
		while (mode_Getter() == IDLE)
 8001dc2:	f7ff f899 	bl	8000ef8 <mode_Getter>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ec      	beq.n	8001da6 <Start_Driving_Task_Int+0x1a>
		osEventFlagsWait(EventGroup_1, 4, osFlagsWaitAll, osWaitForever);
 8001dcc:	e7e2      	b.n	8001d94 <Start_Driving_Task_Int+0x8>
 8001dce:	bf00      	nop
 8001dd0:	20000428 	.word	0x20000428
 8001dd4:	2000042c 	.word	0x2000042c

08001dd8 <Start_Searching_Task_Int>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Searching_Task_Int */
void Start_Searching_Task_Int(void *argument)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Searching_Task_Int */
	/* Infinite loop */
	for(;;)
	{
		/* Wait for the event flag with bit 2 set, indicating a searching task is requested */
		osEventFlagsWait(EventGroup_1, 2, osFlagsWaitAll, osWaitForever);
 8001de0:	4b18      	ldr	r3, [pc, #96]	; (8001e44 <Start_Searching_Task_Int+0x6c>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	2201      	movs	r2, #1
 8001dea:	2102      	movs	r1, #2
 8001dec:	f003 fc88 	bl	8005700 <osEventFlagsWait>

		//osEventFlagsClear(EventGroup_1, 4); (test)

		/* Get the current mode */
		mode = mode_Getter();
 8001df0:	f7ff f882 	bl	8000ef8 <mode_Getter>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <Start_Searching_Task_Int+0x70>)
 8001dfa:	701a      	strb	r2, [r3, #0]

		/* Check if the system is in SEARCH_RIGHT or SEARCH_LEFT mode */
		if(mode == SEARCH_RIGHT || mode == SEARCH_LEFT)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <Start_Searching_Task_Int+0x70>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d004      	beq.n	8001e10 <Start_Searching_Task_Int+0x38>
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <Start_Searching_Task_Int+0x70>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d108      	bne.n	8001e22 <Start_Searching_Task_Int+0x4a>
		{
			/* Execute the Search_Runnable function for searching actions */
			Search_Runnable();
 8001e10:	f7ff f802 	bl	8000e18 <Search_Runnable>

			/* Clear the event flag bit 2, indicating that the searching task is completed */
			osEventFlagsClear(EventGroup_1, 2);
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <Start_Searching_Task_Int+0x6c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f003 fc2c 	bl	8005678 <osEventFlagsClear>
 8001e20:	e00f      	b.n	8001e42 <Start_Searching_Task_Int+0x6a>
		}
		/* Check if the system is in PARK_RIGHT or PARK_LEFT mode */
		else if(mode == PARK_RIGHT || mode == PARK_LEFT)
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <Start_Searching_Task_Int+0x70>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d004      	beq.n	8001e36 <Start_Searching_Task_Int+0x5e>
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <Start_Searching_Task_Int+0x70>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d1d4      	bne.n	8001de0 <Start_Searching_Task_Int+0x8>
		{
			/* Set an event flag bit 3, indicating a parking task should be performed */
			osEventFlagsSet(EventGroup_1, 3);
 8001e36:	4b03      	ldr	r3, [pc, #12]	; (8001e44 <Start_Searching_Task_Int+0x6c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2103      	movs	r1, #3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f003 fbc3 	bl	80055c8 <osEventFlagsSet>
		osEventFlagsWait(EventGroup_1, 2, osFlagsWaitAll, osWaitForever);
 8001e42:	e7cd      	b.n	8001de0 <Start_Searching_Task_Int+0x8>
 8001e44:	20000428 	.word	0x20000428
 8001e48:	2000042f 	.word	0x2000042f

08001e4c <Start_Parking_Task_Int>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Parking_Task_Int */
void Start_Parking_Task_Int(void *argument)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_Parking_Task_Int */
	/* Infinite loop */
	for(;;)
	{
		/* Wait for the event flag with bit 3 set, indicating a parking task is requested */
		osEventFlagsWait(EventGroup_1, 3, osFlagsWaitAll, osWaitForever);
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <Start_Parking_Task_Int+0x4c>)
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2103      	movs	r1, #3
 8001e60:	f003 fc4e 	bl	8005700 <osEventFlagsWait>

		/* Continue executing the following code while the system is in PARK_RIGHT or SEARCH_LEFT mode */
		while (mode_Getter() == PARK_RIGHT || mode_Getter() == SEARCH_LEFT)
 8001e64:	e00d      	b.n	8001e82 <Start_Parking_Task_Int+0x36>
		{
			/* Execute the Park_Runnable function for parking actions */
			Park_Runnable();
 8001e66:	f7fe fecb 	bl	8000c00 <Park_Runnable>

			/* Clear event flag bit 3, indicating that the parking task is completed */
			osEventFlagsClear(EventGroup_1, 3);
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <Start_Parking_Task_Int+0x4c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fc01 	bl	8005678 <osEventFlagsClear>

			/* Clear event flag bit 2 (SEARCHING task), indicating that searching is completed (if set) */
			osEventFlagsClear(EventGroup_1, 2);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <Start_Parking_Task_Int+0x4c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fbfb 	bl	8005678 <osEventFlagsClear>
		while (mode_Getter() == PARK_RIGHT || mode_Getter() == SEARCH_LEFT)
 8001e82:	f7ff f839 	bl	8000ef8 <mode_Getter>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d0ec      	beq.n	8001e66 <Start_Parking_Task_Int+0x1a>
 8001e8c:	f7ff f834 	bl	8000ef8 <mode_Getter>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d0e7      	beq.n	8001e66 <Start_Parking_Task_Int+0x1a>
		osEventFlagsWait(EventGroup_1, 3, osFlagsWaitAll, osWaitForever);
 8001e96:	e7dd      	b.n	8001e54 <Start_Parking_Task_Int+0x8>
 8001e98:	20000428 	.word	0x20000428

08001e9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <Error_Handler+0x8>
	...

08001ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_MspInit+0x68>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	4a17      	ldr	r2, [pc, #92]	; (8001f10 <HAL_MspInit+0x68>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6193      	str	r3, [r2, #24]
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <HAL_MspInit+0x68>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_MspInit+0x68>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_MspInit+0x68>)
 8001ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	61d3      	str	r3, [r2, #28]
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x68>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	210f      	movs	r1, #15
 8001ee2:	f06f 0001 	mvn.w	r0, #1
 8001ee6:	f000 fb48 	bl	800257a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_MspInit+0x6c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_MspInit+0x6c>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40010000 	.word	0x40010000

08001f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08e      	sub	sp, #56	; 0x38
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_TIM_Base_MspInit+0x194>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d114      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f38:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f42:	6193      	str	r3, [r2, #24]
 8001f44:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4c:	623b      	str	r3, [r7, #32]
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 15, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	210f      	movs	r1, #15
 8001f54:	2019      	movs	r0, #25
 8001f56:	f000 fb10 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f5a:	2019      	movs	r0, #25
 8001f5c:	f000 fb29 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f60:	e0a0      	b.n	80020a4 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d158      	bne.n	800201e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	4a4f      	ldr	r2, [pc, #316]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	61d3      	str	r3, [r2, #28]
 8001f78:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a49      	ldr	r2, [pc, #292]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9c:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a43      	ldr	r2, [pc, #268]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001fb4:	f640 4308 	movw	r3, #3080	; 0xc08
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	483a      	ldr	r0, [pc, #232]	; (80020b4 <HAL_TIM_Base_MspInit+0x19c>)
 8001fca:	f000 fbbf 	bl	800274c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4835      	ldr	r0, [pc, #212]	; (80020b8 <HAL_TIM_Base_MspInit+0x1a0>)
 8001fe4:	f000 fbb2 	bl	800274c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_TIM_Base_MspInit+0x1a4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002004:	637b      	str	r3, [r7, #52]	; 0x34
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <HAL_TIM_Base_MspInit+0x1a4>)
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800200c:	2200      	movs	r2, #0
 800200e:	2105      	movs	r1, #5
 8002010:	201c      	movs	r0, #28
 8002012:	f000 fab2 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002016:	201c      	movs	r0, #28
 8002018:	f000 facb 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 800201c:	e042      	b.n	80020a4 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a27      	ldr	r2, [pc, #156]	; (80020c0 <HAL_TIM_Base_MspInit+0x1a8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d12c      	bne.n	8002082 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	4a20      	ldr	r2, [pc, #128]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	61d3      	str	r3, [r2, #28]
 8002034:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002058:	23c0      	movs	r3, #192	; 0xc0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	4813      	ldr	r0, [pc, #76]	; (80020b8 <HAL_TIM_Base_MspInit+0x1a0>)
 800206c:	f000 fb6e 	bl	800274c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002070:	2200      	movs	r2, #0
 8002072:	2105      	movs	r1, #5
 8002074:	201d      	movs	r0, #29
 8002076:	f000 fa80 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800207a:	201d      	movs	r0, #29
 800207c:	f000 fa99 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8002080:	e010      	b.n	80020a4 <HAL_TIM_Base_MspInit+0x18c>
  else if(htim_base->Instance==TIM4)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <HAL_TIM_Base_MspInit+0x1ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d10b      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	61d3      	str	r3, [r2, #28]
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_TIM_Base_MspInit+0x198>)
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
}
 80020a4:	bf00      	nop
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40010000 	.word	0x40010000
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000800 	.word	0x40000800

080020c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a10      	ldr	r2, [pc, #64]	; (8002124 <HAL_TIM_MspPostInit+0x5c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d118      	bne.n	800211a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_TIM_MspPostInit+0x60>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_TIM_MspPostInit+0x60>)
 80020ee:	f043 0308 	orr.w	r3, r3, #8
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_TIM_MspPostInit+0x60>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2302      	movs	r3, #2
 800210c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4619      	mov	r1, r3
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_TIM_MspPostInit+0x64>)
 8002116:	f000 fb19 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40000800 	.word	0x40000800
 8002128:	40021000 	.word	0x40021000
 800212c:	40010c00 	.word	0x40010c00

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_UART_MspInit+0x98>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d137      	bne.n	80021c0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <HAL_UART_MspInit+0x9c>)
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_UART_MspInit+0x9c>)
 8002156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215a:	61d3      	str	r3, [r2, #28]
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_UART_MspInit+0x9c>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_UART_MspInit+0x9c>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_UART_MspInit+0x9c>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_UART_MspInit+0x9c>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002180:	2304      	movs	r3, #4
 8002182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002188:	2303      	movs	r3, #3
 800218a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	4619      	mov	r1, r3
 8002192:	480f      	ldr	r0, [pc, #60]	; (80021d0 <HAL_UART_MspInit+0xa0>)
 8002194:	f000 fada 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002198:	2308      	movs	r3, #8
 800219a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <HAL_UART_MspInit+0xa0>)
 80021ac:	f000 face 	bl	800274c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2105      	movs	r1, #5
 80021b4:	2026      	movs	r0, #38	; 0x26
 80021b6:	f000 f9e0 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021ba:	2026      	movs	r0, #38	; 0x26
 80021bc:	f000 f9f9 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	3720      	adds	r7, #32
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40004400 	.word	0x40004400
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010800 	.word	0x40010800

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002202:	f000 f8a3 	bl	800234c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002206:	f005 f97f 	bl	8007508 <xTaskGetSchedulerState>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002210:	f005 ff12 	bl	8008038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800221c:	4802      	ldr	r0, [pc, #8]	; (8002228 <TIM1_UP_IRQHandler+0x10>)
 800221e:	f001 fb8b 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002b4 	.word	0x200002b4

0800222c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM2_IRQHandler+0x10>)
 8002232:	f001 fb81 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200002fc 	.word	0x200002fc

08002240 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <TIM3_IRQHandler+0x10>)
 8002246:	f001 fb77 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000344 	.word	0x20000344

08002254 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <USART2_IRQHandler+0x10>)
 800225a:	f002 fb93 	bl	8004984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200003d4 	.word	0x200003d4

08002268 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff fff8 	bl	8002268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800227a:	490c      	ldr	r1, [pc, #48]	; (80022ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002290:	4c09      	ldr	r4, [pc, #36]	; (80022b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f006 f983 	bl	80085a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022a2:	f7ff fa37 	bl	8001714 <main>
  bx lr
 80022a6:	4770      	bx	lr
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80022b0:	080087b8 	.word	0x080087b8
  ldr r2, =_sbss
 80022b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80022b8:	20003a64 	.word	0x20003a64

080022bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022bc:	e7fe      	b.n	80022bc <ADC1_2_IRQHandler>
	...

080022c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <HAL_Init+0x28>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <HAL_Init+0x28>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f000 f947 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d6:	200f      	movs	r0, #15
 80022d8:	f000 f808 	bl	80022ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022dc:	f7ff fde4 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40022000 	.word	0x40022000

080022ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x54>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_InitTick+0x58>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	fbb3 f3f1 	udiv	r3, r3, r1
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f95f 	bl	80025ce <HAL_SYSTICK_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e00e      	b.n	8002338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b0f      	cmp	r3, #15
 800231e:	d80a      	bhi.n	8002336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002320:	2200      	movs	r2, #0
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 f927 	bl	800257a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_InitTick+0x5c>)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000014 	.word	0x20000014
 8002344:	2000001c 	.word	0x2000001c
 8002348:	20000018 	.word	0x20000018

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <HAL_IncTick+0x20>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	2000001c 	.word	0x2000001c
 800236c:	20000430 	.word	0x20000430

08002370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_GetTick+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000430 	.word	0x20000430

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff fff0 	bl	8002370 <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffe0 	bl	8002370 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	2000001c 	.word	0x2000001c

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4906      	ldr	r1, [pc, #24]	; (8002464 <__NVIC_EnableIRQ+0x34>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff90 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff2d 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff42 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff90 	bl	80024bc <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5f 	bl	8002468 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff35 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d008      	beq.n	8002610 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e020      	b.n	8002652 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 020e 	bic.w	r2, r2, #14
 800261e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d005      	beq.n	8002680 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
 800267e:	e051      	b.n	8002724 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 020e 	bic.w	r2, r2, #14
 800268e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0201 	bic.w	r2, r2, #1
 800269e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a22      	ldr	r2, [pc, #136]	; (8002730 <HAL_DMA_Abort_IT+0xd4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d029      	beq.n	80026fe <HAL_DMA_Abort_IT+0xa2>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a21      	ldr	r2, [pc, #132]	; (8002734 <HAL_DMA_Abort_IT+0xd8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d022      	beq.n	80026fa <HAL_DMA_Abort_IT+0x9e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a1f      	ldr	r2, [pc, #124]	; (8002738 <HAL_DMA_Abort_IT+0xdc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMA_Abort_IT+0x98>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_DMA_Abort_IT+0xe0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d012      	beq.n	80026ee <HAL_DMA_Abort_IT+0x92>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <HAL_DMA_Abort_IT+0xe4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00a      	beq.n	80026e8 <HAL_DMA_Abort_IT+0x8c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_DMA_Abort_IT+0xe8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d102      	bne.n	80026e2 <HAL_DMA_Abort_IT+0x86>
 80026dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026e0:	e00e      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e6:	e00b      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ec:	e008      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f2:	e005      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f8:	e002      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026fa:	2310      	movs	r3, #16
 80026fc:	e000      	b.n	8002700 <HAL_DMA_Abort_IT+0xa4>
 80026fe:	2301      	movs	r3, #1
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_DMA_Abort_IT+0xec>)
 8002702:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
    } 
  }
  return status;
 8002724:	7bfb      	ldrb	r3, [r7, #15]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40020008 	.word	0x40020008
 8002734:	4002001c 	.word	0x4002001c
 8002738:	40020030 	.word	0x40020030
 800273c:	40020044 	.word	0x40020044
 8002740:	40020058 	.word	0x40020058
 8002744:	4002006c 	.word	0x4002006c
 8002748:	40020000 	.word	0x40020000

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275e:	e169      	b.n	8002a34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002760:	2201      	movs	r2, #1
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8158 	bne.w	8002a2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a9a      	ldr	r2, [pc, #616]	; (80029ec <HAL_GPIO_Init+0x2a0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d05e      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 8002788:	4a98      	ldr	r2, [pc, #608]	; (80029ec <HAL_GPIO_Init+0x2a0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d875      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 800278e:	4a98      	ldr	r2, [pc, #608]	; (80029f0 <HAL_GPIO_Init+0x2a4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d058      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 8002794:	4a96      	ldr	r2, [pc, #600]	; (80029f0 <HAL_GPIO_Init+0x2a4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d86f      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 800279a:	4a96      	ldr	r2, [pc, #600]	; (80029f4 <HAL_GPIO_Init+0x2a8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d052      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027a0:	4a94      	ldr	r2, [pc, #592]	; (80029f4 <HAL_GPIO_Init+0x2a8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d869      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027a6:	4a94      	ldr	r2, [pc, #592]	; (80029f8 <HAL_GPIO_Init+0x2ac>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d04c      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027ac:	4a92      	ldr	r2, [pc, #584]	; (80029f8 <HAL_GPIO_Init+0x2ac>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d863      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027b2:	4a92      	ldr	r2, [pc, #584]	; (80029fc <HAL_GPIO_Init+0x2b0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d046      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
 80027b8:	4a90      	ldr	r2, [pc, #576]	; (80029fc <HAL_GPIO_Init+0x2b0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d85d      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027be:	2b12      	cmp	r3, #18
 80027c0:	d82a      	bhi.n	8002818 <HAL_GPIO_Init+0xcc>
 80027c2:	2b12      	cmp	r3, #18
 80027c4:	d859      	bhi.n	800287a <HAL_GPIO_Init+0x12e>
 80027c6:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <HAL_GPIO_Init+0x80>)
 80027c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027cc:	08002847 	.word	0x08002847
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002833 	.word	0x08002833
 80027d8:	08002875 	.word	0x08002875
 80027dc:	0800287b 	.word	0x0800287b
 80027e0:	0800287b 	.word	0x0800287b
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	0800287b 	.word	0x0800287b
 80027ec:	0800287b 	.word	0x0800287b
 80027f0:	0800287b 	.word	0x0800287b
 80027f4:	0800287b 	.word	0x0800287b
 80027f8:	0800287b 	.word	0x0800287b
 80027fc:	0800287b 	.word	0x0800287b
 8002800:	0800287b 	.word	0x0800287b
 8002804:	0800287b 	.word	0x0800287b
 8002808:	0800287b 	.word	0x0800287b
 800280c:	0800287b 	.word	0x0800287b
 8002810:	08002829 	.word	0x08002829
 8002814:	0800283d 	.word	0x0800283d
 8002818:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <HAL_GPIO_Init+0x2b4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d013      	beq.n	8002846 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281e:	e02c      	b.n	800287a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	623b      	str	r3, [r7, #32]
          break;
 8002826:	e029      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	3304      	adds	r3, #4
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e024      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	3308      	adds	r3, #8
 8002838:	623b      	str	r3, [r7, #32]
          break;
 800283a:	e01f      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	330c      	adds	r3, #12
 8002842:	623b      	str	r3, [r7, #32]
          break;
 8002844:	e01a      	b.n	800287c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800284e:	2304      	movs	r3, #4
 8002850:	623b      	str	r3, [r7, #32]
          break;
 8002852:	e013      	b.n	800287c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800285c:	2308      	movs	r3, #8
 800285e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	611a      	str	r2, [r3, #16]
          break;
 8002866:	e009      	b.n	800287c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002868:	2308      	movs	r3, #8
 800286a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	615a      	str	r2, [r3, #20]
          break;
 8002872:	e003      	b.n	800287c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002874:	2300      	movs	r3, #0
 8002876:	623b      	str	r3, [r7, #32]
          break;
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x130>
          break;
 800287a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2bff      	cmp	r3, #255	; 0xff
 8002880:	d801      	bhi.n	8002886 <HAL_GPIO_Init+0x13a>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	e001      	b.n	800288a <HAL_GPIO_Init+0x13e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	; 0xff
 8002890:	d802      	bhi.n	8002898 <HAL_GPIO_Init+0x14c>
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	e002      	b.n	800289e <HAL_GPIO_Init+0x152>
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	3b08      	subs	r3, #8
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	210f      	movs	r1, #15
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	6a39      	ldr	r1, [r7, #32]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	fa01 f303 	lsl.w	r3, r1, r3
 80028b8:	431a      	orrs	r2, r3
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80b1 	beq.w	8002a2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <HAL_GPIO_Init+0x2b8>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028e4:	4a48      	ldr	r2, [pc, #288]	; (8002a08 <HAL_GPIO_Init+0x2bc>)
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	220f      	movs	r2, #15
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a40      	ldr	r2, [pc, #256]	; (8002a0c <HAL_GPIO_Init+0x2c0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_GPIO_Init+0x1ec>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3f      	ldr	r2, [pc, #252]	; (8002a10 <HAL_GPIO_Init+0x2c4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00d      	beq.n	8002934 <HAL_GPIO_Init+0x1e8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3e      	ldr	r2, [pc, #248]	; (8002a14 <HAL_GPIO_Init+0x2c8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <HAL_GPIO_Init+0x1e4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3d      	ldr	r2, [pc, #244]	; (8002a18 <HAL_GPIO_Init+0x2cc>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_GPIO_Init+0x1e0>
 8002928:	2303      	movs	r3, #3
 800292a:	e006      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 800292c:	2304      	movs	r3, #4
 800292e:	e004      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002930:	2302      	movs	r3, #2
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_GPIO_Init+0x1ee>
 8002938:	2300      	movs	r3, #0
 800293a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293c:	f002 0203 	and.w	r2, r2, #3
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	4093      	lsls	r3, r2
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800294a:	492f      	ldr	r1, [pc, #188]	; (8002a08 <HAL_GPIO_Init+0x2bc>)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d006      	beq.n	8002972 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	492c      	ldr	r1, [pc, #176]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	43db      	mvns	r3, r3
 800297a:	4928      	ldr	r1, [pc, #160]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 800297c:	4013      	ands	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	4922      	ldr	r1, [pc, #136]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	491e      	ldr	r1, [pc, #120]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4918      	ldr	r1, [pc, #96]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029c2:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4914      	ldr	r1, [pc, #80]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d021      	beq.n	8002a20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	490e      	ldr	r1, [pc, #56]	; (8002a1c <HAL_GPIO_Init+0x2d0>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e021      	b.n	8002a2e <HAL_GPIO_Init+0x2e2>
 80029ea:	bf00      	nop
 80029ec:	10320000 	.word	0x10320000
 80029f0:	10310000 	.word	0x10310000
 80029f4:	10220000 	.word	0x10220000
 80029f8:	10210000 	.word	0x10210000
 80029fc:	10120000 	.word	0x10120000
 8002a00:	10110000 	.word	0x10110000
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	40010800 	.word	0x40010800
 8002a10:	40010c00 	.word	0x40010c00
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40011400 	.word	0x40011400
 8002a1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_GPIO_Init+0x304>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4909      	ldr	r1, [pc, #36]	; (8002a50 <HAL_GPIO_Init+0x304>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f ae8e 	bne.w	8002760 <HAL_GPIO_Init+0x14>
  }
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	372c      	adds	r7, #44	; 0x2c
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40010400 	.word	0x40010400

08002a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	807b      	strh	r3, [r7, #2]
 8002a60:	4613      	mov	r3, r2
 8002a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a64:	787b      	ldrb	r3, [r7, #1]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a70:	e003      	b.n	8002a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	041a      	lsls	r2, r3, #16
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e272      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 8087 	beq.w	8002bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa4:	4b92      	ldr	r3, [pc, #584]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d00c      	beq.n	8002aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d112      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aca:	4b89      	ldr	r3, [pc, #548]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d06c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d168      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e24c      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x76>
 8002aec:	4b80      	ldr	r3, [pc, #512]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a7f      	ldr	r2, [pc, #508]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e02e      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x98>
 8002b02:	4b7b      	ldr	r3, [pc, #492]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a7a      	ldr	r2, [pc, #488]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	4b78      	ldr	r3, [pc, #480]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a77      	ldr	r2, [pc, #476]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	e01d      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0xbc>
 8002b26:	4b72      	ldr	r3, [pc, #456]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a71      	ldr	r2, [pc, #452]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b30:	6013      	str	r3, [r2, #0]
 8002b32:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xd4>
 8002b40:	4b6b      	ldr	r3, [pc, #428]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b68      	ldr	r3, [pc, #416]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a67      	ldr	r2, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff fc06 	bl	8002370 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b68:	f7ff fc02 	bl	8002370 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b64      	cmp	r3, #100	; 0x64
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e200      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0xe4>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7ff fbf2 	bl	8002370 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b90:	f7ff fbee 	bl	8002370 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1ec      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x10c>
 8002bae:	e000      	b.n	8002bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d063      	beq.n	8002c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bca:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d11c      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
 8002bd6:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d116      	bne.n	8002c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	4b43      	ldr	r3, [pc, #268]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e1c0      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	e03a      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c18:	4b36      	ldr	r3, [pc, #216]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1e:	f7ff fba7 	bl	8002370 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7ff fba3 	bl	8002370 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e1a1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4927      	ldr	r1, [pc, #156]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	600b      	str	r3, [r1, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff fb86 	bl	8002370 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c68:	f7ff fb82 	bl	8002370 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e180      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7a:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d03a      	beq.n	8002d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fb66 	bl	8002370 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff fb62 	bl	8002370 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e160      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cba:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f0      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f000 face 	bl	8003268 <RCC_Delay>
 8002ccc:	e01c      	b.n	8002d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd4:	f7ff fb4c 	bl	8002370 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7ff fb48 	bl	8002370 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e146      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	42420000 	.word	0x42420000
 8002cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cfc:	4b92      	ldr	r3, [pc, #584]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e9      	bne.n	8002cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80a6 	beq.w	8002e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	4a87      	ldr	r2, [pc, #540]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d30:	61d3      	str	r3, [r2, #28]
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	4b82      	ldr	r3, [pc, #520]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d118      	bne.n	8002d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4e:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7e      	ldr	r2, [pc, #504]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d5a:	f7ff fb09 	bl	8002370 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7ff fb05 	bl	8002370 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	; 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e103      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b75      	ldr	r3, [pc, #468]	; (8002f4c <HAL_RCC_OscConfig+0x4c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x312>
 8002d88:	4b6f      	ldr	r3, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e02d      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x334>
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	4a69      	ldr	r2, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	6213      	str	r3, [r2, #32]
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	4a66      	ldr	r2, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f023 0304 	bic.w	r3, r3, #4
 8002db4:	6213      	str	r3, [r2, #32]
 8002db6:	e01c      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	d10c      	bne.n	8002dda <HAL_RCC_OscConfig+0x356>
 8002dc0:	4b61      	ldr	r3, [pc, #388]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	4a60      	ldr	r2, [pc, #384]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6213      	str	r3, [r2, #32]
 8002dcc:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6213      	str	r3, [r2, #32]
 8002dd8:	e00b      	b.n	8002df2 <HAL_RCC_OscConfig+0x36e>
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a5a      	ldr	r2, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	6213      	str	r3, [r2, #32]
 8002de6:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d015      	beq.n	8002e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7ff fab9 	bl	8002370 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7ff fab5 	bl	8002370 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e0b1      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ee      	beq.n	8002e02 <HAL_RCC_OscConfig+0x37e>
 8002e24:	e014      	b.n	8002e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7ff faa3 	bl	8002370 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	e00a      	b.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff fa9f 	bl	8002370 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e09b      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	4b40      	ldr	r3, [pc, #256]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e56:	4b3c      	ldr	r3, [pc, #240]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a3b      	ldr	r2, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d146      	bne.n	8002f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e80:	4b33      	ldr	r3, [pc, #204]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff fa73 	bl	8002370 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7ff fa6f 	bl	8002370 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e06d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f0      	bne.n	8002e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	4921      	ldr	r1, [pc, #132]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a19      	ldr	r1, [r3, #32]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	430b      	orrs	r3, r1
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7ff fa43 	bl	8002370 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eee:	f7ff fa3f 	bl	8002370 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e03d      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x46a>
 8002f0c:	e035      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7ff fa2c 	bl	8002370 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7ff fa28 	bl	8002370 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e026      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x498>
 8002f3a:	e01e      	b.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e019      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <HAL_RCC_OscConfig+0x500>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d001      	beq.n	8002f7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40021000 	.word	0x40021000

08002f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0d0      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d910      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 0207 	bic.w	r2, r3, #7
 8002fb2:	4965      	ldr	r1, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d040      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	4b41      	ldr	r3, [pc, #260]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e073      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003056:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4936      	ldr	r1, [pc, #216]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7ff f97a 	bl	8002370 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7ff f976 	bl	8002370 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e053      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b2d      	ldr	r3, [pc, #180]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d210      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0207 	bic.w	r2, r3, #7
 80030be:	4922      	ldr	r1, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1c0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4602      	mov	r2, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	490a      	ldr	r1, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	fa22 f303 	lsr.w	r3, r2, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1cc>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1d0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f8d8 	bl	80022ec <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08008784 	.word	0x08008784
 8003154:	20000014 	.word	0x20000014
 8003158:	20000018 	.word	0x20000018

0800315c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	2300      	movs	r3, #0
 8003170:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b04      	cmp	r3, #4
 8003184:	d002      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x30>
 8003186:	2b08      	cmp	r3, #8
 8003188:	d003      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x36>
 800318a:	e027      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800318e:	613b      	str	r3, [r7, #16]
      break;
 8003190:	e027      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	0c9b      	lsrs	r3, r3, #18
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a17      	ldr	r2, [pc, #92]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	4a11      	ldr	r2, [pc, #68]	; (80031fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031be:	fb03 f202 	mul.w	r2, r3, r2
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	e004      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	613b      	str	r3, [r7, #16]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80031de:	613b      	str	r3, [r7, #16]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	693b      	ldr	r3, [r7, #16]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	007a1200 	.word	0x007a1200
 80031f8:	0800879c 	.word	0x0800879c
 80031fc:	080087ac 	.word	0x080087ac
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000014 	.word	0x20000014

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08008794 	.word	0x08008794

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffde 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08008794 	.word	0x08008794

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000014 	.word	0x20000014
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e041      	b.n	800333a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fe24 	bl	8001f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 feb6 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d001      	beq.n	800335c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e032      	b.n	80033c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <HAL_TIM_Base_Start+0x88>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_TIM_Base_Start+0x48>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d009      	beq.n	800338c <HAL_TIM_Base_Start+0x48>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_TIM_Base_Start+0x8c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_TIM_Base_Start+0x48>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_TIM_Base_Start+0x90>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d111      	bne.n	80033b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 0307 	and.w	r3, r3, #7
 8003396:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d010      	beq.n	80033c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0201 	orr.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	e007      	b.n	80033c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800

080033d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d001      	beq.n	80033f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e03a      	b.n	8003466 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_TIM_Base_Start_IT+0x98>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00e      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d009      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_TIM_Base_Start_IT+0x9c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x58>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a13      	ldr	r2, [pc, #76]	; (8003478 <HAL_TIM_Base_Start_IT+0xa0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d111      	bne.n	8003454 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b06      	cmp	r3, #6
 8003440:	d010      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 0201 	orr.w	r2, r2, #1
 8003450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003452:	e007      	b.n	8003464 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800

0800347c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e041      	b.n	8003512 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f839 	bl	800351a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f000 fdca 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_TIM_PWM_Start+0x24>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	e022      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d109      	bne.n	800356a <HAL_TIM_PWM_Start+0x3e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e015      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d109      	bne.n	8003584 <HAL_TIM_PWM_Start+0x58>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e008      	b.n	8003596 <HAL_TIM_PWM_Start+0x6a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e05e      	b.n	800365c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d104      	bne.n	80035ae <HAL_TIM_PWM_Start+0x82>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ac:	e013      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x92>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035bc:	e00b      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0xa2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035cc:	e003      	b.n	80035d6 <HAL_TIM_PWM_Start+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2201      	movs	r2, #1
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 f8c5 	bl	800476e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_TIM_PWM_Start+0x138>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d107      	bne.n	80035fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_TIM_PWM_Start+0x138>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d009      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_PWM_Start+0x13c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_TIM_PWM_Start+0xfa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <HAL_TIM_PWM_Start+0x140>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d111      	bne.n	800364a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d010      	beq.n	800365a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	e007      	b.n	800365a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800

08003670 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e041      	b.n	8003706 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f839 	bl	800370e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4619      	mov	r1, r3
 80036ae:	4610      	mov	r0, r2
 80036b0:	f000 fcd0 	bl	8004054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372a:	2300      	movs	r3, #0
 800372c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <HAL_TIM_IC_Start_IT+0x1e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e013      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x46>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d104      	bne.n	800374e <HAL_TIM_IC_Start_IT+0x2e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800374a:	b2db      	uxtb	r3, r3
 800374c:	e00b      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x46>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d104      	bne.n	800375e <HAL_TIM_IC_Start_IT+0x3e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e003      	b.n	8003766 <HAL_TIM_IC_Start_IT+0x46>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d104      	bne.n	8003778 <HAL_TIM_IC_Start_IT+0x58>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e013      	b.n	80037a0 <HAL_TIM_IC_Start_IT+0x80>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b04      	cmp	r3, #4
 800377c:	d104      	bne.n	8003788 <HAL_TIM_IC_Start_IT+0x68>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e00b      	b.n	80037a0 <HAL_TIM_IC_Start_IT+0x80>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d104      	bne.n	8003798 <HAL_TIM_IC_Start_IT+0x78>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003794:	b2db      	uxtb	r3, r3
 8003796:	e003      	b.n	80037a0 <HAL_TIM_IC_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037a2:	7bbb      	ldrb	r3, [r7, #14]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d102      	bne.n	80037ae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037a8:	7b7b      	ldrb	r3, [r7, #13]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d001      	beq.n	80037b2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e0b8      	b.n	8003924 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_IC_Start_IT+0xa2>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	e013      	b.n	80037ea <HAL_TIM_IC_Start_IT+0xca>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_IT+0xb2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	e00b      	b.n	80037ea <HAL_TIM_IC_Start_IT+0xca>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_IC_Start_IT+0xc2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	e003      	b.n	80037ea <HAL_TIM_IC_Start_IT+0xca>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_IC_Start_IT+0xda>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f8:	e013      	b.n	8003822 <HAL_TIM_IC_Start_IT+0x102>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d104      	bne.n	800380a <HAL_TIM_IC_Start_IT+0xea>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	e00b      	b.n	8003822 <HAL_TIM_IC_Start_IT+0x102>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d104      	bne.n	800381a <HAL_TIM_IC_Start_IT+0xfa>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003818:	e003      	b.n	8003822 <HAL_TIM_IC_Start_IT+0x102>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2202      	movs	r2, #2
 800381e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d841      	bhi.n	80038ac <HAL_TIM_IC_Start_IT+0x18c>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <HAL_TIM_IC_Start_IT+0x110>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003865 	.word	0x08003865
 8003834:	080038ad 	.word	0x080038ad
 8003838:	080038ad 	.word	0x080038ad
 800383c:	080038ad 	.word	0x080038ad
 8003840:	08003877 	.word	0x08003877
 8003844:	080038ad 	.word	0x080038ad
 8003848:	080038ad 	.word	0x080038ad
 800384c:	080038ad 	.word	0x080038ad
 8003850:	08003889 	.word	0x08003889
 8003854:	080038ad 	.word	0x080038ad
 8003858:	080038ad 	.word	0x080038ad
 800385c:	080038ad 	.word	0x080038ad
 8003860:	0800389b 	.word	0x0800389b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0202 	orr.w	r2, r2, #2
 8003872:	60da      	str	r2, [r3, #12]
      break;
 8003874:	e01d      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f042 0204 	orr.w	r2, r2, #4
 8003884:	60da      	str	r2, [r3, #12]
      break;
 8003886:	e014      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f042 0208 	orr.w	r2, r2, #8
 8003896:	60da      	str	r2, [r3, #12]
      break;
 8003898:	e00b      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0210 	orr.w	r2, r2, #16
 80038a8:	60da      	str	r2, [r3, #12]
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d134      	bne.n	8003922 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	6839      	ldr	r1, [r7, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 ff54 	bl	800476e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_IC_Start_IT+0x20c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIM_IC_Start_IT+0x1ce>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d009      	beq.n	80038ee <HAL_TIM_IC_Start_IT+0x1ce>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <HAL_TIM_IC_Start_IT+0x210>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIM_IC_Start_IT+0x1ce>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <HAL_TIM_IC_Start_IT+0x214>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	d010      	beq.n	8003922 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0201 	orr.w	r2, r2, #1
 800390e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003910:	e007      	b.n	8003922 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 0201 	orr.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40000400 	.word	0x40000400
 8003934:	40000800 	.word	0x40000800

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b02      	cmp	r3, #2
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0202 	mvn.w	r2, #2
 8003964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fcd8 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fb4a 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb50 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d122      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d11b      	bne.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd fcae 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fb20 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fb26 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d122      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d11b      	bne.n	8003a3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0208 	mvn.w	r2, #8
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fc84 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 faf6 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fafc 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d122      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d11b      	bne.n	8003a90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f06f 0210 	mvn.w	r2, #16
 8003a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2208      	movs	r2, #8
 8003a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7fd fc5a 	bl	8001330 <HAL_TIM_IC_CaptureCallback>
 8003a7c:	e005      	b.n	8003a8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 facc 	bl	800401c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fad2 	bl	800402e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f06f 0201 	mvn.w	r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fd fbb2 	bl	8001220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac6:	2b80      	cmp	r3, #128	; 0x80
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fecf 	bl	8004886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa96 	bl	8004040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fe9a 	bl	8004874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e088      	b.n	8003c78 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b84:	f000 fc50 	bl	8004428 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 020c 	bic.w	r2, r2, #12
 8003b96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
 8003baa:	e060      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d11c      	bne.n	8003bec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bc2:	f000 fcb9 	bl	8004538 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bd4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6999      	ldr	r1, [r3, #24]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	021a      	lsls	r2, r3, #8
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	619a      	str	r2, [r3, #24]
 8003bea:	e040      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d11b      	bne.n	8003c2a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c02:	f000 fd04 	bl	800460e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 020c 	bic.w	r2, r2, #12
 8003c14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69d9      	ldr	r1, [r3, #28]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	61da      	str	r2, [r3, #28]
 8003c28:	e021      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b0c      	cmp	r3, #12
 8003c2e:	d11c      	bne.n	8003c6a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c40:	f000 fd20 	bl	8004684 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003c52:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69d9      	ldr	r1, [r3, #28]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	021a      	lsls	r2, r3, #8
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	61da      	str	r2, [r3, #28]
 8003c68:	e001      	b.n	8003c6e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e0ae      	b.n	8003dfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	f200 809f 	bhi.w	8003dec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cae:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb4:	08003ce9 	.word	0x08003ce9
 8003cb8:	08003ded 	.word	0x08003ded
 8003cbc:	08003ded 	.word	0x08003ded
 8003cc0:	08003ded 	.word	0x08003ded
 8003cc4:	08003d29 	.word	0x08003d29
 8003cc8:	08003ded 	.word	0x08003ded
 8003ccc:	08003ded 	.word	0x08003ded
 8003cd0:	08003ded 	.word	0x08003ded
 8003cd4:	08003d6b 	.word	0x08003d6b
 8003cd8:	08003ded 	.word	0x08003ded
 8003cdc:	08003ded 	.word	0x08003ded
 8003ce0:	08003ded 	.word	0x08003ded
 8003ce4:	08003dab 	.word	0x08003dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fa12 	bl	8004118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0208 	orr.w	r2, r2, #8
 8003d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6999      	ldr	r1, [r3, #24]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	619a      	str	r2, [r3, #24]
      break;
 8003d26:	e064      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa58 	bl	80041e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6999      	ldr	r1, [r3, #24]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	021a      	lsls	r2, r3, #8
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	619a      	str	r2, [r3, #24]
      break;
 8003d68:	e043      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 faa1 	bl	80042b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0208 	orr.w	r2, r2, #8
 8003d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69da      	ldr	r2, [r3, #28]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0204 	bic.w	r2, r2, #4
 8003d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69d9      	ldr	r1, [r3, #28]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	61da      	str	r2, [r3, #28]
      break;
 8003da8:	e023      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 faeb 	bl	800438c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69da      	ldr	r2, [r3, #28]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	021a      	lsls	r2, r3, #8
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	61da      	str	r2, [r3, #28]
      break;
 8003dea:	e002      	b.n	8003df2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	75fb      	strb	r3, [r7, #23]
      break;
 8003df0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x1c>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b4      	b.n	8003f8a <HAL_TIM_ConfigClockSource+0x186>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	f000 8086 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x172>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xa6>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x11a>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xfa>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x13a>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eba:	f000 fc39 	bl	8004730 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]
      break;
 8003ed6:	e04f      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee8:	f000 fc22 	bl	8004730 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
      break;
 8003efc:	e03c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 fae6 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fbf0 	bl	80046fc <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e02c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fb40 	bl	80045b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fbe0 	bl	80046fc <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e01c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fac6 	bl	80044dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fbd0 	bl	80046fc <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e00c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fbc7 	bl	80046fc <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e003      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e000      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b0c      	cmp	r3, #12
 8003fa6:	d831      	bhi.n	800400c <HAL_TIM_ReadCapturedValue+0x78>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe5 	.word	0x08003fe5
 8003fb4:	0800400d 	.word	0x0800400d
 8003fb8:	0800400d 	.word	0x0800400d
 8003fbc:	0800400d 	.word	0x0800400d
 8003fc0:	08003fef 	.word	0x08003fef
 8003fc4:	0800400d 	.word	0x0800400d
 8003fc8:	0800400d 	.word	0x0800400d
 8003fcc:	0800400d 	.word	0x0800400d
 8003fd0:	08003ff9 	.word	0x08003ff9
 8003fd4:	0800400d 	.word	0x0800400d
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	0800400d 	.word	0x0800400d
 8003fe0:	08004003 	.word	0x08004003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	60fb      	str	r3, [r7, #12]

      break;
 8003fec:	e00f      	b.n	800400e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	60fb      	str	r3, [r7, #12]

      break;
 8003ff6:	e00a      	b.n	800400e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	60fb      	str	r3, [r7, #12]

      break;
 8004000:	e005      	b.n	800400e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004008:	60fb      	str	r3, [r7, #12]

      break;
 800400a:	e000      	b.n	800400e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800400c:	bf00      	nop
  }

  return tmpreg;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop

0800401c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr
	...

08004054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a29      	ldr	r2, [pc, #164]	; (800410c <TIM_Base_SetConfig+0xb8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00b      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d007      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a26      	ldr	r2, [pc, #152]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_Base_SetConfig+0x30>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a25      	ldr	r2, [pc, #148]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d108      	bne.n	8004096 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1c      	ldr	r2, [pc, #112]	; (800410c <TIM_Base_SetConfig+0xb8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d007      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a19      	ldr	r2, [pc, #100]	; (8004110 <TIM_Base_SetConfig+0xbc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_Base_SetConfig+0x62>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a18      	ldr	r2, [pc, #96]	; (8004114 <TIM_Base_SetConfig+0xc0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d108      	bne.n	80040c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <TIM_Base_SetConfig+0xb8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800

08004118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f023 0201 	bic.w	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0303 	bic.w	r3, r3, #3
 800414e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0302 	bic.w	r3, r3, #2
 8004160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a1c      	ldr	r2, [pc, #112]	; (80041e0 <TIM_OC1_SetConfig+0xc8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d10c      	bne.n	800418e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0308 	bic.w	r3, r3, #8
 800417a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0304 	bic.w	r3, r3, #4
 800418c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <TIM_OC1_SetConfig+0xc8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d111      	bne.n	80041ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	621a      	str	r2, [r3, #32]
}
 80041d4:	bf00      	nop
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40012c00 	.word	0x40012c00

080041e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 0210 	bic.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	021b      	lsls	r3, r3, #8
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f023 0320 	bic.w	r3, r3, #32
 800422e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <TIM_OC2_SetConfig+0xd0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10d      	bne.n	8004260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a14      	ldr	r2, [pc, #80]	; (80042b4 <TIM_OC2_SetConfig+0xd0>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d113      	bne.n	8004290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800426e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	40012c00 	.word	0x40012c00

080042b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <TIM_OC3_SetConfig+0xd0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10d      	bne.n	8004332 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800431c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <TIM_OC3_SetConfig+0xd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d113      	bne.n	8004362 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	621a      	str	r2, [r3, #32]
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	40012c00 	.word	0x40012c00

0800438c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0f      	ldr	r2, [pc, #60]	; (8004424 <TIM_OC4_SetConfig+0x98>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d109      	bne.n	8004400 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr
 8004424:	40012c00 	.word	0x40012c00

08004428 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	f023 0201 	bic.w	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <TIM_TI1_SetConfig+0xa8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_TI1_SetConfig+0x46>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d007      	beq.n	800446e <TIM_TI1_SetConfig+0x46>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <TIM_TI1_SetConfig+0xac>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_TI1_SetConfig+0x46>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <TIM_TI1_SetConfig+0xb0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <TIM_TI1_SetConfig+0x4a>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <TIM_TI1_SetConfig+0x4c>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e003      	b.n	8004492 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f023 030a 	bic.w	r3, r3, #10
 80044ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f003 030a 	and.w	r3, r3, #10
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	621a      	str	r2, [r3, #32]
}
 80044c6:	bf00      	nop
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 030a 	bic.w	r3, r3, #10
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr

08004538 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f023 0210 	bic.w	r2, r3, #16
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	031b      	lsls	r3, r3, #12
 800457c:	b29b      	uxth	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800458a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0210 	bic.w	r2, r3, #16
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	031b      	lsls	r3, r3, #12
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800460e:	b480      	push	{r7}
 8004610:	b087      	sub	sp, #28
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	b2db      	uxtb	r3, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800465e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	021b      	lsls	r3, r3, #8
 8004664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	621a      	str	r2, [r3, #32]
}
 800467a:	bf00      	nop
 800467c:	371c      	adds	r7, #28
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	031b      	lsls	r3, r3, #12
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046d6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	031b      	lsls	r3, r3, #12
 80046dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	621a      	str	r2, [r3, #32]
}
 80046f2:	bf00      	nop
 80046f4:	371c      	adds	r7, #28
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	f043 0307 	orr.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	609a      	str	r2, [r3, #8]
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
 800473c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800474a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	431a      	orrs	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4313      	orrs	r3, r2
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr

0800476e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800476e:	b480      	push	{r7}
 8004770:	b087      	sub	sp, #28
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 031f 	and.w	r3, r3, #31
 8004780:	2201      	movs	r2, #1
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a1a      	ldr	r2, [r3, #32]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	43db      	mvns	r3, r3
 8004790:	401a      	ands	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	431a      	orrs	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	621a      	str	r2, [r3, #32]
}
 80047ac:	bf00      	nop
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e046      	b.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00e      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d009      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d004      	beq.n	8004832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a10      	ldr	r2, [pc, #64]	; (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10c      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr
 8004868:	40012c00 	.word	0x40012c00
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800

08004874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e042      	b.n	8004930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fd fc36 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fcd5 	bl	800528c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	d112      	bne.n	8004978 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d002      	beq.n	800495e <HAL_UART_Receive_IT+0x26>
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e00b      	b.n	800497a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004968:	88fb      	ldrh	r3, [r7, #6]
 800496a:	461a      	mov	r2, r3
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fab7 	bl	8004ee2 <UART_Start_Receive_IT>
 8004974:	4603      	mov	r3, r0
 8004976:	e000      	b.n	800497a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b0ba      	sub	sp, #232	; 0xe8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80049c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10f      	bne.n	80049ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_UART_IRQHandler+0x66>
 80049d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049da:	f003 0320 	and.w	r3, r3, #32
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fb93 	bl	800510e <UART_Receive_IT>
      return;
 80049e8:	e25b      	b.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80de 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x22c>
 80049f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80d1 	beq.w	8004bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00b      	beq.n	8004a32 <HAL_UART_IRQHandler+0xae>
 8004a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	f043 0201 	orr.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <HAL_UART_IRQHandler+0xd2>
 8004a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4e:	f043 0202 	orr.w	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HAL_UART_IRQHandler+0xf6>
 8004a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0204 	orr.w	r2, r3, #4
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <HAL_UART_IRQHandler+0x126>
 8004a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8a:	f003 0320 	and.w	r3, r3, #32
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	f043 0208 	orr.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 81f2 	beq.w	8004e98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x14e>
 8004ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb1e 	bl	800510e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <HAL_UART_IRQHandler+0x17a>
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d04f      	beq.n	8004b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa28 	bl	8004f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d041      	beq.n	8004b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3314      	adds	r3, #20
 8004b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1d9      	bne.n	8004b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d013      	beq.n	8004b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	4a7e      	ldr	r2, [pc, #504]	; (8004d64 <HAL_UART_IRQHandler+0x3e0>)
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd fd72 	bl	800265c <HAL_DMA_Abort_IT>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	e00e      	b.n	8004bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f993 	bl	8004eba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b94:	e00a      	b.n	8004bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f98f 	bl	8004eba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	e006      	b.n	8004bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f98b 	bl	8004eba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004baa:	e175      	b.n	8004e98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	bf00      	nop
    return;
 8004bae:	e173      	b.n	8004e98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 814f 	bne.w	8004e58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8148 	beq.w	8004e58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8141 	beq.w	8004e58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	60bb      	str	r3, [r7, #8]
 8004bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80b6 	beq.w	8004d68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8145 	beq.w	8004e9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	f080 813e 	bcs.w	8004e9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	f000 8088 	beq.w	8004d44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c60:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c70:	e841 2300 	strex	r3, r2, [r1]
 8004c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1d9      	bne.n	8004c34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3314      	adds	r3, #20
 8004c86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ca4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e1      	bne.n	8004c80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ce0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ce2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ce6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d14:	f023 0310 	bic.w	r3, r3, #16
 8004d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d26:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e3      	bne.n	8004d02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fd fc51 	bl	80025e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8b6 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d60:	e09c      	b.n	8004e9c <HAL_UART_IRQHandler+0x518>
 8004d62:	bf00      	nop
 8004d64:	08005019 	.word	0x08005019
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 808e 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8089 	beq.w	8004ea0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	330c      	adds	r3, #12
 8004d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004db2:	647a      	str	r2, [r7, #68]	; 0x44
 8004db4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1e3      	bne.n	8004d8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f023 0301 	bic.w	r3, r3, #1
 8004ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3314      	adds	r3, #20
 8004de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dea:	633a      	str	r2, [r7, #48]	; 0x30
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e3      	bne.n	8004dc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	330c      	adds	r3, #12
 8004e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	e853 3f00 	ldrex	r3, [r3]
 8004e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0310 	bic.w	r3, r3, #16
 8004e22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e30:	61fa      	str	r2, [r7, #28]
 8004e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e3      	bne.n	8004e0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f83b 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e56:	e023      	b.n	8004ea0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <HAL_UART_IRQHandler+0x4f4>
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8e5 	bl	8005040 <UART_Transmit_IT>
    return;
 8004e76:	e014      	b.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f924 	bl	80050de <UART_EndTransmit_IT>
    return;
 8004e96:	e004      	b.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e98:	bf00      	nop
 8004e9a:	e002      	b.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ea0:	bf00      	nop
  }
}
 8004ea2:	37e8      	adds	r7, #232	; 0xe8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr

08004eba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b085      	sub	sp, #20
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	4613      	mov	r3, r2
 8004eee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	88fa      	ldrh	r2, [r7, #6]
 8004efa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2222      	movs	r2, #34	; 0x22
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d007      	beq.n	8004f28 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f26:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0201 	orr.w	r2, r2, #1
 8004f36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0220 	orr.w	r2, r2, #32
 8004f46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b095      	sub	sp, #84	; 0x54
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	330c      	adds	r3, #12
 8004f7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f7c:	643a      	str	r2, [r7, #64]	; 0x40
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e5      	bne.n	8004f5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d119      	bne.n	8005000 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f023 0310 	bic.w	r3, r3, #16
 8004fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fec:	61ba      	str	r2, [r7, #24]
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6979      	ldr	r1, [r7, #20]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800500e:	bf00      	nop
 8005010:	3754      	adds	r7, #84	; 0x54
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff ff41 	bl	8004eba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005038:	bf00      	nop
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b21      	cmp	r3, #33	; 0x21
 8005052:	d13e      	bne.n	80050d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d114      	bne.n	8005088 <UART_Transmit_IT+0x48>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d110      	bne.n	8005088 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	881b      	ldrh	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800507a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	1c9a      	adds	r2, r3, #2
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]
 8005086:	e008      	b.n	800509a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	1c59      	adds	r1, r3, #1
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6211      	str	r1, [r2, #32]
 8005092:	781a      	ldrb	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4619      	mov	r1, r3
 80050a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10f      	bne.n	80050ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	bc80      	pop	{r7}
 80050dc:	4770      	bx	lr

080050de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fed2 	bl	8004ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08c      	sub	sp, #48	; 0x30
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	f040 80ae 	bne.w	8005280 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d117      	bne.n	800515e <UART_Receive_IT+0x50>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d113      	bne.n	800515e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514c:	b29a      	uxth	r2, r3
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28
 800515c:	e026      	b.n	80051ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005170:	d007      	beq.n	8005182 <UART_Receive_IT+0x74>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <UART_Receive_IT+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	e008      	b.n	80051a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	4619      	mov	r1, r3
 80051ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d15d      	bne.n	800527c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0220 	bic.w	r2, r2, #32
 80051ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0201 	bic.w	r2, r2, #1
 80051ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	2b01      	cmp	r3, #1
 8005204:	d135      	bne.n	8005272 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	613b      	str	r3, [r7, #16]
   return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	330c      	adds	r3, #12
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	623a      	str	r2, [r7, #32]
 800522e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	61bb      	str	r3, [r7, #24]
   return(result);
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e5      	bne.n	800520c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0310 	and.w	r3, r3, #16
 800524a:	2b10      	cmp	r3, #16
 800524c:	d10a      	bne.n	8005264 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800524e:	2300      	movs	r3, #0
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fe2e 	bl	8004ecc <HAL_UARTEx_RxEventCallback>
 8005270:	e002      	b.n	8005278 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc fd32 	bl	8001cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e002      	b.n	8005282 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3730      	adds	r7, #48	; 0x30
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80052c6:	f023 030c 	bic.w	r3, r3, #12
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	430b      	orrs	r3, r1
 80052d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2c      	ldr	r2, [pc, #176]	; (80053a0 <UART_SetConfig+0x114>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80052f4:	f7fd ffa4 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	e002      	b.n	8005302 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80052fc:	f7fd ff8c 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8005300:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4613      	mov	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4413      	add	r3, r2
 800530a:	009a      	lsls	r2, r3, #2
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <UART_SetConfig+0x118>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	0119      	lsls	r1, r3, #4
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	009a      	lsls	r2, r3, #2
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	fbb2 f2f3 	udiv	r2, r2, r3
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <UART_SetConfig+0x118>)
 800533a:	fba3 0302 	umull	r0, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2064      	movs	r0, #100	; 0x64
 8005342:	fb00 f303 	mul.w	r3, r0, r3
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a15      	ldr	r2, [pc, #84]	; (80053a4 <UART_SetConfig+0x118>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005358:	4419      	add	r1, r3
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	009a      	lsls	r2, r3, #2
 8005364:	441a      	add	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005370:	4b0c      	ldr	r3, [pc, #48]	; (80053a4 <UART_SetConfig+0x118>)
 8005372:	fba3 0302 	umull	r0, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2064      	movs	r0, #100	; 0x64
 800537a:	fb00 f303 	mul.w	r3, r0, r3
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	3332      	adds	r3, #50	; 0x32
 8005384:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <UART_SetConfig+0x118>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	440a      	add	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40013800 	.word	0x40013800
 80053a4:	51eb851f 	.word	0x51eb851f

080053a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053ae:	f3ef 8305 	mrs	r3, IPSR
 80053b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10f      	bne.n	80053da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	607b      	str	r3, [r7, #4]
  return(result);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <osKernelInitialize+0x32>
 80053c6:	4b10      	ldr	r3, [pc, #64]	; (8005408 <osKernelInitialize+0x60>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d109      	bne.n	80053e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053ce:	f3ef 8311 	mrs	r3, BASEPRI
 80053d2:	603b      	str	r3, [r7, #0]
  return(result);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80053da:	f06f 0305 	mvn.w	r3, #5
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	e00c      	b.n	80053fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <osKernelInitialize+0x60>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <osKernelInitialize+0x60>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e002      	b.n	80053fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80053f6:	f04f 33ff 	mov.w	r3, #4294967295
 80053fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	bc80      	pop	{r7}
 8005406:	4770      	bx	lr
 8005408:	20000434 	.word	0x20000434

0800540c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005412:	f3ef 8305 	mrs	r3, IPSR
 8005416:	60bb      	str	r3, [r7, #8]
  return(result);
 8005418:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541e:	f3ef 8310 	mrs	r3, PRIMASK
 8005422:	607b      	str	r3, [r7, #4]
  return(result);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <osKernelStart+0x32>
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <osKernelStart+0x64>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d109      	bne.n	8005446 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005432:	f3ef 8311 	mrs	r3, BASEPRI
 8005436:	603b      	str	r3, [r7, #0]
  return(result);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <osKernelStart+0x3a>
    stat = osErrorISR;
 800543e:	f06f 0305 	mvn.w	r3, #5
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e00e      	b.n	8005464 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005446:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <osKernelStart+0x64>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d107      	bne.n	800545e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <osKernelStart+0x64>)
 8005450:	2202      	movs	r2, #2
 8005452:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005454:	f001 fb58 	bl	8006b08 <vTaskStartScheduler>
      stat = osOK;
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	e002      	b.n	8005464 <osKernelStart+0x58>
    } else {
      stat = osError;
 800545e:	f04f 33ff 	mov.w	r3, #4294967295
 8005462:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005464:	68fb      	ldr	r3, [r7, #12]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20000434 	.word	0x20000434

08005474 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b092      	sub	sp, #72	; 0x48
 8005478:	af04      	add	r7, sp, #16
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005484:	f3ef 8305 	mrs	r3, IPSR
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800548c:	2b00      	cmp	r3, #0
 800548e:	f040 8094 	bne.w	80055ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005492:	f3ef 8310 	mrs	r3, PRIMASK
 8005496:	623b      	str	r3, [r7, #32]
  return(result);
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 808d 	bne.w	80055ba <osThreadNew+0x146>
 80054a0:	4b48      	ldr	r3, [pc, #288]	; (80055c4 <osThreadNew+0x150>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d106      	bne.n	80054b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f040 8082 	bne.w	80055ba <osThreadNew+0x146>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d07e      	beq.n	80055ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80054bc:	2380      	movs	r3, #128	; 0x80
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80054c0:	2318      	movs	r3, #24
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80054c4:	2300      	movs	r3, #0
 80054c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80054c8:	f107 031b 	add.w	r3, r7, #27
 80054cc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d045      	beq.n	8005566 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <osThreadNew+0x74>
        name = attr->name;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <osThreadNew+0x9a>
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	2b38      	cmp	r3, #56	; 0x38
 8005500:	d805      	bhi.n	800550e <osThreadNew+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <osThreadNew+0x9e>
        return (NULL);
 800550e:	2300      	movs	r3, #0
 8005510:	e054      	b.n	80055bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	089b      	lsrs	r3, r3, #2
 8005520:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00e      	beq.n	8005548 <osThreadNew+0xd4>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2ba7      	cmp	r3, #167	; 0xa7
 8005530:	d90a      	bls.n	8005548 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005536:	2b00      	cmp	r3, #0
 8005538:	d006      	beq.n	8005548 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <osThreadNew+0xd4>
        mem = 1;
 8005542:	2301      	movs	r3, #1
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
 8005546:	e010      	b.n	800556a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <osThreadNew+0xf6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d108      	bne.n	800556a <osThreadNew+0xf6>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <osThreadNew+0xf6>
          mem = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	62bb      	str	r3, [r7, #40]	; 0x28
 8005564:	e001      	b.n	800556a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005566:	2300      	movs	r3, #0
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	2b01      	cmp	r3, #1
 800556e:	d110      	bne.n	8005592 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005578:	9202      	str	r2, [sp, #8]
 800557a:	9301      	str	r3, [sp, #4]
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005584:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f001 f90e 	bl	80067a8 <xTaskCreateStatic>
 800558c:	4603      	mov	r3, r0
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e013      	b.n	80055ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	b29a      	uxth	r2, r3
 800559c:	f107 0314 	add.w	r3, r7, #20
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 f958 	bl	8006860 <xTaskCreate>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d001      	beq.n	80055ba <osThreadNew+0x146>
          hTask = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3738      	adds	r7, #56	; 0x38
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000434 	.word	0x20000434

080055c8 <osEventFlagsSet>:
  }

  return ((osEventFlagsId_t)hEventGroup);
}

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <osEventFlagsSet+0x1e>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80055e6:	f06f 0303 	mvn.w	r3, #3
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	e03a      	b.n	8005664 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055ee:	f3ef 8305 	mrs	r3, IPSR
 80055f2:	617b      	str	r3, [r7, #20]
  return(result);
 80055f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fa:	f3ef 8310 	mrs	r3, PRIMASK
 80055fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <osEventFlagsSet+0x52>
 8005606:	4b1a      	ldr	r3, [pc, #104]	; (8005670 <osEventFlagsSet+0xa8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d123      	bne.n	8005656 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800560e:	f3ef 8311 	mrs	r3, BASEPRI
 8005612:	60fb      	str	r3, [r7, #12]
  return(result);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d01d      	beq.n	8005656 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800561e:	f107 0308 	add.w	r3, r7, #8
 8005622:	461a      	mov	r2, r3
 8005624:	6839      	ldr	r1, [r7, #0]
 8005626:	69b8      	ldr	r0, [r7, #24]
 8005628:	f000 fb16 	bl	8005c58 <xEventGroupSetBitsFromISR>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8005632:	f06f 0302 	mvn.w	r3, #2
 8005636:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005638:	e013      	b.n	8005662 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00e      	beq.n	8005662 <osEventFlagsSet+0x9a>
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <osEventFlagsSet+0xac>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005654:	e005      	b.n	8005662 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	69b8      	ldr	r0, [r7, #24]
 800565a:	f000 fa36 	bl	8005aca <xEventGroupSetBits>
 800565e:	61f8      	str	r0, [r7, #28]
 8005660:	e000      	b.n	8005664 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8005662:	bf00      	nop
  }

  return (rflags);
 8005664:	69fb      	ldr	r3, [r7, #28]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000434 	.word	0x20000434
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <osEventFlagsClear+0x1e>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005696:	f06f 0303 	mvn.w	r3, #3
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e029      	b.n	80056f2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800569e:	f3ef 8305 	mrs	r3, IPSR
 80056a2:	617b      	str	r3, [r7, #20]
  return(result);
 80056a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10f      	bne.n	80056ca <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056aa:	f3ef 8310 	mrs	r3, PRIMASK
 80056ae:	613b      	str	r3, [r7, #16]
  return(result);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <osEventFlagsClear+0x52>
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <osEventFlagsClear+0x84>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d114      	bne.n	80056e8 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056be:	f3ef 8311 	mrs	r3, BASEPRI
 80056c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80056ca:	69b8      	ldr	r0, [r7, #24]
 80056cc:	f000 f9da 	bl	8005a84 <xEventGroupGetBitsFromISR>
 80056d0:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	69b8      	ldr	r0, [r7, #24]
 80056d6:	f000 f9c1 	bl	8005a5c <xEventGroupClearBitsFromISR>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80056e0:	f06f 0302 	mvn.w	r3, #2
 80056e4:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80056e6:	e004      	b.n	80056f2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	69b8      	ldr	r0, [r7, #24]
 80056ec:	f000 f97e 	bl	80059ec <xEventGroupClearBits>
 80056f0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80056f2:	69fb      	ldr	r3, [r7, #28]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3720      	adds	r7, #32
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000434 	.word	0x20000434

08005700 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005700:	b580      	push	{r7, lr}
 8005702:	b08e      	sub	sp, #56	; 0x38
 8005704:	af02      	add	r7, sp, #8
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <osEventFlagsWait+0x22>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005722:	f06f 0303 	mvn.w	r3, #3
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
 8005728:	e059      	b.n	80057de <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005730:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10f      	bne.n	8005756 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	61bb      	str	r3, [r7, #24]
  return(result);
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d109      	bne.n	8005756 <osEventFlagsWait+0x56>
 8005742:	4b29      	ldr	r3, [pc, #164]	; (80057e8 <osEventFlagsWait+0xe8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d109      	bne.n	800575e <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800574a:	f3ef 8311 	mrs	r3, BASEPRI
 800574e:	617b      	str	r3, [r7, #20]
  return(result);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 8005756:	f06f 0305 	mvn.w	r3, #5
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	e03f      	b.n	80057de <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576c:	e001      	b.n	8005772 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 800576e:	2300      	movs	r3, #0
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 800577c:	2300      	movs	r3, #0
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005780:	e001      	b.n	8005786 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	6a38      	ldr	r0, [r7, #32]
 8005792:	f000 f85d 	bl	8005850 <xEventGroupWaitBits>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00e      	beq.n	80057c0 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d019      	beq.n	80057de <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80057b0:	f06f 0301 	mvn.w	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
 80057b6:	e012      	b.n	80057de <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80057b8:	f06f 0302 	mvn.w	r3, #2
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e00e      	b.n	80057de <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80057d0:	f06f 0301 	mvn.w	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e002      	b.n	80057de <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80057d8:	f06f 0302 	mvn.w	r3, #2
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3730      	adds	r7, #48	; 0x30
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000434 	.word	0x20000434

080057ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4a06      	ldr	r2, [pc, #24]	; (8005814 <vApplicationGetIdleTaskMemory+0x28>)
 80057fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4a05      	ldr	r2, [pc, #20]	; (8005818 <vApplicationGetIdleTaskMemory+0x2c>)
 8005802:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	601a      	str	r2, [r3, #0]
}
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	20000438 	.word	0x20000438
 8005818:	200004e0 	.word	0x200004e0

0800581c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4a07      	ldr	r2, [pc, #28]	; (8005848 <vApplicationGetTimerTaskMemory+0x2c>)
 800582c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4a06      	ldr	r2, [pc, #24]	; (800584c <vApplicationGetTimerTaskMemory+0x30>)
 8005832:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800583a:	601a      	str	r2, [r3, #0]
}
 800583c:	bf00      	nop
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	200006e0 	.word	0x200006e0
 800584c:	20000788 	.word	0x20000788

08005850 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b090      	sub	sp, #64	; 0x40
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005866:	2300      	movs	r3, #0
 8005868:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <xEventGroupWaitBits+0x56>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	61fb      	str	r3, [r7, #28]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	61bb      	str	r3, [r7, #24]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c2:	f001 fe21 	bl	8007508 <xTaskGetSchedulerState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <xEventGroupWaitBits+0x82>
 80058cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <xEventGroupWaitBits+0x86>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xEventGroupWaitBits+0x88>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	617b      	str	r3, [r7, #20]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80058f2:	f001 f979 	bl	8006be8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80058f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	68b9      	ldr	r1, [r7, #8]
 8005900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005902:	f000 f987 	bl	8005c14 <prvTestWaitCondition>
 8005906:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00e      	beq.n	800592c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005912:	2300      	movs	r3, #0
 8005914:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d028      	beq.n	800596e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	43db      	mvns	r3, r3
 8005924:	401a      	ands	r2, r3
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e020      	b.n	800596e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800592c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592e:	2b00      	cmp	r3, #0
 8005930:	d104      	bne.n	800593c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005936:	2301      	movs	r3, #1
 8005938:	633b      	str	r3, [r7, #48]	; 0x30
 800593a:	e018      	b.n	800596e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005956:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595a:	1d18      	adds	r0, r3, #4
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	4313      	orrs	r3, r2
 8005962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005964:	4619      	mov	r1, r3
 8005966:	f001 fb3f 	bl	8006fe8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800596e:	f001 f949 	bl	8006c04 <xTaskResumeAll>
 8005972:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005976:	2b00      	cmp	r3, #0
 8005978:	d031      	beq.n	80059de <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <xEventGroupWaitBits+0x198>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005990:	f001 fe46 	bl	8007620 <uxTaskResetEventItemValue>
 8005994:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d11a      	bne.n	80059d6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80059a0:	f002 facc 	bl	8007f3c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80059b0:	f000 f930 	bl	8005c14 <prvTestWaitCondition>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d006      	beq.n	80059ce <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	43db      	mvns	r3, r3
 80059c8:	401a      	ands	r2, r3
 80059ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059cc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80059d2:	f002 fae3 	bl	8007f9c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80059de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3740      	adds	r7, #64	; 0x40
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xEventGroupClearBits+0x2a>
	__asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
}
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <xEventGroupClearBits+0x4a>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	60bb      	str	r3, [r7, #8]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8005a36:	f002 fa81 	bl	8007f3c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	43db      	mvns	r3, r3
 8005a48:	401a      	ands	r2, r3
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005a4e:	f002 faa5 	bl	8007f9c <vPortExitCritical>

	return uxReturn;
 8005a52:	693b      	ldr	r3, [r7, #16]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8005a66:	2300      	movs	r3, #0
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	4804      	ldr	r0, [pc, #16]	; (8005a80 <xEventGroupClearBitsFromISR+0x24>)
 8005a6e:	f002 f955 	bl	8007d1c <xTimerPendFunctionCallFromISR>
 8005a72:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005a74:	68fb      	ldr	r3, [r7, #12]
	}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	08005bfb 	.word	0x08005bfb

08005a84 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005a90:	f3ef 8211 	mrs	r2, BASEPRI
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	60fa      	str	r2, [r7, #12]
 8005aa6:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aaa:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005abc:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005abe:	697b      	ldr	r3, [r7, #20]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3724      	adds	r7, #36	; 0x24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b08e      	sub	sp, #56	; 0x38
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <xEventGroupSetBits+0x32>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	613b      	str	r3, [r7, #16]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <xEventGroupSetBits+0x52>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	60fb      	str	r3, [r7, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	e7fe      	b.n	8005b1a <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	3304      	adds	r3, #4
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	3308      	adds	r3, #8
 8005b26:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005b28:	f001 f85e 	bl	8006be8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005b3e:	e03c      	b.n	8005bba <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b56:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b5e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d108      	bne.n	8005b7c <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	4013      	ands	r3, r2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005b76:	2301      	movs	r3, #1
 8005b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7a:	e008      	b.n	8005b8e <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	4013      	ands	r3, r2
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d101      	bne.n	8005b8e <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bb2:	f001 fae5 	bl	8007180 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d1be      	bne.n	8005b40 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	401a      	ands	r2, r3
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005bd0:	f001 f818 	bl	8006c04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3738      	adds	r7, #56	; 0x38
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff ff6c 	bl	8005aca <xEventGroupSetBits>
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fef0 	bl	80059ec <xEventGroupClearBits>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d107      	bne.n	8005c3a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c34:	2301      	movs	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e007      	b.n	8005c4a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d101      	bne.n	8005c4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005c46:	2301      	movs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005c4a:	697b      	ldr	r3, [r7, #20]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
	...

08005c58 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	4804      	ldr	r0, [pc, #16]	; (8005c7c <xEventGroupSetBitsFromISR+0x24>)
 8005c6c:	f002 f856 	bl	8007d1c <xTimerPendFunctionCallFromISR>
 8005c70:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005c72:	697b      	ldr	r3, [r7, #20]
	}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	08005be1 	.word	0x08005be1

08005c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f103 0208 	add.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f04f 32ff 	mov.w	r2, #4294967295
 8005c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f103 0208 	add.w	r2, r3, #8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f103 0208 	add.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bc80      	pop	{r7}
 8005cd4:	4770      	bx	lr

08005cd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1c5a      	adds	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d103      	bne.n	8005d3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e00c      	b.n	8005d56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e002      	b.n	8005d4a <vListInsert+0x2e>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d2f6      	bcs.n	8005d44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	601a      	str	r2, [r3, #0]
}
 8005d82:	bf00      	nop
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6892      	ldr	r2, [r2, #8]
 8005da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d103      	bne.n	8005dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	1e5a      	subs	r2, r3, #1
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3714      	adds	r7, #20
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bc80      	pop	{r7}
 8005ddc:	4770      	bx	lr
	...

08005de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <xQueueGenericReset+0x2a>
	__asm volatile
 8005df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	60bb      	str	r3, [r7, #8]
}
 8005e06:	bf00      	nop
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e0a:	f002 f897 	bl	8007f3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	68f9      	ldr	r1, [r7, #12]
 8005e18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	441a      	add	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e40:	fb01 f303 	mul.w	r3, r1, r3
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22ff      	movs	r2, #255	; 0xff
 8005e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	22ff      	movs	r2, #255	; 0xff
 8005e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d114      	bne.n	8005e8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01a      	beq.n	8005e9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3310      	adds	r3, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f923 	bl	80070b8 <xTaskRemoveFromEventList>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <xQueueGenericReset+0xcc>)
 8005e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	e009      	b.n	8005e9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff fef6 	bl	8005c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	3324      	adds	r3, #36	; 0x24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fef1 	bl	8005c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f002 f87d 	bl	8007f9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08e      	sub	sp, #56	; 0x38
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10a      	bne.n	8005ef6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <xQueueGenericCreateStatic+0x52>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <xQueueGenericCreateStatic+0x56>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <xQueueGenericCreateStatic+0x58>
 8005f06:	2300      	movs	r3, #0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	623b      	str	r3, [r7, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d102      	bne.n	8005f2e <xQueueGenericCreateStatic+0x7e>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <xQueueGenericCreateStatic+0x82>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <xQueueGenericCreateStatic+0x84>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f4e:	2350      	movs	r3, #80	; 0x50
 8005f50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b50      	cmp	r3, #80	; 0x50
 8005f56:	d00a      	beq.n	8005f6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	61bb      	str	r3, [r7, #24]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00d      	beq.n	8005f94 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f80:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f805 	bl	8005f9e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3730      	adds	r7, #48	; 0x30
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d103      	bne.n	8005fba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e002      	b.n	8005fc0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fcc:	2101      	movs	r1, #1
 8005fce:	69b8      	ldr	r0, [r7, #24]
 8005fd0:	f7ff ff06 	bl	8005de0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	78fa      	ldrb	r2, [r7, #3]
 8005fd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08e      	sub	sp, #56	; 0x38
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xQueueGenericSend+0x32>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d103      	bne.n	8006024 <xQueueGenericSend+0x40>
 800601c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <xQueueGenericSend+0x44>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <xQueueGenericSend+0x46>
 8006028:	2300      	movs	r3, #0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <xQueueGenericSend+0x60>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006040:	bf00      	nop
 8006042:	e7fe      	b.n	8006042 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d103      	bne.n	8006052 <xQueueGenericSend+0x6e>
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	2b01      	cmp	r3, #1
 8006050:	d101      	bne.n	8006056 <xQueueGenericSend+0x72>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <xQueueGenericSend+0x74>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <xQueueGenericSend+0x8e>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	623b      	str	r3, [r7, #32]
}
 800606e:	bf00      	nop
 8006070:	e7fe      	b.n	8006070 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006072:	f001 fa49 	bl	8007508 <xTaskGetSchedulerState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <xQueueGenericSend+0x9e>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <xQueueGenericSend+0xa2>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <xQueueGenericSend+0xa4>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10a      	bne.n	80060a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	61fb      	str	r3, [r7, #28]
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a2:	f001 ff4b 	bl	8007f3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d302      	bcc.n	80060b8 <xQueueGenericSend+0xd4>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d129      	bne.n	800610c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060be:	f000 fa07 	bl	80064d0 <prvCopyDataToQueue>
 80060c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	3324      	adds	r3, #36	; 0x24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fff1 	bl	80070b8 <xTaskRemoveFromEventList>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060dc:	4b3f      	ldr	r3, [pc, #252]	; (80061dc <xQueueGenericSend+0x1f8>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	e00a      	b.n	8006104 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d007      	beq.n	8006104 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xQueueGenericSend+0x1f8>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006104:	f001 ff4a 	bl	8007f9c <vPortExitCritical>
				return pdPASS;
 8006108:	2301      	movs	r3, #1
 800610a:	e063      	b.n	80061d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006112:	f001 ff43 	bl	8007f9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006116:	2300      	movs	r3, #0
 8006118:	e05c      	b.n	80061d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800611a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611c:	2b00      	cmp	r3, #0
 800611e:	d106      	bne.n	800612e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006120:	f107 0314 	add.w	r3, r7, #20
 8006124:	4618      	mov	r0, r3
 8006126:	f001 f88d 	bl	8007244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800612a:	2301      	movs	r3, #1
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800612e:	f001 ff35 	bl	8007f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006132:	f000 fd59 	bl	8006be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006136:	f001 ff01 	bl	8007f3c <vPortEnterCritical>
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006140:	b25b      	sxtb	r3, r3
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d103      	bne.n	8006150 <xQueueGenericSend+0x16c>
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d103      	bne.n	8006166 <xQueueGenericSend+0x182>
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006166:	f001 ff19 	bl	8007f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800616a:	1d3a      	adds	r2, r7, #4
 800616c:	f107 0314 	add.w	r3, r7, #20
 8006170:	4611      	mov	r1, r2
 8006172:	4618      	mov	r0, r3
 8006174:	f001 f87c 	bl	8007270 <xTaskCheckForTimeOut>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d124      	bne.n	80061c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800617e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006180:	f000 fa9e 	bl	80066c0 <prvIsQueueFull>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d018      	beq.n	80061bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	3310      	adds	r3, #16
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	4611      	mov	r1, r2
 8006192:	4618      	mov	r0, r3
 8006194:	f000 ff04 	bl	8006fa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800619a:	f000 fa29 	bl	80065f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800619e:	f000 fd31 	bl	8006c04 <xTaskResumeAll>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f47f af7c 	bne.w	80060a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80061aa:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <xQueueGenericSend+0x1f8>)
 80061ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b0:	601a      	str	r2, [r3, #0]
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	e772      	b.n	80060a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061be:	f000 fa17 	bl	80065f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061c2:	f000 fd1f 	bl	8006c04 <xTaskResumeAll>
 80061c6:	e76c      	b.n	80060a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ca:	f000 fa11 	bl	80065f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061ce:	f000 fd19 	bl	8006c04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061d2:	2300      	movs	r3, #0
		}
	}
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3738      	adds	r7, #56	; 0x38
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	e000ed04 	.word	0xe000ed04

080061e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	; 0x38
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <xQueueGenericSendFromISR+0x3c>
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <xQueueGenericSendFromISR+0x40>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <xQueueGenericSendFromISR+0x42>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10a      	bne.n	800623c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	623b      	str	r3, [r7, #32]
}
 8006238:	bf00      	nop
 800623a:	e7fe      	b.n	800623a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d103      	bne.n	800624a <xQueueGenericSendFromISR+0x6a>
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <xQueueGenericSendFromISR+0x6e>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <xQueueGenericSendFromISR+0x70>
 800624e:	2300      	movs	r3, #0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10a      	bne.n	800626a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	61fb      	str	r3, [r7, #28]
}
 8006266:	bf00      	nop
 8006268:	e7fe      	b.n	8006268 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800626a:	f001 ff29 	bl	80080c0 <vPortValidateInterruptPriority>
	__asm volatile
 800626e:	f3ef 8211 	mrs	r2, BASEPRI
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	61ba      	str	r2, [r7, #24]
 8006284:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006286:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	429a      	cmp	r2, r3
 8006294:	d302      	bcc.n	800629c <xQueueGenericSendFromISR+0xbc>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d12c      	bne.n	80062f6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ac:	f000 f910 	bl	80064d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d112      	bne.n	80062e0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	3324      	adds	r3, #36	; 0x24
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fef6 	bl	80070b8 <xTaskRemoveFromEventList>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00e      	beq.n	80062f0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00b      	beq.n	80062f0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e007      	b.n	80062f0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062e4:	3301      	adds	r3, #1
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	b25a      	sxtb	r2, r3
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062f0:	2301      	movs	r3, #1
 80062f2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80062f4:	e001      	b.n	80062fa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f383 8811 	msr	BASEPRI, r3
}
 8006304:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006308:	4618      	mov	r0, r3
 800630a:	3738      	adds	r7, #56	; 0x38
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <xQueueReceive+0x30>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	623b      	str	r3, [r7, #32]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <xQueueReceive+0x3e>
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <xQueueReceive+0x42>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <xQueueReceive+0x44>
 8006352:	2300      	movs	r3, #0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10a      	bne.n	800636e <xQueueReceive+0x5e>
	__asm volatile
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	f383 8811 	msr	BASEPRI, r3
 8006360:	f3bf 8f6f 	isb	sy
 8006364:	f3bf 8f4f 	dsb	sy
 8006368:	61fb      	str	r3, [r7, #28]
}
 800636a:	bf00      	nop
 800636c:	e7fe      	b.n	800636c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800636e:	f001 f8cb 	bl	8007508 <xTaskGetSchedulerState>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d102      	bne.n	800637e <xQueueReceive+0x6e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <xQueueReceive+0x72>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <xQueueReceive+0x74>
 8006382:	2300      	movs	r3, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10a      	bne.n	800639e <xQueueReceive+0x8e>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	61bb      	str	r3, [r7, #24]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800639e:	f001 fdcd 	bl	8007f3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01f      	beq.n	80063ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b2:	f000 f8f7 	bl	80065a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	1e5a      	subs	r2, r3, #1
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00f      	beq.n	80063e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	3310      	adds	r3, #16
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe74 	bl	80070b8 <xTaskRemoveFromEventList>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d007      	beq.n	80063e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063d6:	4b3d      	ldr	r3, [pc, #244]	; (80064cc <xQueueReceive+0x1bc>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063e6:	f001 fdd9 	bl	8007f9c <vPortExitCritical>
				return pdPASS;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e069      	b.n	80064c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063f4:	f001 fdd2 	bl	8007f9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e062      	b.n	80064c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff1c 	bl	8007244 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006410:	f001 fdc4 	bl	8007f9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006414:	f000 fbe8 	bl	8006be8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006418:	f001 fd90 	bl	8007f3c <vPortEnterCritical>
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006422:	b25b      	sxtb	r3, r3
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d103      	bne.n	8006432 <xQueueReceive+0x122>
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <xQueueReceive+0x138>
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006448:	f001 fda8 	bl	8007f9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800644c:	1d3a      	adds	r2, r7, #4
 800644e:	f107 0310 	add.w	r3, r7, #16
 8006452:	4611      	mov	r1, r2
 8006454:	4618      	mov	r0, r3
 8006456:	f000 ff0b 	bl	8007270 <xTaskCheckForTimeOut>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d123      	bne.n	80064a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006462:	f000 f917 	bl	8006694 <prvIsQueueEmpty>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d017      	beq.n	800649c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fd93 	bl	8006fa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800647a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800647c:	f000 f8b8 	bl	80065f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006480:	f000 fbc0 	bl	8006c04 <xTaskResumeAll>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d189      	bne.n	800639e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <xQueueReceive+0x1bc>)
 800648c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	e780      	b.n	800639e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800649c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800649e:	f000 f8a7 	bl	80065f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064a2:	f000 fbaf 	bl	8006c04 <xTaskResumeAll>
 80064a6:	e77a      	b.n	800639e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064aa:	f000 f8a1 	bl	80065f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064ae:	f000 fba9 	bl	8006c04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b4:	f000 f8ee 	bl	8006694 <prvIsQueueEmpty>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f43f af6f 	beq.w	800639e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3730      	adds	r7, #48	; 0x30
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d14d      	bne.n	8006592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 f822 	bl	8007544 <xTaskPriorityDisinherit>
 8006500:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	e043      	b.n	8006592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d119      	bne.n	8006544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6898      	ldr	r0, [r3, #8]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	461a      	mov	r2, r3
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	f002 f86a 	bl	80085f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	441a      	add	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	429a      	cmp	r2, r3
 8006538:	d32b      	bcc.n	8006592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	609a      	str	r2, [r3, #8]
 8006542:	e026      	b.n	8006592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68d8      	ldr	r0, [r3, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654c:	461a      	mov	r2, r3
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	f002 f850 	bl	80085f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	425b      	negs	r3, r3
 800655e:	441a      	add	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d207      	bcs.n	8006580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	425b      	negs	r3, r3
 800657a:	441a      	add	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d105      	bne.n	8006592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	3b01      	subs	r3, #1
 8006590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800659a:	697b      	ldr	r3, [r7, #20]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d018      	beq.n	80065e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	441a      	add	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d303      	bcc.n	80065d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68d9      	ldr	r1, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	461a      	mov	r2, r3
 80065e2:	6838      	ldr	r0, [r7, #0]
 80065e4:	f002 f806 	bl	80085f4 <memcpy>
	}
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80065f8:	f001 fca0 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006604:	e011      	b.n	800662a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	2b00      	cmp	r3, #0
 800660c:	d012      	beq.n	8006634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3324      	adds	r3, #36	; 0x24
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fd50 	bl	80070b8 <xTaskRemoveFromEventList>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800661e:	f000 fe89 	bl	8007334 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	3b01      	subs	r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800662a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662e:	2b00      	cmp	r3, #0
 8006630:	dce9      	bgt.n	8006606 <prvUnlockQueue+0x16>
 8006632:	e000      	b.n	8006636 <prvUnlockQueue+0x46>
					break;
 8006634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	22ff      	movs	r2, #255	; 0xff
 800663a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800663e:	f001 fcad 	bl	8007f9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006642:	f001 fc7b 	bl	8007f3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800664c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800664e:	e011      	b.n	8006674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d012      	beq.n	800667e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3310      	adds	r3, #16
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fd2b 	bl	80070b8 <xTaskRemoveFromEventList>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006668:	f000 fe64 	bl	8007334 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	3b01      	subs	r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006678:	2b00      	cmp	r3, #0
 800667a:	dce9      	bgt.n	8006650 <prvUnlockQueue+0x60>
 800667c:	e000      	b.n	8006680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800667e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	22ff      	movs	r2, #255	; 0xff
 8006684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006688:	f001 fc88 	bl	8007f9c <vPortExitCritical>
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800669c:	f001 fc4e 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d102      	bne.n	80066ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066a8:	2301      	movs	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e001      	b.n	80066b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066b2:	f001 fc73 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 80066b6:	68fb      	ldr	r3, [r7, #12]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066c8:	f001 fc38 	bl	8007f3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d102      	bne.n	80066de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	e001      	b.n	80066e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066e2:	f001 fc5b 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e014      	b.n	800672a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006700:	4a0e      	ldr	r2, [pc, #56]	; (800673c <vQueueAddToRegistry+0x4c>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800670c:	490b      	ldr	r1, [pc, #44]	; (800673c <vQueueAddToRegistry+0x4c>)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006716:	4a09      	ldr	r2, [pc, #36]	; (800673c <vQueueAddToRegistry+0x4c>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006722:	e006      	b.n	8006732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3301      	adds	r3, #1
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b07      	cmp	r3, #7
 800672e:	d9e7      	bls.n	8006700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr
 800673c:	20000b88 	.word	0x20000b88

08006740 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006750:	f001 fbf4 	bl	8007f3c <vPortEnterCritical>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675a:	b25b      	sxtb	r3, r3
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d103      	bne.n	800676a <vQueueWaitForMessageRestricted+0x2a>
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006770:	b25b      	sxtb	r3, r3
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d103      	bne.n	8006780 <vQueueWaitForMessageRestricted+0x40>
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006780:	f001 fc0c 	bl	8007f9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	3324      	adds	r3, #36	; 0x24
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fc63 	bl	8007060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800679a:	6978      	ldr	r0, [r7, #20]
 800679c:	f7ff ff28 	bl	80065f0 <prvUnlockQueue>
	}
 80067a0:	bf00      	nop
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08e      	sub	sp, #56	; 0x38
 80067ac:	af04      	add	r7, sp, #16
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10a      	bne.n	80067d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	f383 8811 	msr	BASEPRI, r3
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	623b      	str	r3, [r7, #32]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10a      	bne.n	80067ee <xTaskCreateStatic+0x46>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	61fb      	str	r3, [r7, #28]
}
 80067ea:	bf00      	nop
 80067ec:	e7fe      	b.n	80067ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067ee:	23a8      	movs	r3, #168	; 0xa8
 80067f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2ba8      	cmp	r3, #168	; 0xa8
 80067f6:	d00a      	beq.n	800680e <xTaskCreateStatic+0x66>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	61bb      	str	r3, [r7, #24]
}
 800680a:	bf00      	nop
 800680c:	e7fe      	b.n	800680c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01e      	beq.n	8006852 <xTaskCreateStatic+0xaa>
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01b      	beq.n	8006852 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006822:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	2202      	movs	r2, #2
 8006828:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800682c:	2300      	movs	r3, #0
 800682e:	9303      	str	r3, [sp, #12]
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	9302      	str	r3, [sp, #8]
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f851 	bl	80068ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800684a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800684c:	f000 f8ec 	bl	8006a28 <prvAddNewTaskToReadyList>
 8006850:	e001      	b.n	8006856 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006856:	697b      	ldr	r3, [r7, #20]
	}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	; 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08c      	sub	sp, #48	; 0x30
 8006864:	af04      	add	r7, sp, #16
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4618      	mov	r0, r3
 8006876:	f001 fc61 	bl	800813c <pvPortMalloc>
 800687a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006882:	20a8      	movs	r0, #168	; 0xa8
 8006884:	f001 fc5a 	bl	800813c <pvPortMalloc>
 8006888:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	631a      	str	r2, [r3, #48]	; 0x30
 8006896:	e005      	b.n	80068a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006898:	6978      	ldr	r0, [r7, #20]
 800689a:	f001 fd13 	bl	80082c4 <vPortFree>
 800689e:	e001      	b.n	80068a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d017      	beq.n	80068da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068b2:	88fa      	ldrh	r2, [r7, #6]
 80068b4:	2300      	movs	r3, #0
 80068b6:	9303      	str	r3, [sp, #12]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	9302      	str	r3, [sp, #8]
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 f80f 	bl	80068ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ce:	69f8      	ldr	r0, [r7, #28]
 80068d0:	f000 f8aa 	bl	8006a28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068d4:	2301      	movs	r3, #1
 80068d6:	61bb      	str	r3, [r7, #24]
 80068d8:	e002      	b.n	80068e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068e0:	69bb      	ldr	r3, [r7, #24]
	}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	461a      	mov	r2, r3
 8006904:	21a5      	movs	r1, #165	; 0xa5
 8006906:	f001 fdf1 	bl	80084ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006914:	3b01      	subs	r3, #1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <prvInitialiseNewTask+0x58>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	617b      	str	r3, [r7, #20]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	e012      	b.n	8006970 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	7819      	ldrb	r1, [r3, #0]
 8006952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	3334      	adds	r3, #52	; 0x34
 800695a:	460a      	mov	r2, r1
 800695c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	4413      	add	r3, r2
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d006      	beq.n	8006978 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	3301      	adds	r3, #1
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d9e9      	bls.n	800694a <prvInitialiseNewTask+0x5e>
 8006976:	e000      	b.n	800697a <prvInitialiseNewTask+0x8e>
		{
			break;
 8006978:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	2b37      	cmp	r3, #55	; 0x37
 8006986:	d901      	bls.n	800698c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006988:	2337      	movs	r3, #55	; 0x37
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006996:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	2200      	movs	r2, #0
 800699c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	3304      	adds	r3, #4
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff f98b 	bl	8005cbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	3318      	adds	r3, #24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff f986 	bl	8005cbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	3354      	adds	r3, #84	; 0x54
 80069dc:	224c      	movs	r2, #76	; 0x4c
 80069de:	2100      	movs	r1, #0
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 fd83 	bl	80084ec <memset>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <prvInitialiseNewTask+0x130>)
 80069ea:	659a      	str	r2, [r3, #88]	; 0x58
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <prvInitialiseNewTask+0x134>)
 80069f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	4a0b      	ldr	r2, [pc, #44]	; (8006a24 <prvInitialiseNewTask+0x138>)
 80069f6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	69b8      	ldr	r0, [r7, #24]
 80069fe:	f001 f9ad 	bl	8007d5c <pxPortInitialiseStack>
 8006a02:	4602      	mov	r2, r0
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a14:	bf00      	nop
 8006a16:	3720      	adds	r7, #32
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20003924 	.word	0x20003924
 8006a20:	2000398c 	.word	0x2000398c
 8006a24:	200039f4 	.word	0x200039f4

08006a28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a30:	f001 fa84 	bl	8007f3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a34:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <prvAddNewTaskToReadyList+0xc4>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a2c      	ldr	r2, [pc, #176]	; (8006aec <prvAddNewTaskToReadyList+0xc4>)
 8006a3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d109      	bne.n	8006a5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a46:	4a2a      	ldr	r2, [pc, #168]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a4c:	4b27      	ldr	r3, [pc, #156]	; (8006aec <prvAddNewTaskToReadyList+0xc4>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d110      	bne.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a54:	f000 fc92 	bl	800737c <prvInitialiseTaskLists>
 8006a58:	e00d      	b.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a5a:	4b26      	ldr	r3, [pc, #152]	; (8006af4 <prvAddNewTaskToReadyList+0xcc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a62:	4b23      	ldr	r3, [pc, #140]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d802      	bhi.n	8006a76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a70:	4a1f      	ldr	r2, [pc, #124]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a76:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <prvAddNewTaskToReadyList+0xd0>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <prvAddNewTaskToReadyList+0xd0>)
 8006a7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a80:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <prvAddNewTaskToReadyList+0xd0>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	; (8006afc <prvAddNewTaskToReadyList+0xd4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d903      	bls.n	8006a9c <prvAddNewTaskToReadyList+0x74>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a98:	4a18      	ldr	r2, [pc, #96]	; (8006afc <prvAddNewTaskToReadyList+0xd4>)
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <prvAddNewTaskToReadyList+0xd8>)
 8006aaa:	441a      	add	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3304      	adds	r3, #4
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	f7ff f90f 	bl	8005cd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ab8:	f001 fa70 	bl	8007f9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <prvAddNewTaskToReadyList+0xcc>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00e      	beq.n	8006ae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvAddNewTaskToReadyList+0xc8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d207      	bcs.n	8006ae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ad2:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <prvAddNewTaskToReadyList+0xdc>)
 8006ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2000109c 	.word	0x2000109c
 8006af0:	20000bc8 	.word	0x20000bc8
 8006af4:	200010a8 	.word	0x200010a8
 8006af8:	200010b8 	.word	0x200010b8
 8006afc:	200010a4 	.word	0x200010a4
 8006b00:	20000bcc 	.word	0x20000bcc
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b08a      	sub	sp, #40	; 0x28
 8006b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b16:	463a      	mov	r2, r7
 8006b18:	1d39      	adds	r1, r7, #4
 8006b1a:	f107 0308 	add.w	r3, r7, #8
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7fe fe64 	bl	80057ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	9202      	str	r2, [sp, #8]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	2300      	movs	r3, #0
 8006b34:	460a      	mov	r2, r1
 8006b36:	4924      	ldr	r1, [pc, #144]	; (8006bc8 <vTaskStartScheduler+0xc0>)
 8006b38:	4824      	ldr	r0, [pc, #144]	; (8006bcc <vTaskStartScheduler+0xc4>)
 8006b3a:	f7ff fe35 	bl	80067a8 <xTaskCreateStatic>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4a23      	ldr	r2, [pc, #140]	; (8006bd0 <vTaskStartScheduler+0xc8>)
 8006b42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b44:	4b22      	ldr	r3, [pc, #136]	; (8006bd0 <vTaskStartScheduler+0xc8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e001      	b.n	8006b56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d102      	bne.n	8006b62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006b5c:	f000 fdcc 	bl	80076f8 <xTimerCreateTimerTask>
 8006b60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d11b      	bne.n	8006ba0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	613b      	str	r3, [r7, #16]
}
 8006b7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b7c:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <vTaskStartScheduler+0xcc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3354      	adds	r3, #84	; 0x54
 8006b82:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <vTaskStartScheduler+0xd0>)
 8006b84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b86:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <vTaskStartScheduler+0xd4>)
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <vTaskStartScheduler+0xd8>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006b94:	4b13      	ldr	r3, [pc, #76]	; (8006be4 <vTaskStartScheduler+0xdc>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b9a:	f001 f95d 	bl	8007e58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b9e:	e00e      	b.n	8006bbe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba6:	d10a      	bne.n	8006bbe <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	e7fe      	b.n	8006bbc <vTaskStartScheduler+0xb4>
}
 8006bbe:	bf00      	nop
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	08008700 	.word	0x08008700
 8006bcc:	0800734d 	.word	0x0800734d
 8006bd0:	200010c0 	.word	0x200010c0
 8006bd4:	20000bc8 	.word	0x20000bc8
 8006bd8:	20000070 	.word	0x20000070
 8006bdc:	200010bc 	.word	0x200010bc
 8006be0:	200010a8 	.word	0x200010a8
 8006be4:	200010a0 	.word	0x200010a0

08006be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <vTaskSuspendAll+0x18>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	4a03      	ldr	r2, [pc, #12]	; (8006c00 <vTaskSuspendAll+0x18>)
 8006bf4:	6013      	str	r3, [r2, #0]
}
 8006bf6:	bf00      	nop
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bc80      	pop	{r7}
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	200010c4 	.word	0x200010c4

08006c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c12:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <xTaskResumeAll+0x118>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	603b      	str	r3, [r7, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c30:	f001 f984 	bl	8007f3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c34:	4b39      	ldr	r3, [pc, #228]	; (8006d1c <xTaskResumeAll+0x118>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	4a38      	ldr	r2, [pc, #224]	; (8006d1c <xTaskResumeAll+0x118>)
 8006c3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c3e:	4b37      	ldr	r3, [pc, #220]	; (8006d1c <xTaskResumeAll+0x118>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d162      	bne.n	8006d0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c46:	4b36      	ldr	r3, [pc, #216]	; (8006d20 <xTaskResumeAll+0x11c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d05e      	beq.n	8006d0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c4e:	e02f      	b.n	8006cb0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006c50:	4b34      	ldr	r3, [pc, #208]	; (8006d24 <xTaskResumeAll+0x120>)
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f895 	bl	8005d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7ff f890 	bl	8005d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4b2d      	ldr	r3, [pc, #180]	; (8006d28 <xTaskResumeAll+0x124>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <xTaskResumeAll+0x7c>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <xTaskResumeAll+0x124>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c84:	4613      	mov	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4a27      	ldr	r2, [pc, #156]	; (8006d2c <xTaskResumeAll+0x128>)
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	3304      	adds	r3, #4
 8006c94:	4619      	mov	r1, r3
 8006c96:	4610      	mov	r0, r2
 8006c98:	f7ff f81d 	bl	8005cd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <xTaskResumeAll+0x12c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006caa:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <xTaskResumeAll+0x130>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <xTaskResumeAll+0x120>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1cb      	bne.n	8006c50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006cbe:	f000 fbff 	bl	80074c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006cc2:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <xTaskResumeAll+0x134>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cce:	f000 f845 	bl	8006d5c <xTaskIncrementTick>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cd8:	4b16      	ldr	r3, [pc, #88]	; (8006d34 <xTaskResumeAll+0x130>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f1      	bne.n	8006cce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006cea:	4b13      	ldr	r3, [pc, #76]	; (8006d38 <xTaskResumeAll+0x134>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cf0:	4b10      	ldr	r3, [pc, #64]	; (8006d34 <xTaskResumeAll+0x130>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d009      	beq.n	8006d0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <xTaskResumeAll+0x138>)
 8006cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d0c:	f001 f946 	bl	8007f9c <vPortExitCritical>

	return xAlreadyYielded;
 8006d10:	68bb      	ldr	r3, [r7, #8]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	200010c4 	.word	0x200010c4
 8006d20:	2000109c 	.word	0x2000109c
 8006d24:	2000105c 	.word	0x2000105c
 8006d28:	200010a4 	.word	0x200010a4
 8006d2c:	20000bcc 	.word	0x20000bcc
 8006d30:	20000bc8 	.word	0x20000bc8
 8006d34:	200010b0 	.word	0x200010b0
 8006d38:	200010ac 	.word	0x200010ac
 8006d3c:	e000ed04 	.word	0xe000ed04

08006d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d46:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <xTaskGetTickCount+0x18>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d4c:	687b      	ldr	r3, [r7, #4]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	200010a0 	.word	0x200010a0

08006d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d66:	4b51      	ldr	r3, [pc, #324]	; (8006eac <xTaskIncrementTick+0x150>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 808e 	bne.w	8006e8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d70:	4b4f      	ldr	r3, [pc, #316]	; (8006eb0 <xTaskIncrementTick+0x154>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d78:	4a4d      	ldr	r2, [pc, #308]	; (8006eb0 <xTaskIncrementTick+0x154>)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d120      	bne.n	8006dc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	603b      	str	r3, [r7, #0]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <xTaskIncrementTick+0x46>
 8006da4:	4b43      	ldr	r3, [pc, #268]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	60fb      	str	r3, [r7, #12]
 8006daa:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <xTaskIncrementTick+0x15c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a41      	ldr	r2, [pc, #260]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4a41      	ldr	r2, [pc, #260]	; (8006eb8 <xTaskIncrementTick+0x15c>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <xTaskIncrementTick+0x160>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	4a3f      	ldr	r2, [pc, #252]	; (8006ebc <xTaskIncrementTick+0x160>)
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	f000 fb7d 	bl	80074c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dc6:	4b3e      	ldr	r3, [pc, #248]	; (8006ec0 <xTaskIncrementTick+0x164>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d34e      	bcc.n	8006e6e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006dd0:	4b38      	ldr	r3, [pc, #224]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <xTaskIncrementTick+0x82>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <xTaskIncrementTick+0x84>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de4:	4b36      	ldr	r3, [pc, #216]	; (8006ec0 <xTaskIncrementTick+0x164>)
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dea:	601a      	str	r2, [r3, #0]
					break;
 8006dec:	e03f      	b.n	8006e6e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006dee:	4b31      	ldr	r3, [pc, #196]	; (8006eb4 <xTaskIncrementTick+0x158>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d203      	bcs.n	8006e0e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e06:	4a2e      	ldr	r2, [pc, #184]	; (8006ec0 <xTaskIncrementTick+0x164>)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6013      	str	r3, [r2, #0]
						break;
 8006e0c:	e02f      	b.n	8006e6e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe ffba 	bl	8005d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d004      	beq.n	8006e2a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	3318      	adds	r3, #24
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fe ffb1 	bl	8005d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2e:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <xTaskIncrementTick+0x168>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d903      	bls.n	8006e3e <xTaskIncrementTick+0xe2>
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	4a22      	ldr	r2, [pc, #136]	; (8006ec4 <xTaskIncrementTick+0x168>)
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a1f      	ldr	r2, [pc, #124]	; (8006ec8 <xTaskIncrementTick+0x16c>)
 8006e4c:	441a      	add	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f7fe ff3e 	bl	8005cd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <xTaskIncrementTick+0x170>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d3b3      	bcc.n	8006dd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e6c:	e7b0      	b.n	8006dd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e6e:	4b17      	ldr	r3, [pc, #92]	; (8006ecc <xTaskIncrementTick+0x170>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e74:	4914      	ldr	r1, [pc, #80]	; (8006ec8 <xTaskIncrementTick+0x16c>)
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d907      	bls.n	8006e96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006e86:	2301      	movs	r3, #1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	e004      	b.n	8006e96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006e8c:	4b10      	ldr	r3, [pc, #64]	; (8006ed0 <xTaskIncrementTick+0x174>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <xTaskIncrementTick+0x174>)
 8006e94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <xTaskIncrementTick+0x178>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ea2:	697b      	ldr	r3, [r7, #20]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	200010c4 	.word	0x200010c4
 8006eb0:	200010a0 	.word	0x200010a0
 8006eb4:	20001054 	.word	0x20001054
 8006eb8:	20001058 	.word	0x20001058
 8006ebc:	200010b4 	.word	0x200010b4
 8006ec0:	200010bc 	.word	0x200010bc
 8006ec4:	200010a4 	.word	0x200010a4
 8006ec8:	20000bcc 	.word	0x20000bcc
 8006ecc:	20000bc8 	.word	0x20000bc8
 8006ed0:	200010ac 	.word	0x200010ac
 8006ed4:	200010b0 	.word	0x200010b0

08006ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ede:	4b2a      	ldr	r3, [pc, #168]	; (8006f88 <vTaskSwitchContext+0xb0>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <vTaskSwitchContext+0xb4>)
 8006ee8:	2201      	movs	r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006eec:	e046      	b.n	8006f7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <vTaskSwitchContext+0xb4>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ef4:	4b26      	ldr	r3, [pc, #152]	; (8006f90 <vTaskSwitchContext+0xb8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e010      	b.n	8006f1e <vTaskSwitchContext+0x46>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <vTaskSwitchContext+0x40>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	607b      	str	r3, [r7, #4]
}
 8006f14:	bf00      	nop
 8006f16:	e7fe      	b.n	8006f16 <vTaskSwitchContext+0x3e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	491d      	ldr	r1, [pc, #116]	; (8006f94 <vTaskSwitchContext+0xbc>)
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0e4      	beq.n	8006efc <vTaskSwitchContext+0x24>
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <vTaskSwitchContext+0xbc>)
 8006f3e:	4413      	add	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	3308      	adds	r3, #8
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d104      	bne.n	8006f62 <vTaskSwitchContext+0x8a>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	605a      	str	r2, [r3, #4]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a0b      	ldr	r2, [pc, #44]	; (8006f98 <vTaskSwitchContext+0xc0>)
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	4a08      	ldr	r2, [pc, #32]	; (8006f90 <vTaskSwitchContext+0xb8>)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <vTaskSwitchContext+0xc0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3354      	adds	r3, #84	; 0x54
 8006f78:	4a08      	ldr	r2, [pc, #32]	; (8006f9c <vTaskSwitchContext+0xc4>)
 8006f7a:	6013      	str	r3, [r2, #0]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	200010c4 	.word	0x200010c4
 8006f8c:	200010b0 	.word	0x200010b0
 8006f90:	200010a4 	.word	0x200010a4
 8006f94:	20000bcc 	.word	0x20000bcc
 8006f98:	20000bc8 	.word	0x20000bc8
 8006f9c:	20000070 	.word	0x20000070

08006fa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60fb      	str	r3, [r7, #12]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006fc6:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <vTaskPlaceOnEventList+0x44>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3318      	adds	r3, #24
 8006fcc:	4619      	mov	r1, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fe fea4 	bl	8005d1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	6838      	ldr	r0, [r7, #0]
 8006fd8:	f000 fb3a 	bl	8007650 <prvAddCurrentTaskToDelayedList>
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000bc8 	.word	0x20000bc8

08006fe8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	617b      	str	r3, [r7, #20]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007010:	4b11      	ldr	r3, [pc, #68]	; (8007058 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10a      	bne.n	800702e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	613b      	str	r3, [r7, #16]
}
 800702a:	bf00      	nop
 800702c:	e7fe      	b.n	800702c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <vTaskPlaceOnUnorderedEventList+0x74>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007038:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800703a:	4b08      	ldr	r3, [pc, #32]	; (800705c <vTaskPlaceOnUnorderedEventList+0x74>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3318      	adds	r3, #24
 8007040:	4619      	mov	r1, r3
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f7fe fe47 	bl	8005cd6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007048:	2101      	movs	r1, #1
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fb00 	bl	8007650 <prvAddCurrentTaskToDelayedList>
}
 8007050:	bf00      	nop
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	200010c4 	.word	0x200010c4
 800705c:	20000bc8 	.word	0x20000bc8

08007060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	617b      	str	r3, [r7, #20]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3318      	adds	r3, #24
 800708e:	4619      	mov	r1, r3
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f7fe fe20 	bl	8005cd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800709c:	f04f 33ff 	mov.w	r3, #4294967295
 80070a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	68b8      	ldr	r0, [r7, #8]
 80070a6:	f000 fad3 	bl	8007650 <prvAddCurrentTaskToDelayedList>
	}
 80070aa:	bf00      	nop
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000bc8 	.word	0x20000bc8

080070b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	60fb      	str	r3, [r7, #12]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	3318      	adds	r3, #24
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fe4f 	bl	8005d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ee:	4b1e      	ldr	r3, [pc, #120]	; (8007168 <xTaskRemoveFromEventList+0xb0>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d11d      	bne.n	8007132 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3304      	adds	r3, #4
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fe46 	bl	8005d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <xTaskRemoveFromEventList+0xb4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d903      	bls.n	8007114 <xTaskRemoveFromEventList+0x5c>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007110:	4a16      	ldr	r2, [pc, #88]	; (800716c <xTaskRemoveFromEventList+0xb4>)
 8007112:	6013      	str	r3, [r2, #0]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <xTaskRemoveFromEventList+0xb8>)
 8007122:	441a      	add	r2, r3
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f7fe fdd3 	bl	8005cd6 <vListInsertEnd>
 8007130:	e005      	b.n	800713e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3318      	adds	r3, #24
 8007136:	4619      	mov	r1, r3
 8007138:	480e      	ldr	r0, [pc, #56]	; (8007174 <xTaskRemoveFromEventList+0xbc>)
 800713a:	f7fe fdcc 	bl	8005cd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <xTaskRemoveFromEventList+0xc0>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d905      	bls.n	8007158 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007150:	4b0a      	ldr	r3, [pc, #40]	; (800717c <xTaskRemoveFromEventList+0xc4>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e001      	b.n	800715c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800715c:	697b      	ldr	r3, [r7, #20]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	200010c4 	.word	0x200010c4
 800716c:	200010a4 	.word	0x200010a4
 8007170:	20000bcc 	.word	0x20000bcc
 8007174:	2000105c 	.word	0x2000105c
 8007178:	20000bc8 	.word	0x20000bc8
 800717c:	200010b0 	.word	0x200010b0

08007180 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800718a:	4b29      	ldr	r3, [pc, #164]	; (8007230 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10a      	bne.n	80071a8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	613b      	str	r3, [r7, #16]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	60fb      	str	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7fe fdd9 	bl	8005d8c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	3304      	adds	r3, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe fdd4 	bl	8005d8c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4b12      	ldr	r3, [pc, #72]	; (8007234 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d903      	bls.n	80071f8 <vTaskRemoveFromUnorderedEventList+0x78>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	4a0f      	ldr	r2, [pc, #60]	; (8007234 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4a0c      	ldr	r2, [pc, #48]	; (8007238 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007206:	441a      	add	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe fd61 	bl	8005cd6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007218:	4b08      	ldr	r3, [pc, #32]	; (800723c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	429a      	cmp	r2, r3
 8007220:	d902      	bls.n	8007228 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007222:	4b07      	ldr	r3, [pc, #28]	; (8007240 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
	}
}
 8007228:	bf00      	nop
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	200010c4 	.word	0x200010c4
 8007234:	200010a4 	.word	0x200010a4
 8007238:	20000bcc 	.word	0x20000bcc
 800723c:	20000bc8 	.word	0x20000bc8
 8007240:	200010b0 	.word	0x200010b0

08007244 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <vTaskInternalSetTimeOutState+0x24>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007254:	4b05      	ldr	r3, [pc, #20]	; (800726c <vTaskInternalSetTimeOutState+0x28>)
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	605a      	str	r2, [r3, #4]
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	bc80      	pop	{r7}
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	200010b4 	.word	0x200010b4
 800726c:	200010a0 	.word	0x200010a0

08007270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	613b      	str	r3, [r7, #16]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10a      	bne.n	80072b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	60fb      	str	r3, [r7, #12]
}
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80072b2:	f000 fe43 	bl	8007f3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072b6:	4b1d      	ldr	r3, [pc, #116]	; (800732c <xTaskCheckForTimeOut+0xbc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ce:	d102      	bne.n	80072d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e023      	b.n	800731e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4b15      	ldr	r3, [pc, #84]	; (8007330 <xTaskCheckForTimeOut+0xc0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d007      	beq.n	80072f2 <xTaskCheckForTimeOut+0x82>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d302      	bcc.n	80072f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	e015      	b.n	800731e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d20b      	bcs.n	8007314 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	1ad2      	subs	r2, r2, r3
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff ff9b 	bl	8007244 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
 8007312:	e004      	b.n	800731e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800731a:	2301      	movs	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800731e:	f000 fe3d 	bl	8007f9c <vPortExitCritical>

	return xReturn;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200010a0 	.word	0x200010a0
 8007330:	200010b4 	.word	0x200010b4

08007334 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007334:	b480      	push	{r7}
 8007336:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <vTaskMissedYield+0x14>)
 800733a:	2201      	movs	r2, #1
 800733c:	601a      	str	r2, [r3, #0]
}
 800733e:	bf00      	nop
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	200010b0 	.word	0x200010b0

0800734c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007354:	f000 f852 	bl	80073fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <prvIdleTask+0x28>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d9f9      	bls.n	8007354 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <prvIdleTask+0x2c>)
 8007362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007370:	e7f0      	b.n	8007354 <prvIdleTask+0x8>
 8007372:	bf00      	nop
 8007374:	20000bcc 	.word	0x20000bcc
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007382:	2300      	movs	r3, #0
 8007384:	607b      	str	r3, [r7, #4]
 8007386:	e00c      	b.n	80073a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4a12      	ldr	r2, [pc, #72]	; (80073dc <prvInitialiseTaskLists+0x60>)
 8007394:	4413      	add	r3, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fc72 	bl	8005c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3301      	adds	r3, #1
 80073a0:	607b      	str	r3, [r7, #4]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b37      	cmp	r3, #55	; 0x37
 80073a6:	d9ef      	bls.n	8007388 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073a8:	480d      	ldr	r0, [pc, #52]	; (80073e0 <prvInitialiseTaskLists+0x64>)
 80073aa:	f7fe fc69 	bl	8005c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073ae:	480d      	ldr	r0, [pc, #52]	; (80073e4 <prvInitialiseTaskLists+0x68>)
 80073b0:	f7fe fc66 	bl	8005c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073b4:	480c      	ldr	r0, [pc, #48]	; (80073e8 <prvInitialiseTaskLists+0x6c>)
 80073b6:	f7fe fc63 	bl	8005c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073ba:	480c      	ldr	r0, [pc, #48]	; (80073ec <prvInitialiseTaskLists+0x70>)
 80073bc:	f7fe fc60 	bl	8005c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073c0:	480b      	ldr	r0, [pc, #44]	; (80073f0 <prvInitialiseTaskLists+0x74>)
 80073c2:	f7fe fc5d 	bl	8005c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <prvInitialiseTaskLists+0x78>)
 80073c8:	4a05      	ldr	r2, [pc, #20]	; (80073e0 <prvInitialiseTaskLists+0x64>)
 80073ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <prvInitialiseTaskLists+0x7c>)
 80073ce:	4a05      	ldr	r2, [pc, #20]	; (80073e4 <prvInitialiseTaskLists+0x68>)
 80073d0:	601a      	str	r2, [r3, #0]
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000bcc 	.word	0x20000bcc
 80073e0:	2000102c 	.word	0x2000102c
 80073e4:	20001040 	.word	0x20001040
 80073e8:	2000105c 	.word	0x2000105c
 80073ec:	20001070 	.word	0x20001070
 80073f0:	20001088 	.word	0x20001088
 80073f4:	20001054 	.word	0x20001054
 80073f8:	20001058 	.word	0x20001058

080073fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007402:	e019      	b.n	8007438 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007404:	f000 fd9a 	bl	8007f3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <prvCheckTasksWaitingTermination+0x50>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3304      	adds	r3, #4
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fcb9 	bl	8005d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800741a:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <prvCheckTasksWaitingTermination+0x54>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3b01      	subs	r3, #1
 8007420:	4a0b      	ldr	r2, [pc, #44]	; (8007450 <prvCheckTasksWaitingTermination+0x54>)
 8007422:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007424:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <prvCheckTasksWaitingTermination+0x58>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3b01      	subs	r3, #1
 800742a:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <prvCheckTasksWaitingTermination+0x58>)
 800742c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800742e:	f000 fdb5 	bl	8007f9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f810 	bl	8007458 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <prvCheckTasksWaitingTermination+0x58>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e1      	bne.n	8007404 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20001070 	.word	0x20001070
 8007450:	2000109c 	.word	0x2000109c
 8007454:	20001084 	.word	0x20001084

08007458 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3354      	adds	r3, #84	; 0x54
 8007464:	4618      	mov	r0, r3
 8007466:	f001 f849 	bl	80084fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007470:	2b00      	cmp	r3, #0
 8007472:	d108      	bne.n	8007486 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	4618      	mov	r0, r3
 800747a:	f000 ff23 	bl	80082c4 <vPortFree>
				vPortFree( pxTCB );
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 ff20 	bl	80082c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007484:	e018      	b.n	80074b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800748c:	2b01      	cmp	r3, #1
 800748e:	d103      	bne.n	8007498 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 ff17 	bl	80082c4 <vPortFree>
	}
 8007496:	e00f      	b.n	80074b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d00a      	beq.n	80074b8 <prvDeleteTCB+0x60>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
}
 80074b4:	bf00      	nop
 80074b6:	e7fe      	b.n	80074b6 <prvDeleteTCB+0x5e>
	}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <prvResetNextTaskUnblockTime+0x40>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <prvResetNextTaskUnblockTime+0x14>
 80074d0:	2301      	movs	r3, #1
 80074d2:	e000      	b.n	80074d6 <prvResetNextTaskUnblockTime+0x16>
 80074d4:	2300      	movs	r3, #0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074da:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <prvResetNextTaskUnblockTime+0x44>)
 80074dc:	f04f 32ff 	mov.w	r2, #4294967295
 80074e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80074e2:	e008      	b.n	80074f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80074e4:	4b06      	ldr	r3, [pc, #24]	; (8007500 <prvResetNextTaskUnblockTime+0x40>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	4a04      	ldr	r2, [pc, #16]	; (8007504 <prvResetNextTaskUnblockTime+0x44>)
 80074f4:	6013      	str	r3, [r2, #0]
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr
 8007500:	20001054 	.word	0x20001054
 8007504:	200010bc 	.word	0x200010bc

08007508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <xTaskGetSchedulerState+0x34>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d102      	bne.n	800751c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007516:	2301      	movs	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
 800751a:	e008      	b.n	800752e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751c:	4b08      	ldr	r3, [pc, #32]	; (8007540 <xTaskGetSchedulerState+0x38>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007524:	2302      	movs	r3, #2
 8007526:	607b      	str	r3, [r7, #4]
 8007528:	e001      	b.n	800752e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800752e:	687b      	ldr	r3, [r7, #4]
	}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	200010a8 	.word	0x200010a8
 8007540:	200010c4 	.word	0x200010c4

08007544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d056      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800755a:	4b2e      	ldr	r3, [pc, #184]	; (8007614 <xTaskPriorityDisinherit+0xd0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	429a      	cmp	r2, r3
 8007562:	d00a      	beq.n	800757a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	60fb      	str	r3, [r7, #12]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	60bb      	str	r3, [r7, #8]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	1e5a      	subs	r2, r3, #1
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d02c      	beq.n	8007608 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d128      	bne.n	8007608 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	3304      	adds	r3, #4
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fbe6 	bl	8005d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d903      	bls.n	80075e8 <xTaskPriorityDisinherit+0xa4>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e4:	4a0c      	ldr	r2, [pc, #48]	; (8007618 <xTaskPriorityDisinherit+0xd4>)
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <xTaskPriorityDisinherit+0xd8>)
 80075f6:	441a      	add	r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f7fe fb69 	bl	8005cd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007604:	2301      	movs	r3, #1
 8007606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007608:	697b      	ldr	r3, [r7, #20]
	}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000bc8 	.word	0x20000bc8
 8007618:	200010a4 	.word	0x200010a4
 800761c:	20000bcc 	.word	0x20000bcc

08007620 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007626:	4b09      	ldr	r3, [pc, #36]	; (800764c <uxTaskResetEventItemValue+0x2c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <uxTaskResetEventItemValue+0x2c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	4b05      	ldr	r3, [pc, #20]	; (800764c <uxTaskResetEventItemValue+0x2c>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800763c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800763e:	687b      	ldr	r3, [r7, #4]
}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	bc80      	pop	{r7}
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000bc8 	.word	0x20000bc8

08007650 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800765a:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007660:	4b20      	ldr	r3, [pc, #128]	; (80076e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3304      	adds	r3, #4
 8007666:	4618      	mov	r0, r3
 8007668:	f7fe fb90 	bl	8005d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007672:	d10a      	bne.n	800768a <prvAddCurrentTaskToDelayedList+0x3a>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d007      	beq.n	800768a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767a:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4819      	ldr	r0, [pc, #100]	; (80076e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007684:	f7fe fb27 	bl	8005cd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007688:	e026      	b.n	80076d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007692:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d209      	bcs.n	80076b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076a2:	4b12      	ldr	r3, [pc, #72]	; (80076ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f7fe fb34 	bl	8005d1c <vListInsert>
}
 80076b4:	e010      	b.n	80076d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076b6:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f7fe fb2a 	bl	8005d1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d202      	bcs.n	80076d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80076d2:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	6013      	str	r3, [r2, #0]
}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	200010a0 	.word	0x200010a0
 80076e4:	20000bc8 	.word	0x20000bc8
 80076e8:	20001088 	.word	0x20001088
 80076ec:	20001058 	.word	0x20001058
 80076f0:	20001054 	.word	0x20001054
 80076f4:	200010bc 	.word	0x200010bc

080076f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007702:	f000 facb 	bl	8007c9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007706:	4b1c      	ldr	r3, [pc, #112]	; (8007778 <xTimerCreateTimerTask+0x80>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d021      	beq.n	8007752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007712:	2300      	movs	r3, #0
 8007714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007716:	1d3a      	adds	r2, r7, #4
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	f107 030c 	add.w	r3, r7, #12
 8007720:	4618      	mov	r0, r3
 8007722:	f7fe f87b 	bl	800581c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007726:	6879      	ldr	r1, [r7, #4]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	9202      	str	r2, [sp, #8]
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	2302      	movs	r3, #2
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	2300      	movs	r3, #0
 8007736:	460a      	mov	r2, r1
 8007738:	4910      	ldr	r1, [pc, #64]	; (800777c <xTimerCreateTimerTask+0x84>)
 800773a:	4811      	ldr	r0, [pc, #68]	; (8007780 <xTimerCreateTimerTask+0x88>)
 800773c:	f7ff f834 	bl	80067a8 <xTaskCreateStatic>
 8007740:	4603      	mov	r3, r0
 8007742:	4a10      	ldr	r2, [pc, #64]	; (8007784 <xTimerCreateTimerTask+0x8c>)
 8007744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <xTimerCreateTimerTask+0x8c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800774e:	2301      	movs	r3, #1
 8007750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	613b      	str	r3, [r7, #16]
}
 800776a:	bf00      	nop
 800776c:	e7fe      	b.n	800776c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800776e:	697b      	ldr	r3, [r7, #20]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200010f8 	.word	0x200010f8
 800777c:	08008708 	.word	0x08008708
 8007780:	080078a5 	.word	0x080078a5
 8007784:	200010fc 	.word	0x200010fc

08007788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007796:	2300      	movs	r3, #0
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10a      	bne.n	80077b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	623b      	str	r3, [r7, #32]
}
 80077b2:	bf00      	nop
 80077b4:	e7fe      	b.n	80077b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077b6:	4b1a      	ldr	r3, [pc, #104]	; (8007820 <xTimerGenericCommand+0x98>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d02a      	beq.n	8007814 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b05      	cmp	r3, #5
 80077ce:	dc18      	bgt.n	8007802 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077d0:	f7ff fe9a 	bl	8007508 <xTaskGetSchedulerState>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d109      	bne.n	80077ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077da:	4b11      	ldr	r3, [pc, #68]	; (8007820 <xTimerGenericCommand+0x98>)
 80077dc:	6818      	ldr	r0, [r3, #0]
 80077de:	f107 0110 	add.w	r1, r7, #16
 80077e2:	2300      	movs	r3, #0
 80077e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e6:	f7fe fbfd 	bl	8005fe4 <xQueueGenericSend>
 80077ea:	6278      	str	r0, [r7, #36]	; 0x24
 80077ec:	e012      	b.n	8007814 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077ee:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <xTimerGenericCommand+0x98>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f107 0110 	add.w	r1, r7, #16
 80077f6:	2300      	movs	r3, #0
 80077f8:	2200      	movs	r2, #0
 80077fa:	f7fe fbf3 	bl	8005fe4 <xQueueGenericSend>
 80077fe:	6278      	str	r0, [r7, #36]	; 0x24
 8007800:	e008      	b.n	8007814 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007802:	4b07      	ldr	r3, [pc, #28]	; (8007820 <xTimerGenericCommand+0x98>)
 8007804:	6818      	ldr	r0, [r3, #0]
 8007806:	f107 0110 	add.w	r1, r7, #16
 800780a:	2300      	movs	r3, #0
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	f7fe fce7 	bl	80061e0 <xQueueGenericSendFromISR>
 8007812:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007816:	4618      	mov	r0, r3
 8007818:	3728      	adds	r7, #40	; 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200010f8 	.word	0x200010f8

08007824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af02      	add	r7, sp, #8
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <prvProcessExpiredTimer+0x7c>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	3304      	adds	r3, #4
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe faa5 	bl	8005d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d122      	bne.n	8007890 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	18d1      	adds	r1, r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	6978      	ldr	r0, [r7, #20]
 8007858:	f000 f8c8 	bl	80079ec <prvInsertTimerInActiveList>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d016      	beq.n	8007890 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007862:	2300      	movs	r3, #0
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	2300      	movs	r3, #0
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	2100      	movs	r1, #0
 800786c:	6978      	ldr	r0, [r7, #20]
 800786e:	f7ff ff8b 	bl	8007788 <xTimerGenericCommand>
 8007872:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	60fb      	str	r3, [r7, #12]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	6978      	ldr	r0, [r7, #20]
 8007896:	4798      	blx	r3
}
 8007898:	bf00      	nop
 800789a:	3718      	adds	r7, #24
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200010f0 	.word	0x200010f0

080078a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078ac:	f107 0308 	add.w	r3, r7, #8
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 f857 	bl	8007964 <prvGetNextExpireTime>
 80078b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f803 	bl	80078c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078c2:	f000 f8d5 	bl	8007a70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078c6:	e7f1      	b.n	80078ac <prvTimerTask+0x8>

080078c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078d2:	f7ff f989 	bl	8006be8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f866 	bl	80079ac <prvSampleTimeNow>
 80078e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d130      	bne.n	800794a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10a      	bne.n	8007904 <prvProcessTimerOrBlockTask+0x3c>
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d806      	bhi.n	8007904 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078f6:	f7ff f985 	bl	8006c04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078fa:	68f9      	ldr	r1, [r7, #12]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff ff91 	bl	8007824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007902:	e024      	b.n	800794e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <prvProcessTimerOrBlockTask+0x90>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800791c:	4b0f      	ldr	r3, [pc, #60]	; (800795c <prvProcessTimerOrBlockTask+0x94>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	f7fe ff09 	bl	8006740 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800792e:	f7ff f969 	bl	8006c04 <xTaskResumeAll>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10a      	bne.n	800794e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007938:	4b09      	ldr	r3, [pc, #36]	; (8007960 <prvProcessTimerOrBlockTask+0x98>)
 800793a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	f3bf 8f6f 	isb	sy
}
 8007948:	e001      	b.n	800794e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800794a:	f7ff f95b 	bl	8006c04 <xTaskResumeAll>
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	200010f4 	.word	0x200010f4
 800795c:	200010f8 	.word	0x200010f8
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <prvGetNextExpireTime+0x44>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <prvGetNextExpireTime+0x44>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	e001      	b.n	800799a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bc80      	pop	{r7}
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	200010f0 	.word	0x200010f0

080079ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079b4:	f7ff f9c4 	bl	8006d40 <xTaskGetTickCount>
 80079b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <prvSampleTimeNow+0x3c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d205      	bcs.n	80079d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079c4:	f000 f908 	bl	8007bd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	e002      	b.n	80079d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079d6:	4a04      	ldr	r2, [pc, #16]	; (80079e8 <prvSampleTimeNow+0x3c>)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079dc:	68fb      	ldr	r3, [r7, #12]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20001100 	.word	0x20001100

080079ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d812      	bhi.n	8007a38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	1ad2      	subs	r2, r2, r3
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d302      	bcc.n	8007a26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e01b      	b.n	8007a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a26:	4b10      	ldr	r3, [pc, #64]	; (8007a68 <prvInsertTimerInActiveList+0x7c>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4610      	mov	r0, r2
 8007a32:	f7fe f973 	bl	8005d1c <vListInsert>
 8007a36:	e012      	b.n	8007a5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d206      	bcs.n	8007a4e <prvInsertTimerInActiveList+0x62>
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d302      	bcc.n	8007a4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	e007      	b.n	8007a5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <prvInsertTimerInActiveList+0x80>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe f95f 	bl	8005d1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a5e:	697b      	ldr	r3, [r7, #20]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200010f4 	.word	0x200010f4
 8007a6c:	200010f0 	.word	0x200010f0

08007a70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08e      	sub	sp, #56	; 0x38
 8007a74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a76:	e09d      	b.n	8007bb4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da18      	bge.n	8007ab0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a7e:	1d3b      	adds	r3, r7, #4
 8007a80:	3304      	adds	r3, #4
 8007a82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	61fb      	str	r3, [r7, #28]
}
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa6:	6850      	ldr	r0, [r2, #4]
 8007aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aaa:	6892      	ldr	r2, [r2, #8]
 8007aac:	4611      	mov	r1, r2
 8007aae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	db7e      	blt.n	8007bb4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe f960 	bl	8005d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007acc:	463b      	mov	r3, r7
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff ff6c 	bl	80079ac <prvSampleTimeNow>
 8007ad4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b09      	cmp	r3, #9
 8007ada:	d86a      	bhi.n	8007bb2 <prvProcessReceivedCommands+0x142>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <prvProcessReceivedCommands+0x74>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b0d 	.word	0x08007b0d
 8007aec:	08007b0d 	.word	0x08007b0d
 8007af0:	08007bb5 	.word	0x08007bb5
 8007af4:	08007b69 	.word	0x08007b69
 8007af8:	08007ba1 	.word	0x08007ba1
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b0d 	.word	0x08007b0d
 8007b04:	08007bb5 	.word	0x08007bb5
 8007b08:	08007b69 	.word	0x08007b69
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	18d1      	adds	r1, r2, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1a:	f7ff ff67 	bl	80079ec <prvInsertTimerInActiveList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d047      	beq.n	8007bb4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b2a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d13f      	bne.n	8007bb4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	441a      	add	r2, r3
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	2100      	movs	r1, #0
 8007b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b46:	f7ff fe1f 	bl	8007788 <xTimerGenericCommand>
 8007b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d130      	bne.n	8007bb4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	61bb      	str	r3, [r7, #24]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	18d1      	adds	r1, r2, r3
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f7ff ff27 	bl	80079ec <prvInsertTimerInActiveList>
					break;
 8007b9e:	e009      	b.n	8007bb4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bac:	f000 fb8a 	bl	80082c4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bb0:	e000      	b.n	8007bb4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8007bb2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <prvProcessReceivedCommands+0x164>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	1d39      	adds	r1, r7, #4
 8007bba:	2200      	movs	r2, #0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fba7 	bl	8006310 <xQueueReceive>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f47f af57 	bne.w	8007a78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	3730      	adds	r7, #48	; 0x30
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	200010f8 	.word	0x200010f8

08007bd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bde:	e045      	b.n	8007c6c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007be0:	4b2c      	ldr	r3, [pc, #176]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bea:	4b2a      	ldr	r3, [pc, #168]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe f8c7 	bl	8005d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d12e      	bne.n	8007c6c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4413      	add	r3, r2
 8007c16:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d90e      	bls.n	8007c3e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c2c:	4b19      	ldr	r3, [pc, #100]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fe f870 	bl	8005d1c <vListInsert>
 8007c3c:	e016      	b.n	8007c6c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c3e:	2300      	movs	r3, #0
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	2300      	movs	r3, #0
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fd9d 	bl	8007788 <xTimerGenericCommand>
 8007c4e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	603b      	str	r3, [r7, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c6c:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1b4      	bne.n	8007be0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007c7c:	4b06      	ldr	r3, [pc, #24]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a04      	ldr	r2, [pc, #16]	; (8007c94 <prvSwitchTimerLists+0xbc>)
 8007c82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007c84:	4a04      	ldr	r2, [pc, #16]	; (8007c98 <prvSwitchTimerLists+0xc0>)
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	6013      	str	r3, [r2, #0]
}
 8007c8a:	bf00      	nop
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	200010f0 	.word	0x200010f0
 8007c98:	200010f4 	.word	0x200010f4

08007c9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ca2:	f000 f94b 	bl	8007f3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ca6:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d120      	bne.n	8007cf0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cae:	4814      	ldr	r0, [pc, #80]	; (8007d00 <prvCheckForValidListAndQueue+0x64>)
 8007cb0:	f7fd ffe6 	bl	8005c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007cb4:	4813      	ldr	r0, [pc, #76]	; (8007d04 <prvCheckForValidListAndQueue+0x68>)
 8007cb6:	f7fd ffe3 	bl	8005c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007cba:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <prvCheckForValidListAndQueue+0x6c>)
 8007cbc:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <prvCheckForValidListAndQueue+0x64>)
 8007cbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <prvCheckForValidListAndQueue+0x70>)
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <prvCheckForValidListAndQueue+0x68>)
 8007cc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <prvCheckForValidListAndQueue+0x74>)
 8007ccc:	4a11      	ldr	r2, [pc, #68]	; (8007d14 <prvCheckForValidListAndQueue+0x78>)
 8007cce:	2110      	movs	r1, #16
 8007cd0:	200a      	movs	r0, #10
 8007cd2:	f7fe f8ed 	bl	8005eb0 <xQueueGenericCreateStatic>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4a08      	ldr	r2, [pc, #32]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007cda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d005      	beq.n	8007cf0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ce4:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <prvCheckForValidListAndQueue+0x60>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	490b      	ldr	r1, [pc, #44]	; (8007d18 <prvCheckForValidListAndQueue+0x7c>)
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe fd00 	bl	80066f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cf0:	f000 f954 	bl	8007f9c <vPortExitCritical>
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	200010f8 	.word	0x200010f8
 8007d00:	200010c8 	.word	0x200010c8
 8007d04:	200010dc 	.word	0x200010dc
 8007d08:	200010f0 	.word	0x200010f0
 8007d0c:	200010f4 	.word	0x200010f4
 8007d10:	200011a4 	.word	0x200011a4
 8007d14:	20001104 	.word	0x20001104
 8007d18:	08008710 	.word	0x08008710

08007d1c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08a      	sub	sp, #40	; 0x28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007d2a:	f06f 0301 	mvn.w	r3, #1
 8007d2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <xTimerPendFunctionCallFromISR+0x3c>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	f107 0114 	add.w	r1, r7, #20
 8007d44:	2300      	movs	r3, #0
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	f7fe fa4a 	bl	80061e0 <xQueueGenericSendFromISR>
 8007d4c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3728      	adds	r7, #40	; 0x28
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	200010f8 	.word	0x200010f8

08007d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3b04      	subs	r3, #4
 8007d6c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3b04      	subs	r3, #4
 8007d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0201 	bic.w	r2, r3, #1
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d8c:	4a08      	ldr	r2, [pc, #32]	; (8007db0 <pxPortInitialiseStack+0x54>)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3b14      	subs	r3, #20
 8007d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3b20      	subs	r3, #32
 8007da2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007da4:	68fb      	ldr	r3, [r7, #12]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	08007db5 	.word	0x08007db5

08007db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007db4:	b480      	push	{r7}
 8007db6:	b085      	sub	sp, #20
 8007db8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dbe:	4b12      	ldr	r3, [pc, #72]	; (8007e08 <prvTaskExitError+0x54>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d00a      	beq.n	8007dde <prvTaskExitError+0x2a>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	60fb      	str	r3, [r7, #12]
}
 8007dda:	bf00      	nop
 8007ddc:	e7fe      	b.n	8007ddc <prvTaskExitError+0x28>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60bb      	str	r3, [r7, #8]
}
 8007df0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007df2:	bf00      	nop
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d0fc      	beq.n	8007df4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007dfa:	bf00      	nop
 8007dfc:	bf00      	nop
 8007dfe:	3714      	adds	r7, #20
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000020 	.word	0x20000020
 8007e0c:	00000000 	.word	0x00000000

08007e10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <pxCurrentTCBConst2>)
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	6808      	ldr	r0, [r1, #0]
 8007e16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e1a:	f380 8809 	msr	PSP, r0
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f04f 0000 	mov.w	r0, #0
 8007e26:	f380 8811 	msr	BASEPRI, r0
 8007e2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e2e:	4770      	bx	lr

08007e30 <pxCurrentTCBConst2>:
 8007e30:	20000bc8 	.word	0x20000bc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e38:	4806      	ldr	r0, [pc, #24]	; (8007e54 <prvPortStartFirstTask+0x1c>)
 8007e3a:	6800      	ldr	r0, [r0, #0]
 8007e3c:	6800      	ldr	r0, [r0, #0]
 8007e3e:	f380 8808 	msr	MSP, r0
 8007e42:	b662      	cpsie	i
 8007e44:	b661      	cpsie	f
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	df00      	svc	0
 8007e50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e52:	bf00      	nop
 8007e54:	e000ed08 	.word	0xe000ed08

08007e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e5e:	4b32      	ldr	r3, [pc, #200]	; (8007f28 <xPortStartScheduler+0xd0>)
 8007e60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e78:	78fb      	ldrb	r3, [r7, #3]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <xPortStartScheduler+0xd4>)
 8007e84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e86:	4b2a      	ldr	r3, [pc, #168]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e88:	2207      	movs	r2, #7
 8007e8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e8c:	e009      	b.n	8007ea2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e8e:	4b28      	ldr	r3, [pc, #160]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007e96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d0ef      	beq.n	8007e8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007eae:	4b20      	ldr	r3, [pc, #128]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f1c3 0307 	rsb	r3, r3, #7
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d00a      	beq.n	8007ed0 <xPortStartScheduler+0x78>
	__asm volatile
 8007eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ebe:	f383 8811 	msr	BASEPRI, r3
 8007ec2:	f3bf 8f6f 	isb	sy
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	60bb      	str	r3, [r7, #8]
}
 8007ecc:	bf00      	nop
 8007ece:	e7fe      	b.n	8007ece <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ed0:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	021b      	lsls	r3, r3, #8
 8007ed6:	4a16      	ldr	r2, [pc, #88]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ed8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ee2:	4a13      	ldr	r2, [pc, #76]	; (8007f30 <xPortStartScheduler+0xd8>)
 8007ee4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007eee:	4b11      	ldr	r3, [pc, #68]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a10      	ldr	r2, [pc, #64]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ef8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007efa:	4b0e      	ldr	r3, [pc, #56]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a0d      	ldr	r2, [pc, #52]	; (8007f34 <xPortStartScheduler+0xdc>)
 8007f00:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007f04:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f06:	f000 f8b9 	bl	800807c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <xPortStartScheduler+0xe0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f10:	f7ff ff92 	bl	8007e38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f14:	f7fe ffe0 	bl	8006ed8 <vTaskSwitchContext>
	prvTaskExitError();
 8007f18:	f7ff ff4c 	bl	8007db4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	e000e400 	.word	0xe000e400
 8007f2c:	200011f4 	.word	0x200011f4
 8007f30:	200011f8 	.word	0x200011f8
 8007f34:	e000ed20 	.word	0xe000ed20
 8007f38:	20000020 	.word	0x20000020

08007f3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	607b      	str	r3, [r7, #4]
}
 8007f54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	4a0d      	ldr	r2, [pc, #52]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f5e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <vPortEnterCritical+0x58>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d10f      	bne.n	8007f88 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f68:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <vPortEnterCritical+0x5c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <vPortEnterCritical+0x4c>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	603b      	str	r3, [r7, #0]
}
 8007f84:	bf00      	nop
 8007f86:	e7fe      	b.n	8007f86 <vPortEnterCritical+0x4a>
	}
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000020 	.word	0x20000020
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <vPortExitCritical+0x24>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	607b      	str	r3, [r7, #4]
}
 8007fbc:	bf00      	nop
 8007fbe:	e7fe      	b.n	8007fbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fc0:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a08      	ldr	r2, [pc, #32]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fc8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <vPortExitCritical+0x4c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <vPortExitCritical+0x42>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	f383 8811 	msr	BASEPRI, r3
}
 8007fdc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bc80      	pop	{r7}
 8007fe6:	4770      	bx	lr
 8007fe8:	20000020 	.word	0x20000020
 8007fec:	00000000 	.word	0x00000000

08007ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ff0:	f3ef 8009 	mrs	r0, PSP
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <pxCurrentTCBConst>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008000:	6010      	str	r0, [r2, #0]
 8008002:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008006:	f04f 0050 	mov.w	r0, #80	; 0x50
 800800a:	f380 8811 	msr	BASEPRI, r0
 800800e:	f7fe ff63 	bl	8006ed8 <vTaskSwitchContext>
 8008012:	f04f 0000 	mov.w	r0, #0
 8008016:	f380 8811 	msr	BASEPRI, r0
 800801a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008026:	f380 8809 	msr	PSP, r0
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	4770      	bx	lr

08008030 <pxCurrentTCBConst>:
 8008030:	20000bc8 	.word	0x20000bc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop

08008038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	607b      	str	r3, [r7, #4]
}
 8008050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008052:	f7fe fe83 	bl	8006d5c <xTaskIncrementTick>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800805c:	4b06      	ldr	r3, [pc, #24]	; (8008078 <xPortSysTickHandler+0x40>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	f383 8811 	msr	BASEPRI, r3
}
 800806e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <vPortSetupTimerInterrupt+0x30>)
 8008082:	2200      	movs	r2, #0
 8008084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <vPortSetupTimerInterrupt+0x34>)
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <vPortSetupTimerInterrupt+0x38>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a09      	ldr	r2, [pc, #36]	; (80080b8 <vPortSetupTimerInterrupt+0x3c>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	099b      	lsrs	r3, r3, #6
 8008098:	4a08      	ldr	r2, [pc, #32]	; (80080bc <vPortSetupTimerInterrupt+0x40>)
 800809a:	3b01      	subs	r3, #1
 800809c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800809e:	4b03      	ldr	r3, [pc, #12]	; (80080ac <vPortSetupTimerInterrupt+0x30>)
 80080a0:	2207      	movs	r2, #7
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	e000e010 	.word	0xe000e010
 80080b0:	e000e018 	.word	0xe000e018
 80080b4:	20000014 	.word	0x20000014
 80080b8:	10624dd3 	.word	0x10624dd3
 80080bc:	e000e014 	.word	0xe000e014

080080c0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080c6:	f3ef 8305 	mrs	r3, IPSR
 80080ca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	d914      	bls.n	80080fc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080d2:	4a16      	ldr	r2, [pc, #88]	; (800812c <vPortValidateInterruptPriority+0x6c>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4413      	add	r3, r2
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080dc:	4b14      	ldr	r3, [pc, #80]	; (8008130 <vPortValidateInterruptPriority+0x70>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	7afa      	ldrb	r2, [r7, #11]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d20a      	bcs.n	80080fc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	607b      	str	r3, [r7, #4]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <vPortValidateInterruptPriority+0x74>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <vPortValidateInterruptPriority+0x78>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d90a      	bls.n	8008122 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	603b      	str	r3, [r7, #0]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vPortValidateInterruptPriority+0x60>
	}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr
 800812c:	e000e3f0 	.word	0xe000e3f0
 8008130:	200011f4 	.word	0x200011f4
 8008134:	e000ed0c 	.word	0xe000ed0c
 8008138:	200011f8 	.word	0x200011f8

0800813c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08a      	sub	sp, #40	; 0x28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008148:	f7fe fd4e 	bl	8006be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800814c:	4b58      	ldr	r3, [pc, #352]	; (80082b0 <pvPortMalloc+0x174>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008154:	f000 f910 	bl	8008378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008158:	4b56      	ldr	r3, [pc, #344]	; (80082b4 <pvPortMalloc+0x178>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4013      	ands	r3, r2
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 808e 	bne.w	8008282 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01d      	beq.n	80081a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800816c:	2208      	movs	r2, #8
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4413      	add	r3, r2
 8008172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f003 0307 	and.w	r3, r3, #7
 800817a:	2b00      	cmp	r3, #0
 800817c:	d014      	beq.n	80081a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f023 0307 	bic.w	r3, r3, #7
 8008184:	3308      	adds	r3, #8
 8008186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <pvPortMalloc+0x6c>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	617b      	str	r3, [r7, #20]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d069      	beq.n	8008282 <pvPortMalloc+0x146>
 80081ae:	4b42      	ldr	r3, [pc, #264]	; (80082b8 <pvPortMalloc+0x17c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d864      	bhi.n	8008282 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081b8:	4b40      	ldr	r3, [pc, #256]	; (80082bc <pvPortMalloc+0x180>)
 80081ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081bc:	4b3f      	ldr	r3, [pc, #252]	; (80082bc <pvPortMalloc+0x180>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081c2:	e004      	b.n	80081ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d903      	bls.n	80081e0 <pvPortMalloc+0xa4>
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f1      	bne.n	80081c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081e0:	4b33      	ldr	r3, [pc, #204]	; (80082b0 <pvPortMalloc+0x174>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d04b      	beq.n	8008282 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2208      	movs	r2, #8
 80081f0:	4413      	add	r3, r2
 80081f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1ad2      	subs	r2, r2, r3
 8008204:	2308      	movs	r3, #8
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	429a      	cmp	r2, r3
 800820a:	d91f      	bls.n	800824c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800820c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4413      	add	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <pvPortMalloc+0xf8>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	613b      	str	r3, [r7, #16]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008246:	69b8      	ldr	r0, [r7, #24]
 8008248:	f000 f8f8 	bl	800843c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800824c:	4b1a      	ldr	r3, [pc, #104]	; (80082b8 <pvPortMalloc+0x17c>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	4a18      	ldr	r2, [pc, #96]	; (80082b8 <pvPortMalloc+0x17c>)
 8008258:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800825a:	4b17      	ldr	r3, [pc, #92]	; (80082b8 <pvPortMalloc+0x17c>)
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4b18      	ldr	r3, [pc, #96]	; (80082c0 <pvPortMalloc+0x184>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d203      	bcs.n	800826e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008266:	4b14      	ldr	r3, [pc, #80]	; (80082b8 <pvPortMalloc+0x17c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a15      	ldr	r2, [pc, #84]	; (80082c0 <pvPortMalloc+0x184>)
 800826c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <pvPortMalloc+0x178>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	431a      	orrs	r2, r3
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008282:	f7fe fcbf 	bl	8006c04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00a      	beq.n	80082a6 <pvPortMalloc+0x16a>
	__asm volatile
 8008290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008294:	f383 8811 	msr	BASEPRI, r3
 8008298:	f3bf 8f6f 	isb	sy
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	60fb      	str	r3, [r7, #12]
}
 80082a2:	bf00      	nop
 80082a4:	e7fe      	b.n	80082a4 <pvPortMalloc+0x168>
	return pvReturn;
 80082a6:	69fb      	ldr	r3, [r7, #28]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3728      	adds	r7, #40	; 0x28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20003914 	.word	0x20003914
 80082b4:	20003920 	.word	0x20003920
 80082b8:	20003918 	.word	0x20003918
 80082bc:	2000390c 	.word	0x2000390c
 80082c0:	2000391c 	.word	0x2000391c

080082c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d048      	beq.n	8008368 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082d6:	2308      	movs	r3, #8
 80082d8:	425b      	negs	r3, r3
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4413      	add	r3, r2
 80082de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4b21      	ldr	r3, [pc, #132]	; (8008370 <vPortFree+0xac>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4013      	ands	r3, r2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <vPortFree+0x44>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	60fb      	str	r3, [r7, #12]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <vPortFree+0x62>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	60bb      	str	r3, [r7, #8]
}
 8008322:	bf00      	nop
 8008324:	e7fe      	b.n	8008324 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	4b11      	ldr	r3, [pc, #68]	; (8008370 <vPortFree+0xac>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4013      	ands	r3, r2
 8008330:	2b00      	cmp	r3, #0
 8008332:	d019      	beq.n	8008368 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d115      	bne.n	8008368 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <vPortFree+0xac>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	43db      	mvns	r3, r3
 8008346:	401a      	ands	r2, r3
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800834c:	f7fe fc4c 	bl	8006be8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	4b07      	ldr	r3, [pc, #28]	; (8008374 <vPortFree+0xb0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4413      	add	r3, r2
 800835a:	4a06      	ldr	r2, [pc, #24]	; (8008374 <vPortFree+0xb0>)
 800835c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800835e:	6938      	ldr	r0, [r7, #16]
 8008360:	f000 f86c 	bl	800843c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008364:	f7fe fc4e 	bl	8006c04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008368:	bf00      	nop
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20003920 	.word	0x20003920
 8008374:	20003918 	.word	0x20003918

08008378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800837e:	f242 7310 	movw	r3, #10000	; 0x2710
 8008382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008384:	4b27      	ldr	r3, [pc, #156]	; (8008424 <prvHeapInit+0xac>)
 8008386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00c      	beq.n	80083ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3307      	adds	r3, #7
 8008396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0307 	bic.w	r3, r3, #7
 800839e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	4a1f      	ldr	r2, [pc, #124]	; (8008424 <prvHeapInit+0xac>)
 80083a8:	4413      	add	r3, r2
 80083aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083b0:	4a1d      	ldr	r2, [pc, #116]	; (8008428 <prvHeapInit+0xb0>)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083b6:	4b1c      	ldr	r3, [pc, #112]	; (8008428 <prvHeapInit+0xb0>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083c4:	2208      	movs	r2, #8
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f023 0307 	bic.w	r3, r3, #7
 80083d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4a15      	ldr	r2, [pc, #84]	; (800842c <prvHeapInit+0xb4>)
 80083d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083da:	4b14      	ldr	r3, [pc, #80]	; (800842c <prvHeapInit+0xb4>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2200      	movs	r2, #0
 80083e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <prvHeapInit+0xb4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	1ad2      	subs	r2, r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <prvHeapInit+0xb4>)
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a0a      	ldr	r2, [pc, #40]	; (8008430 <prvHeapInit+0xb8>)
 8008406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	4a09      	ldr	r2, [pc, #36]	; (8008434 <prvHeapInit+0xbc>)
 800840e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvHeapInit+0xc0>)
 8008412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008416:	601a      	str	r2, [r3, #0]
}
 8008418:	bf00      	nop
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bc80      	pop	{r7}
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	200011fc 	.word	0x200011fc
 8008428:	2000390c 	.word	0x2000390c
 800842c:	20003914 	.word	0x20003914
 8008430:	2000391c 	.word	0x2000391c
 8008434:	20003918 	.word	0x20003918
 8008438:	20003920 	.word	0x20003920

0800843c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <prvInsertBlockIntoFreeList+0xa8>)
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e002      	b.n	8008450 <prvInsertBlockIntoFreeList+0x14>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d8f7      	bhi.n	800844a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	4413      	add	r3, r2
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	429a      	cmp	r2, r3
 800846a:	d108      	bne.n	800847e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	441a      	add	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d118      	bne.n	80084c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <prvInsertBlockIntoFreeList+0xac>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d00d      	beq.n	80084ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	441a      	add	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	e008      	b.n	80084cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <prvInsertBlockIntoFreeList+0xac>)
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	e003      	b.n	80084cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d002      	beq.n	80084da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084da:	bf00      	nop
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr
 80084e4:	2000390c 	.word	0x2000390c
 80084e8:	20003914 	.word	0x20003914

080084ec <memset>:
 80084ec:	4603      	mov	r3, r0
 80084ee:	4402      	add	r2, r0
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d100      	bne.n	80084f6 <memset+0xa>
 80084f4:	4770      	bx	lr
 80084f6:	f803 1b01 	strb.w	r1, [r3], #1
 80084fa:	e7f9      	b.n	80084f0 <memset+0x4>

080084fc <_reclaim_reent>:
 80084fc:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <_reclaim_reent+0xa8>)
 80084fe:	b570      	push	{r4, r5, r6, lr}
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4604      	mov	r4, r0
 8008504:	4283      	cmp	r3, r0
 8008506:	d04b      	beq.n	80085a0 <_reclaim_reent+0xa4>
 8008508:	69c3      	ldr	r3, [r0, #28]
 800850a:	b143      	cbz	r3, 800851e <_reclaim_reent+0x22>
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d144      	bne.n	800859c <_reclaim_reent+0xa0>
 8008512:	69e3      	ldr	r3, [r4, #28]
 8008514:	6819      	ldr	r1, [r3, #0]
 8008516:	b111      	cbz	r1, 800851e <_reclaim_reent+0x22>
 8008518:	4620      	mov	r0, r4
 800851a:	f000 f879 	bl	8008610 <_free_r>
 800851e:	6961      	ldr	r1, [r4, #20]
 8008520:	b111      	cbz	r1, 8008528 <_reclaim_reent+0x2c>
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f874 	bl	8008610 <_free_r>
 8008528:	69e1      	ldr	r1, [r4, #28]
 800852a:	b111      	cbz	r1, 8008532 <_reclaim_reent+0x36>
 800852c:	4620      	mov	r0, r4
 800852e:	f000 f86f 	bl	8008610 <_free_r>
 8008532:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008534:	b111      	cbz	r1, 800853c <_reclaim_reent+0x40>
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f86a 	bl	8008610 <_free_r>
 800853c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800853e:	b111      	cbz	r1, 8008546 <_reclaim_reent+0x4a>
 8008540:	4620      	mov	r0, r4
 8008542:	f000 f865 	bl	8008610 <_free_r>
 8008546:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008548:	b111      	cbz	r1, 8008550 <_reclaim_reent+0x54>
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f860 	bl	8008610 <_free_r>
 8008550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008552:	b111      	cbz	r1, 800855a <_reclaim_reent+0x5e>
 8008554:	4620      	mov	r0, r4
 8008556:	f000 f85b 	bl	8008610 <_free_r>
 800855a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800855c:	b111      	cbz	r1, 8008564 <_reclaim_reent+0x68>
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f856 	bl	8008610 <_free_r>
 8008564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008566:	b111      	cbz	r1, 800856e <_reclaim_reent+0x72>
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f851 	bl	8008610 <_free_r>
 800856e:	6a23      	ldr	r3, [r4, #32]
 8008570:	b1b3      	cbz	r3, 80085a0 <_reclaim_reent+0xa4>
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008578:	4718      	bx	r3
 800857a:	5949      	ldr	r1, [r1, r5]
 800857c:	b941      	cbnz	r1, 8008590 <_reclaim_reent+0x94>
 800857e:	3504      	adds	r5, #4
 8008580:	69e3      	ldr	r3, [r4, #28]
 8008582:	2d80      	cmp	r5, #128	; 0x80
 8008584:	68d9      	ldr	r1, [r3, #12]
 8008586:	d1f8      	bne.n	800857a <_reclaim_reent+0x7e>
 8008588:	4620      	mov	r0, r4
 800858a:	f000 f841 	bl	8008610 <_free_r>
 800858e:	e7c0      	b.n	8008512 <_reclaim_reent+0x16>
 8008590:	680e      	ldr	r6, [r1, #0]
 8008592:	4620      	mov	r0, r4
 8008594:	f000 f83c 	bl	8008610 <_free_r>
 8008598:	4631      	mov	r1, r6
 800859a:	e7ef      	b.n	800857c <_reclaim_reent+0x80>
 800859c:	2500      	movs	r5, #0
 800859e:	e7ef      	b.n	8008580 <_reclaim_reent+0x84>
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
 80085a2:	bf00      	nop
 80085a4:	20000070 	.word	0x20000070

080085a8 <__libc_init_array>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	2600      	movs	r6, #0
 80085ac:	4d0c      	ldr	r5, [pc, #48]	; (80085e0 <__libc_init_array+0x38>)
 80085ae:	4c0d      	ldr	r4, [pc, #52]	; (80085e4 <__libc_init_array+0x3c>)
 80085b0:	1b64      	subs	r4, r4, r5
 80085b2:	10a4      	asrs	r4, r4, #2
 80085b4:	42a6      	cmp	r6, r4
 80085b6:	d109      	bne.n	80085cc <__libc_init_array+0x24>
 80085b8:	f000 f87e 	bl	80086b8 <_init>
 80085bc:	2600      	movs	r6, #0
 80085be:	4d0a      	ldr	r5, [pc, #40]	; (80085e8 <__libc_init_array+0x40>)
 80085c0:	4c0a      	ldr	r4, [pc, #40]	; (80085ec <__libc_init_array+0x44>)
 80085c2:	1b64      	subs	r4, r4, r5
 80085c4:	10a4      	asrs	r4, r4, #2
 80085c6:	42a6      	cmp	r6, r4
 80085c8:	d105      	bne.n	80085d6 <__libc_init_array+0x2e>
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d0:	4798      	blx	r3
 80085d2:	3601      	adds	r6, #1
 80085d4:	e7ee      	b.n	80085b4 <__libc_init_array+0xc>
 80085d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085da:	4798      	blx	r3
 80085dc:	3601      	adds	r6, #1
 80085de:	e7f2      	b.n	80085c6 <__libc_init_array+0x1e>
 80085e0:	080087b0 	.word	0x080087b0
 80085e4:	080087b0 	.word	0x080087b0
 80085e8:	080087b0 	.word	0x080087b0
 80085ec:	080087b4 	.word	0x080087b4

080085f0 <__retarget_lock_acquire_recursive>:
 80085f0:	4770      	bx	lr

080085f2 <__retarget_lock_release_recursive>:
 80085f2:	4770      	bx	lr

080085f4 <memcpy>:
 80085f4:	440a      	add	r2, r1
 80085f6:	4291      	cmp	r1, r2
 80085f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085fc:	d100      	bne.n	8008600 <memcpy+0xc>
 80085fe:	4770      	bx	lr
 8008600:	b510      	push	{r4, lr}
 8008602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008606:	4291      	cmp	r1, r2
 8008608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800860c:	d1f9      	bne.n	8008602 <memcpy+0xe>
 800860e:	bd10      	pop	{r4, pc}

08008610 <_free_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4605      	mov	r5, r0
 8008614:	2900      	cmp	r1, #0
 8008616:	d040      	beq.n	800869a <_free_r+0x8a>
 8008618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800861c:	1f0c      	subs	r4, r1, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	bfb8      	it	lt
 8008622:	18e4      	addlt	r4, r4, r3
 8008624:	f000 f83c 	bl	80086a0 <__malloc_lock>
 8008628:	4a1c      	ldr	r2, [pc, #112]	; (800869c <_free_r+0x8c>)
 800862a:	6813      	ldr	r3, [r2, #0]
 800862c:	b933      	cbnz	r3, 800863c <_free_r+0x2c>
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	6014      	str	r4, [r2, #0]
 8008632:	4628      	mov	r0, r5
 8008634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008638:	f000 b838 	b.w	80086ac <__malloc_unlock>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d908      	bls.n	8008652 <_free_r+0x42>
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	1821      	adds	r1, r4, r0
 8008644:	428b      	cmp	r3, r1
 8008646:	bf01      	itttt	eq
 8008648:	6819      	ldreq	r1, [r3, #0]
 800864a:	685b      	ldreq	r3, [r3, #4]
 800864c:	1809      	addeq	r1, r1, r0
 800864e:	6021      	streq	r1, [r4, #0]
 8008650:	e7ed      	b.n	800862e <_free_r+0x1e>
 8008652:	461a      	mov	r2, r3
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	b10b      	cbz	r3, 800865c <_free_r+0x4c>
 8008658:	42a3      	cmp	r3, r4
 800865a:	d9fa      	bls.n	8008652 <_free_r+0x42>
 800865c:	6811      	ldr	r1, [r2, #0]
 800865e:	1850      	adds	r0, r2, r1
 8008660:	42a0      	cmp	r0, r4
 8008662:	d10b      	bne.n	800867c <_free_r+0x6c>
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	4401      	add	r1, r0
 8008668:	1850      	adds	r0, r2, r1
 800866a:	4283      	cmp	r3, r0
 800866c:	6011      	str	r1, [r2, #0]
 800866e:	d1e0      	bne.n	8008632 <_free_r+0x22>
 8008670:	6818      	ldr	r0, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	4408      	add	r0, r1
 8008676:	6010      	str	r0, [r2, #0]
 8008678:	6053      	str	r3, [r2, #4]
 800867a:	e7da      	b.n	8008632 <_free_r+0x22>
 800867c:	d902      	bls.n	8008684 <_free_r+0x74>
 800867e:	230c      	movs	r3, #12
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	e7d6      	b.n	8008632 <_free_r+0x22>
 8008684:	6820      	ldr	r0, [r4, #0]
 8008686:	1821      	adds	r1, r4, r0
 8008688:	428b      	cmp	r3, r1
 800868a:	bf01      	itttt	eq
 800868c:	6819      	ldreq	r1, [r3, #0]
 800868e:	685b      	ldreq	r3, [r3, #4]
 8008690:	1809      	addeq	r1, r1, r0
 8008692:	6021      	streq	r1, [r4, #0]
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6054      	str	r4, [r2, #4]
 8008698:	e7cb      	b.n	8008632 <_free_r+0x22>
 800869a:	bd38      	pop	{r3, r4, r5, pc}
 800869c:	20003a60 	.word	0x20003a60

080086a0 <__malloc_lock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__malloc_lock+0x8>)
 80086a2:	f7ff bfa5 	b.w	80085f0 <__retarget_lock_acquire_recursive>
 80086a6:	bf00      	nop
 80086a8:	20003a5c 	.word	0x20003a5c

080086ac <__malloc_unlock>:
 80086ac:	4801      	ldr	r0, [pc, #4]	; (80086b4 <__malloc_unlock+0x8>)
 80086ae:	f7ff bfa0 	b.w	80085f2 <__retarget_lock_release_recursive>
 80086b2:	bf00      	nop
 80086b4:	20003a5c 	.word	0x20003a5c

080086b8 <_init>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr

080086c4 <_fini>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	bf00      	nop
 80086c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ca:	bc08      	pop	{r3}
 80086cc:	469e      	mov	lr, r3
 80086ce:	4770      	bx	lr
